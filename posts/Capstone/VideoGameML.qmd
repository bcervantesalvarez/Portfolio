---
title: "Innovating Game Production: Anticipating Success through Pre-Production Insights"
author: 
    - "Brian Cervantes Alvarez"
    - "John Bergstrom"
    - "Oliver Anderson"
    - "Heather Terada"
    - "Willa Van Liew"
date: "08-08-2023"
draft: true
description: "Create mature games designed for inexperienced players. Avoid the saturated market of winter game releases. Game developers, pay attention to this!"
image: "Developer.png"
format:
  html:
    smooth-scroll: true
    toc: true
    toc-location: right
    html-math-method: katex
    page-layout: full
execute: 
  warning: false
  message: false
categories: 
    - Python
    - R
    - APIs
    - Webscraper
    - Machine Learning
    - Random Forest
    - Gradient Boosting Machines
    - XGBoost
    - Classification
jupyter: python3
---

![](Developer.png)

<div class="download-buttons" style="text-align: center;">
  <style>
    .download-buttons a.button {
      display: inline-block;
      padding-right: 10px;
      padding-left: 35px;
      padding-top: 10px;
      padding-bottom: 10px;
      margin-right: 25px;
      margin-bottom: 20px;
      background-color: #343a40;
      color: #fff;
      text-decoration: none;
      border-radius: 15px;
      position: relative;
    }

    .download-buttons a.button:last-child {
      margin-right: 0;
    }

    .download-buttons a.button:hover {
      background-color: #55595c;
    }

    .download-buttons a.button:after {
      content: "\2193";
      font-size: 20px;
      position: absolute;
      top: 50%;
      left: 12px; /* Added margin from the text */
      transform: translateY(-50%);
      border-bottom: 2px solid #fff;
      padding: 1px; /* Padding for the mini border block */
    }
  </style>

  <script>
    function createDynamicButton(href, text) {
      var button = document.createElement("a");
      button.href = href;
      button.className = "button";
      button.appendChild(document.createTextNode(text));
      return button;
    }

    var downloadButtonsDiv = document.querySelector(".download-buttons");

    var documentButton = createDynamicButton(
      "https://github.com/bcervantesalvarez/Portfolio/blob/main/posts/Capstone2023/VideoGameML.qmd",
      "Download .qmd"
    );
    downloadButtonsDiv.appendChild(documentButton);
    downloadButtonsDiv.appendChild(csvButton);
  </script>
</div>

# Abstract

In the fiercely competitive landscape of the gaming industry, game sales are heavily influenced by marketing strategies and platform exclusivity. Yet, in this dynamic environment, pinpointing the next groundbreaking success while gauging market demand remains a formidable challenge. To tackle this challenge, we've pioneered a robust machine learning algorithm designed to predict a game's potential for success during the pre-production phase. This algorithm draws insights from crucial indicators such as critical reception and key features encompassing genres, release years, platform types, and more. Our model has demonstrated exceptional performance, boasting an accuracy rate of 86.72%, a ROC AUC score of 97.50%, and a Kappa score of 84.03%. Unearthing the elements that underlie triumph, we've identified pivotal determinants that sway the tide of success. These encompass judicious platform selection, optimal game duration, strategic release timing, and the esteemed reputation of the developers. Continuing on this trajectory, the integration of comprehensive sales data and an exploration of supplementary factors—ranging from marketing campaigns, user reviews, to regional influences—holds the promise of further elevating the model's precision. By harnessing these augmentations, we envision guiding developers in the intricate process of crafting games that stand poised for triumph in an ever-evolving industry.


# Introduction

In the dynamic realm of the gaming industry, studios are ceaselessly endeavoring to forge the next monumental success, driven by factors such as creativity, gamer preferences, historical sales data, and feedback garnered from their previous hits. However, the majority of game concepts remain confined to the prototype phase, entailing a drain on both time and resources, ultimately culminating in products that never reach the market. Navigating the transition from pre-production to full-scale production constitutes a protracted and financially demanding journey for game developers (Stefyn, 2022).

Upon entering the production phase, companies channel substantial investments—often in the thousands of dollars—into marketing endeavors that precede a game's release (Flynn, 2023). During the pre-alpha and alpha stages, games are in a state of semi-completion, frequently harboring bugs, limited functionalities, and a dearth of refinement. This stage witnesses their exposure to a select cohort of testers and critics, whose feedback and reviews furnish developers with a crucial compass for gauging the final product's projected demand and its prospects for success among the wider audience.

Given the staggering production cost range spanning from $100 thousand to $100 million (Rocket Brush, 2022), the insights gleaned from playtesters assume a greater significance when channeled earlier into the production lifecycle. Establishing a robust and efficient production pipeline becomes imperative to avert the squandering of time and resources on games that may not yield sales substantial enough to offset production outlays. Envision the potential savings that could be harnessed if one possessed the capability to accurately prognosticate a game's triumph prior to embarking on an advertising crusade.

Empowered with deeper insights into the potential demand for diverse game genres and an understanding of how specific features correlate with historical successes, developers can forge decisions rooted in wisdom before committing substantial resources to a game. Delving into the optimal platforms for a specific game and deciphering the potent combinations of themes and genres would profoundly elevate the likelihood of conceiving games with broad market appeal.

Presenting a pioneering approach, we have crafted a robust machine learning algorithm that forecasts a game's prospective popularity during the pre-production juncture, utilizing critical reception as a proxy metric. This algorithm hinges on pivotal features encompassing genres, release year, platform types, number of players, and more. Armed with this algorithm, developers are empowered to dissect consumer demand and anticipate their game's potential success, all before substantial investments of time and capital are channeled into its development. The algorithm's prowess lies in its ability to assist developers in identifying ideal production or development collaborators who have previously crafted successful games within the same genre, thereby streamlining selection processes and pinpointing features that resonate with fans of a particular genre.

# Methodology

We utilized web scraping techniques to gather data on AAA game titles from the primary dataset of RAWG’s API (RAWG, n.d.), which represents high-budget, top-quality games developed by major studios, encompassing advanced graphics, intricate gameplay, and broad appeal over four decades. The data includes genres, game descriptions, producers, developers, usage, Metacritic ratings, and supported platforms, to name a few variables. Also, due to more granular information about publishers and developers not being available on the RAWG API, another dataset - containing publishers, developers, and sub-genres - were scraped from Wikipedia (Wikipedia contributors, 2023).

Using a Random Forest Classifier and Principal Component Analysis (PCA) machine learning (ML) techniques from scikit-learn 1.3.0 in Python (Pedregosa et al., 2011), we developed a predictive model based on the top 25 features of our PCA to identify the types of games that are likely to be the most successful in the broad gaming space as well as specific markets. We tested Support Vector Classifier (SVC), Random Forest Classifier, Gradient Boosting Classifier, and Logistic Regression to see which had the most significant impact and best results. Cleaning, preprocessing, featured engineering, feature selection, hyperparameter tuning, and multiple feature importance methods were crucial in determining the final model.

The key performance metrics used to evaluate the model were AUC (Area Under the Curve), Kappa, accuracy, precision, recall, and confusion matrix. 

Our model has demonstrated a level of accuracy that will effectively predict the potential success of games before production. The best outcome for our model is to provide actionable insights that guide game developers, publishers, and investors in making informed decisions about resource allocation, marketing strategies, and game development directions.

## Data Collection

In this section, we delve into the methodology behind the acquisition of our dataset, which forms the foundation of our analysis. Our aim was to gather comprehensive and meaningful information about AAA game titles to facilitate a thorough exploration of their characteristics and trends.

## Game Data Structure Scraper

This script is designed to fetch the overall structure of game data from the [RAWG Video Games Database API](https://rawg.io/apidocs). It focuses on genres like Action, Adventure, RPG, Strategy, Shooter, and Simulation to retrieve essential information such as game IDs, names, platforms, genres, and more. The gathered data forms the foundation for further analysis and insights in the gaming industry.

### Prerequisites

Before running the script, ensure that you have the necessary libraries and an API key from the RAWG API. The script uses libraries such as `requests`, `os`, `dotenv`, `csv`, `BeautifulSoup`, and `time`.

### How It Works

1. The script loads environment variables from a `.env` file and fetches the API key.
2. It defines parameters like the number of pages, page size, CSV file paths, field names, and genres to scrape.
3. The script fetches game data for each genre and page, storing relevant information in CSV files.
4. It extracts information like game names, descriptions, Metacritic scores, ratings, and more.
5. The data gathered by this scraper forms the basis for more detailed data extraction using subsequent scripts.

### Usage

1. Make sure to set up your environment variables in a `.env` file.
2. Install the required libraries using `pip install -r requirements.txt`.
3. Run the script and monitor the console for progress updates.

**Note:** The script follows API usage guidelines and includes time delays to avoid exceeding request limits.


```{python}
#| eval: false

import json
import pandas as pd
import requests
import os
from dotenv import load_dotenv
import csv
from bs4 import BeautifulSoup
import time

# Load the environment variables from .env file
load_dotenv()

# Get the API key from the environment variable
api_key = os.getenv("API_KEY")

# Specify the number of pages and page size
total_pages = 50
page_size = 40

# Define the CSV file paths
full_csv_file = "game_data_full.csv"
summary_csv_file = "game_data_summary.csv"
combined_csv_file = "combined_data.csv"

# Define the field names for the CSV files
full_fieldnames = [
    "id",
    "name",
    "released",
    "background_image",
    "metacritic",
    "playtime",
    "esrb_rating_name",
    "platform_name",
    "genre"
]

summary_fieldnames = [
    "id",
    "name"
]

combined_fieldnames = [
    "id",
    "name",
    "description"
]

# Define the genres to scrape
genres = [
    {"name": "Action", "slug": "action"},
    {"name": "Adventure", "slug": "adventure"},
    {"name": "RPG", "slug": "role-playing-games-rpg"},
    {"name": "Strategy", "slug": "strategy"},
    {"name": "Shooter", "slug": "shooter"},
    {"name": "Simulation", "slug": "simulation"}
]

# Open the full CSV file in write mode and write the header row
with open(full_csv_file, mode="w", newline="", encoding="utf-8") as full_file:
    full_writer = csv.DictWriter(full_file, fieldnames=full_fieldnames)
    full_writer.writeheader()

    # Loop over the desired genres
    for genre in genres:
        genre_name = genre["name"]
        genre_slug = genre["slug"]

        game_count = 0

        # Loop over the desired number of pages
        for page in range(1, total_pages + 1):
            # Construct the URL with the appropriate page number, genre, and other parameters
            url = f"https://api.rawg.io/api/games?key={api_key}&page={page}&page_size={page_size}&genres={genre_slug}"

            # Send a GET request to the URL and retrieve the JSON data
            response = requests.get(url)
            status_code = response.status_code
            data = response.json()

            # Check if the response was successful
            if status_code == 200:
                results = data["results"]
                game_count += len(results)
                print(f"The request was successful, Main JSON Structure: {genre_name}, [{game_count}]")
                # Extract the relevant information from the JSON structure
                results = data["results"]

                # Iterate over the results and write each row to the full CSV file
                for result in results:
                    platforms = result.get("platforms")
                    if platforms is not None:  # Check if platforms is not None
                        for platform_data in platforms:
                            platform = platform_data.get("platform", {})
                            requirements = platform_data.get("requirements", {})
                            esrb_rating = result.get("esrb_rating")
                            esrb_rating_name = esrb_rating.get("name") if esrb_rating is not None else ""
                            row = {
                                "id": result["id"],
                                "name": result["name"],
                                "released": result["released"],
                                "background_image": result["background_image"],
                                "metacritic": result.get("metacritic", 0),
                                "playtime": result.get("playtime", 0),
                                "esrb_rating_name": esrb_rating_name,
                                "platform_name": platform.get("name", ""),
                                "genre": genre_name
                            }
                            full_writer.writerow(row)
            else:
                print(f"Failed to retrieve data for genre: {genre_name}")

        # Sleep for 1 minute after processing each genre
        print("Wait for 60 seconds...")
        time.sleep(60)
        print("GO!")

# Create a set to store unique IDs
unique_ids = set()

# Open the summary CSV file in write mode and write the header row
with open(summary_csv_file, mode="w", newline="", encoding="utf-8") as summary_file:
    summary_writer = csv.DictWriter(summary_file, fieldnames=summary_fieldnames)
    summary_writer.writeheader()

    # Open the full CSV file in read mode
    with open(full_csv_file, mode="r", encoding="utf-8") as full_file:
        full_reader = csv.DictReader(full_file)

        # Iterate over the rows in the full CSV file
        for row in full_reader:
            game_id = row["id"]

            # Check if the ID is already in the set of unique IDs
            if game_id not in unique_ids:
                # Add the ID to the set of unique IDs
                unique_ids.add(game_id)

                # Write the 'id' and 'name' columns to the summary CSV file
                summary_row = {
                    "id": game_id,
                    "name": row["name"]
                }
                summary_writer.writerow(summary_row)


# Counter for keeping track of requests
request_counter = 0

# Open the combined CSV file in write mode and write the header row
with open(combined_csv_file, mode="w", newline="", encoding="utf-8") as combined_file:
    combined_writer = csv.DictWriter(combined_file, fieldnames=combined_fieldnames)
    combined_writer.writeheader()

    # Open the summary CSV file in read mode
    with open(summary_csv_file, mode="r", encoding="utf-8") as summary_file:
        summary_reader = csv.DictReader(summary_file)

        # Iterate over the rows in the summary CSV file
        for row in summary_reader:
            game_id = row["id"]
            game_name = row["name"]

            # Construct the URL for the game details using the game ID
            game_details_url = f"https://api.rawg.io/api/games/{game_id}?key={api_key}"

            # Send a GET request to the game details URL and retrieve the JSON data
            game_details_response = requests.get(game_details_url)
            status_code = game_details_response.status_code
            
            try:
                game_details_data = game_details_response.json()
            except json.decoder.JSONDecodeError:
                print(f"Failed to parse JSON for game: {game_name}")
                continue
            # Check if the response was successful
            if status_code == 200:
                print(f"Request was successful, Second JSON Structure: {game_name}")
                # Extract the 'description' from the JSON structure
                game_description_html = game_details_data["description"]

                # Remove HTML tags from the description
                soup = BeautifulSoup(game_description_html, "html.parser")
                game_description = soup.get_text()

                # Write the 'id', 'name', and 'description' columns to the combined CSV file
                combined_row = {
                    "id": game_id,
                    "name": game_name,
                    "description": game_description
                }
                combined_writer.writerow(combined_row)
            else:
                print(f"Failed to retrieve description for game: {game_name}")
            # Increment the request counter
            request_counter += 1

            # Check if 100 requests have been made
            if request_counter % 100 == 0:
                # Wait for 30 seconds
                print("Wait for 30 seconds...")
                time.sleep(30)
                print("GO!")

print(f"Data has been scraped and saved to {full_csv_file}, {summary_csv_file}, and {combined_csv_file}.")


# Read the combined CSV file into a pandas DataFrame
combined_df = pd.read_csv(combined_csv_file)

# Read the full CSV file into a pandas DataFrame
full_df = pd.read_csv(full_csv_file)

# Merge the DataFrames based on the 'id' column
merged_df = full_df.merge(combined_df[['id', 'description']], on='id', how='left')

# Save the merged DataFrame to a new CSV file
merged_df.to_csv("gamesMetacritic.csv", index=False)

print("The final merged CSV file 'gamesMetacritic.csv' has been created.")
```

## Game Data Details Scraper

This script serves to gather specific details for each game identified using their unique IDs, obtained from the initial data structure scraping. It interacts with the [RAWG Video Games Database API](https://rawg.io/apidocs) to fetch in-depth information such as game descriptions, Metacritic scores, ratings, playtime, platform availability, and more. The collected data enriches the overall dataset, providing comprehensive insights into individual games.

### Prerequisites

Before running the script, make sure you have the required libraries (`requests`, `os`, `dotenv`, `csv`, `BeautifulSoup`) installed. Additionally, set up your environment variables in a `.env` file with your RAWG API key.

### How It Works

1. The script loads environment variables from a `.env` file and fetches the API key.
2. It defines functions to unnest platform data and scrape specific game data using API calls.
3. The script reads a list of unique game IDs from a CSV file ("metacriticML.csv").
4. It interacts with the API to fetch detailed information for each game ID, including descriptions, ratings, and more.
5. The extracted data is cleaned, processed, and saved into a CSV file ("game_data.csv") for further analysis.

### Usage

1. Set up your environment variables in a `.env` file.
2. Install the required libraries using `pip install -r requirements.txt`.
3. Prepare a CSV file ("metacriticML.csv") containing a column of unique game IDs.
4. Run the script and monitor the console for progress updates.

**Note:** This script follows API usage guidelines and includes error handling and data cleaning for robust scraping.

```{python}
#| eval: false

import requests
import os
from dotenv import load_dotenv
import csv
from bs4 import BeautifulSoup

# Load the environment variables from .env file
load_dotenv()

# Get the API key from the environment variable
api_key = os.getenv("API_KEY")

def unnest_platforms(platforms):
    platform_names = []
    for platform in platforms:
        platform_name = platform["platform"]["name"]
        platform_names.append(platform_name)
    return platform_names

def scrape_api_data(game_id):
    url = f"https://api.rawg.io/api/games/{game_id}?key={api_key}"

    try:
        response = requests.get(url)
        if response.status_code == 200:
            json_data = response.json()

            # Extracting specific fields from JSON
            name = json_data["name"]
            description = json_data["description"]
            metacritic = json_data["metacritic"]
            rating = json_data["rating"]
            rating_top = json_data["rating_top"]
            playtime = json_data["playtime"]
            screenshots_count = json_data["screenshots_count"]
            movies_count = json_data["movies_count"]
            creators_count = json_data["creators_count"]
            twitch_count = json_data["twitch_count"]
            reviews_text_count = json_data["reviews_text_count"]
            ratings_count = json_data["ratings_count"]
            game_series_count = json_data["game_series_count"]
            esrb_rating = json_data["esrb_rating"]["name"] if json_data.get("esrb_rating") else "Not Rated"
            platforms = json_data.get("platforms", [])  # Unnested platforms

            # Remove HTML tags from the description
            soup = BeautifulSoup(description, "html.parser")
            description_cleaned = soup.get_text()

            # Unnest platforms and extract platform names
            platform_names = unnest_platforms(platforms)

            # Create a list of the extracted data
            data = [name, description_cleaned, metacritic, rating, rating_top, playtime,
                    screenshots_count, movies_count, creators_count, twitch_count,
                    reviews_text_count, ratings_count, game_series_count, esrb_rating]

            # Create separate rows for each platform
            rows = []
            for platform_name in platform_names:
                row = data.copy()
                row.append(platform_name)
                rows.append(row)

            return rows

        else:
            print(f"Error: API request failed with status code {response.status_code}")
            return None

    except requests.exceptions.RequestException as e:
        print("Error: Failed to connect to the API:", str(e))
        return None


# Read the game IDs from the "metacriticML.csv" file
csv_file = "metacriticML.csv"
game_ids = set()

with open(csv_file, "r") as file:
    reader = csv.reader(file)
    next(reader)  # Skip the header row
    for row in reader:
        game_id = row[0]
        game_ids.add(game_id)

# Define the CSV file path and filename to store the scraped data
output_csv_file = "game_data.csv"

# Scrape data for each unique game ID and write it to the output CSV file
with open(output_csv_file, "w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(['Name', 'Description', 'Metacritic', 'Rating', 'Top Rating',
                     'Playtime', 'Screenshots Count', 'Movies Count', 'Creators Count',
                     'Twitch Count', 'Reviews Text Count', 'Ratings Count',
                     'Game Series Count', 'ESRB Rating', 'Platforms'])

    for game_id in game_ids:
        data = scrape_api_data(game_id)
        if data:
            for row in data:
                writer.writerow(row)

print("Data scraping completed and saved to game_data.csv")
```

## Game Details Scraper from Wikipedia

This script focuses on extracting specific game details such as developers, publishers, game modes, and genres from Wikipedia pages. It utilizes a list of unique game names obtained from previous data scraping steps, aiming to enrich the dataset with comprehensive information. The scraped data is then saved into a CSV file for further analysis.

### Prerequisites

Before running the script, ensure that you have the required libraries (`csv`, `time`, `requests`, `BeautifulSoup`) installed.

### How It Works

1. The script defines a function `scrape_wikipedia_page(game_name)` to fetch details from a Wikipedia page related to a specific game name.
2. It constructs the URL for the Wikipedia page and sends a GET request to retrieve the HTML content.
3. The script uses BeautifulSoup to parse the HTML content and locate the infobox table containing relevant information.
4. Developers, publishers, game modes, and genres are extracted from the infobox table based on specific labels.
5. The script also includes a function `capitalize_special_cases(word)` to handle special cases in word capitalization.
6. It reads unique game names from a CSV file ("gamesMetacritic.csv") and processes them for Wikipedia page access.
7. The extracted data is written to a new CSV file ("game_info.csv") with columns for game names, developers, publishers, game modes, and genres.

### Usage

1. Install the required libraries using `pip install -r requirements.txt`.
2. Prepare a CSV file ("gamesMetacritic.csv") containing unique game names.
3. Run the script and monitor the console for progress updates.

**Note:** The script follows API usage guidelines, includes error handling, and manages request delays to ensure robust scraping.

```{r}
#| eval: false

import csv
import time
import requests
from bs4 import BeautifulSoup

def scrape_wikipedia_page(game_name):
    # Construct the URL for the Wikipedia page
    url = f"https://en.wikipedia.org/wiki/{game_name}"

    # Send a GET request to retrieve the HTML content
    response = requests.get(url)

    if response.status_code == 200:
        # Parse the HTML content using BeautifulSoup
        soup = BeautifulSoup(response.content, 'html.parser')

        # Find the developer, publisher, game mode, and genre information in the infobox table
        infobox_table = soup.find('table', {'class': 'infobox'})
        if infobox_table:
            rows = infobox_table.find_all('tr')
            developers = None
            publishers = None
            game_modes = None
            genres = None
            for row in rows:
                label = row.find('th', {'scope': 'row', 'class': 'infobox-label'})
                if label:
                    label_text = label.text.strip()
                    if label_text == 'Developer(s)':
                        data = row.find('td', {'class': 'infobox-data'})
                        if data:
                            developers = data.text.strip()
                    elif label_text == 'Publisher(s)':
                        data = row.find('td', {'class': 'infobox-data'})
                        if data:
                            publishers = data.text.strip()
                    elif label_text == 'Mode(s)':
                        data = row.find('td', {'class': 'infobox-data'})
                        if data:
                            game_modes = data.text.strip()
                    elif label_text == 'Genre(s)':
                        data = row.find('td', {'class': 'infobox-data'})
                        if data:
                            genres = data.text.strip()
                if developers is not None and publishers is not None and game_modes is not None and genres is not None:
                    break

            if developers is not None and publishers is not None and game_modes is not None and genres is not None:
                return developers, publishers, game_modes, genres

        print(f"Failed to find complete developer, publisher, game mode, and genre information for '{game_name}'.")
    else:
        print(f"Request for '{game_name}' failed with status code {response.status_code}.")

    return None


def capitalize_special_cases(word):
    # Special cases: Roman numerals and other specific patterns
    special_cases = {
        "ii": "II",
        "iii": "III",
        "iv": "IV",
        "v": "V",
        "vi": "VI",
        "vii": "VII",
        "viii": "VIII",
        "ix": "IX"
    }
    if word.lower() in special_cases:
        return special_cases[word.lower()]
    if ":" in word:
        parts = word.split(":")
        return ":".join(capitalize_special_cases(part) for part in parts)
    if word.lower() in ["of", "the", "in"]:
        return word.lower()
    return word.capitalize()

# Read the unique game names from the "name" column of "gameMetacritic.csv"
game_names = set()
with open("gamesMetacritic.csv", "r") as file:
    reader = csv.DictReader(file)
    for row in reader:
        game_name = row["name"].replace("_", " ")
        # Remove the year from the game name
        game_name = game_name.split("(")[0].strip()
        # Remove trailing underscore
        game_name = game_name.rstrip("_")
        # Capitalize each word including special cases
        game_name = " ".join(capitalize_special_cases(word) for word in game_name.split())
        # Remove spaces and replace with underscores
        game_name = game_name.replace(" ", "_")
        game_names.add(game_name)

# Create a CSV file
with open("game_info.csv", "w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Game Name", "Developers", "Publishers", "Game Modes", "Genres"])

    count = 0
    for game_name in game_names:
        count += 1

        result = scrape_wikipedia_page(game_name)
        print(result)
        if result is not None:
            developers, publishers, game_modes, genres = result
            writer.writerow([game_name, developers, publishers, game_modes, genres])
        else:
            continue

        # Print progress message after every 100 requests
        if count % 100 == 0:
            print(f"Processed {count} requests.")

        # Add a sleep of 30 seconds after every 1000 requests
        if count % 1000 == 0:
            print("Sleeping for 30 seconds...")
            time.sleep(30)

print("Data saved to game_info.csv.")
```

## Data Wrangling

In this section, we embark on the critical journey of data wrangling, where we transform raw and unstructured gaming data into a refined and organized format that serves as the foundation for our analyses. Our focus here is on the meticulous processes of data collection, cleaning, and preparation that ensure the integrity and usability of our dataset

## Game Data Preprocessor

This script preprocesses game data from a CSV file named 'gamesMetacritic.csv' to enhance the consistency and formatting of the game names. It capitalizes special cases, removes years from game names, replaces spaces with underscores, and updates the dataset with the processed game names.

### How It Works

1. The script defines a function `capitalize_special_cases` to handle capitalization rules for special cases, such as Roman numerals and specific patterns.
2. It reads the original game data from 'gamesMetacritic.csv' using the `csv.DictReader` class.
3. The fieldnames (column names) are retrieved from the original file for later use.
4. For each row in the dataset, the script processes the game name:
   - Removes underscores and replaces them with spaces.
   - Removes the year from the game name by splitting at "(" and stripping whitespace.
   - Capitalizes each word using the `capitalize_special_cases` function and joins them with underscores.
5. The "Name" column in each row is updated with the processed game name, and the updated rows are stored in a list.
6. The script creates a new CSV file named 'gamesMetacriticUpdated.csv' and writes the updated data to it using the `csv.DictWriter` class. The header is written first using `writer.writeheader()`, followed by the updated rows using `writer.writerows(updated_rows)`.

### Usage

1. Ensure you have the 'gamesMetacritic.csv' file containing the game data with the "name" column.
2. Run the script to preprocess the game data.
3. After execution, the script generates a new CSV file named 'gamesMetacriticUpdated.csv' with the updated and preprocessed game data.

**Note:** This script is designed to improve the formatting and consistency of game names in the dataset, making it easier to work with and analyze the data.

```{python}
#| eval: false

import csv

def capitalize_special_cases(word):
    # Special cases: Roman numerals and other specific patterns
    special_cases = {
        "ii": "II",
        "iii": "III",
        "iv": "IV",
        "v": "V",
        "vi": "VI",
        "vii": "VII",
        "viii": "VIII",
        "ix": "IX"
    }
    if word.lower() in special_cases:
        return special_cases[word.lower()]
    if ":" in word:
        parts = word.split(":")
        return ":".join(capitalize_special_cases(part) for part in parts)
    if word.lower() in ["of", "the", "in"]:
        return word.lower()
    return word.capitalize()

# Read the game data from "gamesMetacritic.csv" and update the "Name" column
updated_rows = []
with open("gamesMetacritic.csv", "r") as file:
    reader = csv.DictReader(file)
    fieldnames = reader.fieldnames  # Retrieve the fieldnames from the original file
    for row in reader:
        game_name = row["name"].replace("_", " ")
        # Remove the year from the game name
        game_name = game_name.split("(")[0].strip()
        # Remove trailing underscore
        game_name = game_name.rstrip("_")
        # Capitalize each word including special cases
        game_name = " ".join(capitalize_special_cases(word) for word in game_name.split())
        # Remove spaces and replace with underscores
        game_name = game_name.replace(" ", "_")

        # Update the "Name" column in the row
        row["name"] = game_name

        # Append the updated row to the list
        updated_rows.append(row)

# Write the updated data to a new CSV file
with open("gamesMetacriticUpdated.csv", "w", newline="") as file:
    writer = csv.DictWriter(file, fieldnames=fieldnames)
    writer.writeheader()  # Write the header
    writer.writerows(updated_rows)  # Write the updated rows

```

## Game Information Merger

This script aims to merge two CSV files containing game information based on shared columns. The primary objective is to combine details from both datasets into a single comprehensive dataset for analysis and visualization.

### Prerequisites

Ensure you have the `pandas` library installed by using the command `pip install pandas`.

### How It Works

1. The script begins by reading two CSV files: 'game_info.csv' and 'gamesMetacriticUpdated.csv'.
2. Using the `pandas` library, it loads the contents of both CSV files into separate dataframes: `game_info` and `games_metacritic`.
3. The script proceeds to merge these two dataframes using the 'Game Name' column from the `game_info` dataframe and the 'name' column from the `games_metacritic` dataframe.
4. The resulting merged dataframe, named `merged_df`, contains combined information from both input dataframes.
5. To refine the dataset, the script drops the 'Game Name' column, as it is no longer needed.
6. Finally, the updated `merged_df` is saved to a new CSV file named 'merged_games.csv'.

### Usage

1. Ensure you have the CSV files 'game_info.csv' and 'gamesMetacriticUpdated.csv' with the game information you want to merge.
2. Run the script and monitor the console for progress updates.
3. Upon completion, you'll find the merged and refined dataset in the 'merged_games.csv' file.

**Note:** The script enables the consolidation of game information from two separate datasets, producing a unified dataset that incorporates details from both input files.

```{python}
#| eval: false

import pandas as pd

# Read the CSV files
game_info = pd.read_csv('game_info.csv')
games_metacritic = pd.read_csv('gamesMetacriticUpdated.csv')

# Merge the two dataframes based on the 'Game Name' and 'name' columns
merged_df = pd.merge(game_info, games_metacritic, left_on='Game Name', right_on='name')

# Drop the 'Game Name' column from the merged DataFrame
merged_df.drop('Game Name', axis=1, inplace=True)

# Write the merged DataFrame to a new CSV file
merged_df.to_csv('merged_games.csv', index=False)

```

## Game Data Refiner

This script is designed to refine and enhance a merged game dataset by reordering columns, renaming columns, and cleaning up data. It aims to improve data consistency and readability for analysis and further processing.

### Prerequisites

Ensure you have the `pandas` library installed by using the command `pip install pandas`.

### How It Works

1. The script starts by reading a CSV file named 'merged_games.csv' into a dataframe named `df`.
2. Column names are updated by converting them to lowercase and removing spaces to ensure uniformity and compatibility.
3. The script defines a desired column order using the `desired_order` list, which arranges columns in a logical and meaningful sequence.
4. Columns in the dataframe are reordered based on the defined order, while any remaining columns are appended at the end to maintain completeness.
5. The 'name' column is refined by replacing underscores with spaces and applying title case capitalization.
6. The updated dataframe, now with improved column names, order, and refined data, is saved to a new CSV file named 'updated_merged_games.csv'.

### Usage

1. Make sure you have the 'merged_games.csv' file containing the merged game dataset.
2. Run the script and monitor the console for progress updates.
3. Upon completion, the script generates an enhanced and refined dataset in the 'updated_merged_games.csv' file.

**Note:** This script offers a process to standardize column names, reorganize column order, and clean up data in preparation for analysis, ensuring a more organized and readable dataset.

```{python}
#| eval: false

import pandas as pd

# Read the CSV file
df = pd.read_csv('merged_games.csv')

# Update column names
df.columns = df.columns.str.lower().str.replace(' ', '')

# Define the desired column order
desired_order = ['id', 'name', 'released', 'metacritic', 'playtime', 'platform_name', 'developers', 'publishers', 'esrb_rating_name',  'gamemodes', 'genres', 'genre', 'description', 'background_image']

# Reorder the columns
df = df[desired_order + [col for col in df.columns if col not in desired_order]]

# Get the remaining columns
remaining_columns = [col for col in df.columns if col not in desired_order]

# Append the remaining columns to the end
df = df[desired_order + remaining_columns]

# Fix the 'name' column
df['name'] = df['name'].str.replace('_', ' ').str.title()

# Save the updated DataFrame to a new CSV file
df.to_csv('updated_merged_games.csv', index=False)

```

## Game Category Refiner

This script refines and simplifies the game categories listed in a dataset. It replaces complex and varied category descriptions with standardized and simplified categories, making it easier to analyze and categorize games consistently.

### Prerequisites

Ensure you have the `pandas` library installed by using the command `pip install pandas`.

### How It Works

1. The script begins by reading a CSV file named 'updated_merged_games.csv' into a dataframe named `df`.
2. A `category_mapping` dictionary is defined to map the current categories to their simplified counterparts.
3. A function `create_rows` is defined to split each row's 'gamemodes' value into a list of categories. It then creates new rows for each simplified category.
4. The script iterates through each row in the dataset and uses the `create_rows` function to generate new rows with simplified categories.
5. A new dataframe named `new_df` is created from the generated new rows.
6. The updated dataframe with simplified categories is saved to a new CSV file named 'simplified_games.csv'.

### Usage

1. Make sure you have the 'updated_merged_games.csv' file containing the merged game dataset.
2. Run the script and monitor the console for progress updates.
3. After completion, the script generates a refined dataset with simplified game categories in the 'simplified_games.csv' file.

**Note:** This script is designed to enhance the usability and consistency of game category information, ensuring that all games share standardized categories for more effective analysis.

```{python}
#| eval: false

import pandas as pd

# Read the dataset
df = pd.read_csv('updated_merged_games.csv')

# Map the current categories to the simplified categories
category_mapping = {
    'Single-player': 'Single-player',
    'Single-player, multiplayer': 'Multiplayer',
    'Multiplayer': 'Multiplayer',
    'Single-player, multiplayer (Steam and Nintendo Switch only)': 'Multiplayer',
    'Single-player, Multiplayer': 'Multiplayer',
    'Single-playerMultiplayer': 'Multiplayer',
    'Single player': 'Single-player',
    'Single-player, online multiplayer': 'Multiplayer',
    'Single player, multiplayer': 'Multiplayer',
    'Online multiplayer': 'Multiplayer',
    'Single player, Multiplayer': 'Multiplayer',
    'Single-player[3]': 'Single-player',
    'Single playerMultiplayer': 'Multiplayer',
    'Single-player, multiplayer[7]': 'Multiplayer',
    'Single-player\nCo-op': '2-player co-op',
    'Single-player, multiplayer[2]': 'Multiplayer',
    'Single-player. multiplayer': 'Multiplayer',
    'Multiplayer, single-player': 'Multiplayer',
    'PvP, PvE': 'Multiplayer',
    'Single-playerMultiplayer[b]': 'Multiplayer',
    'Multiplayer, Singleplayer (Only with CD)': 'Multiplayer',
    'Single-player, online multiplayer[2]': 'Multiplayer',
    'Single-player, multiplayer (Switch only)': 'Multiplayer',
    'Single-player, multiplayer[a]': 'Multiplayer',
    'Online multiplayer, single player, cooperative gameplay': 'Multiplayer',
    'Single-player, competitive multiplayer': 'Multiplayer',
    'Single-player2 player Co-op': '2-player co-op',
    'Multiplayersingle-player': 'Multiplayer',
    'Single-player, multiplayer (DS)': 'Multiplayer',
    'single-player, Multiplayer': 'Multiplayer',
    'multiplayer': 'Multiplayer',
    'Single-player, multiplayer (remake only)': 'Multiplayer',
    'Two Player': 'Multiplayer',
    'Single-player\nMultiplayer': 'Multiplayer',
    'Single-Player': 'Single-player',
    'Single player, co-op multiplayer': 'Multiplayer',
    'Single-player, local co-op': '2-player co-op',
    'Single player, multiplayer (online)': 'Multiplayer',
    'Single player and multiplayer': 'Multiplayer',
    'Single-player, multiplayer[d]': 'Multiplayer',
    'Multiplayer online': 'Multiplayer',
    '1-2 players alternating turns': 'Multiplayer',
    'Single-player, co-op, multiplayer': 'Multiplayer',
    'Multiplayer,[1] Co-op': 'Multiplayer',
    'Single-player, Co-op': '2-player co-op',
    'Single-player, multiplayer, online': 'Multiplayer',
    'Single-player, two player cooperative': '2-player co-op',
    'Multiplayer, Open World': 'Multiplayer',
    'Single-player (Xbox One, Xbox 360, Windows), multiplayer (Xbox One,[1] Windows)': 'Multiplayer',
    'Single-player, multi-player': 'Multiplayer',
    'single-player': 'Single-player',
    'Single player, cooperative': 'Multiplayer',
    'Singleplayer and Multiplayer': 'Multiplayer',
    'Single-player, Local Co-Op': '2-player co-op',
    'Single-player, multiplayer (PC)': 'Multiplayer',
    'Single-player, multiplayer (2017 version only)': 'Multiplayer',
    'Single-player, Offline Co-Op (up to 2 players)': '2-player co-op',
    'Single-player, Cooperative multiplayer': 'Multiplayer',
    'Multiplayer, Player versus Environment (AI)': 'Multiplayer',
    'Single-player, multiplayer (PSP)': 'Multiplayer',
    'Single-player  2 player cooperative': '2-player co-op',
    'Single-playerco-op': 'Multiplayer',
    'Single player, multiplayer (IPX, TCP/IP or Modem)': 'Multiplayer',
    'Single Player': 'Single-player',
    'Single-player[1]': 'Single-player',
    'Single-player, Multi-player': 'Multiplayer',
    'Single-player, co-op': '2-player co-op',
    'Single-player video game': 'Single-player',
    'Single-player video game, multiplayer video game': 'Multiplayer',
    'Single-player, multiplayer, co-op': 'Multiplayer',
    'SingleplayerMultiplayer': 'Multiplayer',
    'Single-player, Cooperative': 'Multiplayer',
    'Single-player multiplayer': 'Multiplayer',
    'Single-playerMultiplayer (Vita only)': 'Multiplayer',
    'Two-player': 'Multiplayer',
    'Single-player, co-op multiplayer': 'Multiplayer',
    'Multiplayer[1][2]': 'Multiplayer',
    'Single-player, online co-op': 'Multiplayer',
    'MMO': 'Multiplayer',
    'Single-player, 2-player cooperative': '2-player co-op',
    'Single-player, multiplayer (Windows and Mac OS X only)': 'Multiplayer',
    'Single-player, Co-op, Multiplayer': 'Multiplayer',
    'Single-player, multiplayer[c]': 'Multiplayer',
    'Up to 2 players simultaneously': 'Multiplayer',
    'Up to 2 players, alternating turns': 'Multiplayer',
    '1-2 players alternating': 'Multiplayer',
    'Single-player, two player': '2-player co-op',
    'Single player\nMulti player': 'Multiplayer',
    'single-playermultiplayer (turn-based)': 'Multiplayer',
    'Single-player / Co-op / Multiplayer': 'Multiplayer',
    'online multiplayer': 'Multiplayer',
    'Single-player, multiplayer (Wii only)': 'Multiplayer',
    'Single-player, local cooperative': '2-player co-op',
    'Single-player, multiplayer[6]': 'Multiplayer',
    'Multiplayer, co-op': 'Multiplayer',
    'Single-player, two-player co-op': '2-player co-op',
    'single-player, multiplayer': 'Multiplayer',
    'Single-player,  Multiplayer': 'Multiplayer',
    '1 or 2 player co-operative': '2-player co-op',
    'Single-player, Multiplayer, Multiplayer co-op': 'Multiplayer',
    'Single-player, multiplayer (PlayStation only)': 'Multiplayer',
    'Single-player, multiplayer[1]': 'Multiplayer',
    '1 Player': 'Single-player',
    'Singleplayer, Multiplayer': 'Multiplayer',
    'Single-playerMultiplayer (original release only)[4]': 'Multiplayer',
    'Single-player, 2 player co-op': '2-player co-op',
    'Single player, 2 player co-op': '2-player co-op',
    'Singleplayer,  multiplayer': 'Multiplayer',
    'Single-player, cooperative multiplayer': 'Multiplayer',
    'Cooperative video gamemultiplayersingle-player': 'Multiplayer',
    'Single-player  Multiplayer (2-3 players)': 'Multiplayer',
    'Single-player  multiplayer': 'Multiplayer',
    'Single-player, local & online multiplayer': 'Multiplayer',
    'Single-playing': 'Single-player',
    'Single-player, multiplayer[b]': 'Multiplayer',
    'Single-player, multiplayer (alternating)': 'Multiplayer',
    'Single-player, multiplayer (Windows, Mac)': 'Multiplayer',
    'Single-player, multiplayer[4]': 'Multiplayer',
    'ArcadeSingle-player, 2–4 player (co-op)Mega Drive/Genesis1–2 player (co-op, versus mode)SNES1–2 player (co-op)PlayStation 4, Switch1-4 player': 'Multiplayer',
    'Single-player, cooperative': 'Multiplayer',
    'Single-playermultiplayer': 'Multiplayer',
    'Single-player, 2 players alternating': '2-player co-op',
    'Single-player, multiplayer (Switch)': 'Multiplayer',
    'Single-player, multiplayer (GameCube only)': 'Multiplayer',
    'Wii:Single-playerMultiplayer': 'Multiplayer',
    'Single-player, co-op Multiplayer': 'Multiplayer',
    'Single-player, multiplayer[3]': 'Multiplayer',
    'Up to 2 players, alternating': 'Multiplayer',
    'Single player, netplay': 'Multiplayer',
    'Single and multiplayer': 'Multiplayer',
    '3rd-person perspective, top-down': 'Multiplayer',
    'Single-player, two-player': 'Multiplayer'
}

# Function to create rows for each category in a game
def create_rows(row):
    gamemodes = row['gamemodes'].split(',')  # Split the gamemodes into a list
    new_rows = []
    for gamemode in gamemodes:
        gamemode = gamemode.strip()  # Remove leading/trailing whitespaces
        simplified_gamemode = category_mapping.get(gamemode)
        if simplified_gamemode:
            new_row = row.copy()  # Create a copy of the current row
            new_row['gamemodes'] = simplified_gamemode  # Update the gamemodes column
            new_rows.append(new_row)  # Add the new row to the list
    return new_rows

# Create a list to store the new rows
new_rows = []

# Iterate over each row in the dataset
for _, row in df.iterrows():
    new_rows.extend(create_rows(row))

# Create a new dataframe from the new rows
new_df = pd.DataFrame(new_rows)

# Save the updated dataframe to a new CSV file
new_df.to_csv('simplified_games.csv', index=False)

```

## Dataset Publisher and Developer Cleaner

This script cleans and processes the publisher and developer information in a dataset stored in the 'simplified_games.csv' file. It removes unwanted words, years, and extraneous whitespace from the 'publishers' and 'developers' columns and saves the cleaned dataset to a new CSV file named 'cleanPubDev.csv'.

### How It Works

1. The script uses the `pandas` library to load the dataset from the 'simplified_games.csv' file.
2. It defines a function `remove_unwanted_words` to clean text by:
   - Removing text within parentheses using regular expressions.
   - Removing text within square brackets using regular expressions.
   - Removing standalone years (4 digits) using regular expressions.
   - Removing extra whitespace and then stripping leading and trailing whitespace.
3. The script applies the `remove_unwanted_words` function to the 'publishers' and 'developers' columns of the dataset using the `.apply()` method. This step effectively cleans the publisher and developer names.
4. The cleaned dataset is saved to a new CSV file named 'cleanPubDev.csv' using the `.to_csv()` method with the parameter `index=False`.

### Usage

1. Make sure you have the 'simplified_games.csv' file containing the dataset with 'publishers' and 'developers' columns.
2. Execute the script to clean the publisher and developer information.
3. After execution, the script generates a new CSV file named 'cleanPubDev.csv' containing the cleaned dataset with improved publisher and developer information.

**Note:** This script enhances the quality of the publisher and developer information in the dataset by removing unnecessary text, years, and whitespace, making it more suitable for analysis and visualization.

```{python}
#| eval: false

import pandas as pd
import re

# Load the dataset
ds = pd.read_csv("simplified_games.csv")

# Function to remove unwanted words and publishers/developers containing them
def remove_unwanted_words(text):
    cleaned_text = re.sub(r'\([^()]*\)', '', text)  # Remove text within parentheses
    cleaned_text = re.sub(r'\[[^\[\]]*\]', '', cleaned_text)  # Remove text within square brackets
    cleaned_text = re.sub(r'\b\d{4}\b', '', cleaned_text)  # Remove standalone years (4 digits)
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text).strip()  # Remove extra whitespace
    return cleaned_text

# Apply the remove_unwanted_words function to 'publishers' and 'developers' columns
ds['publishers'] = ds['publishers'].apply(remove_unwanted_words)
ds['developers'] = ds['developers'].apply(remove_unwanted_words)

# Write the updated dataset to a new CSV file
ds.to_csv('cleanPubDev.csv', index=False)

```

## Developer and Publisher Analysis and Enrichment

This R script focuses on analyzing developer and publisher information from the cleaned dataset 'cleanPubDev.csv' and enriches the data by identifying specific developers and publishers using string detection techniques. The enhanced dataset is then saved as 'Final_dev_pub.csv'.

### Required Libraries

The script makes use of the following libraries:
- `tidyverse` for data manipulation and visualization
- `rio` for importing and exporting data
- `fastDummies` for creating dummy variables

### Importing and Displaying Data

The script starts by importing the cleaned dataset 'cleanPubDev.csv' using the `rio` library's `import()` function. The imported dataset is displayed to observe its contents.

### Identifying Distinct Game Information

The script extracts distinct combinations of game names, developers, and publishers from the dataset to create a new dataframe named 'distinct_games'.

### Analyzing Developers

The script groups and summarizes the developer information from 'distinct_games'. It then identifies specific developers using string detection techniques. Developers with very few games are flagged as "other" developers and removed from the original count column.

### Analyzing Publishers

Similar to the developer analysis, the script groups and summarizes the publisher information from 'distinct_games'. It identifies specific publishers using string detection techniques. Publishers with very few games are flagged as "other" publishers, and special cases are handled. The original count column is then removed.

### Joining and Exporting Enriched Data

The script joins the cleaned developer and publisher information with the original dataset based on 'developers' and 'publishers'. The enriched dataset is saved as 'Final_dev_pub.csv' using the `rio` library's `export()` function.

### Usage

1. Ensure you have the 'cleanPubDev.csv' file containing cleaned developer and publisher information.
2. Execute the script to perform developer and publisher analysis and enrichment.
3. After execution, the script generates the 'Final_dev_pub.csv' file, which contains the enriched dataset with identified developers and publishers.

This script provides valuable insights into the developer and publisher landscape of the games dataset and creates an enriched dataset for further analysis and visualization.

```{r}
#| eval: false
#| echo: true

# Load required libraries
library(tidyverse)  # For data manipulation and visualization
library(rio)        # For importing and exporting data
library(fastDummies)  # For creating dummy variables

# Import the dataset
pub_dev <- import("../cleanPubDev.csv")

# Display the imported dataset
pub_dev

# Extract distinct combinations of game name, developers, and publishers
distinct_games <- pub_dev %>% select(name, developers, publishers) %>% distinct()

# Group and summarize developer information
developers <- distinct_games %>% group_by(developers) %>% summarize(n = n())

# Identify specific developers using string detection
cleaned_developers <- developers %>%
  mutate(
    # Commented out: dev_other = ifelse(n < 10, TRUE, FALSE),
    dev_Atlus = str_detect(developers, "Atlus"),
    dev_BioWare = str_detect(developers, "BioWare"),
    dev_Blizzard = str_detect(developers, "Blizzard"),
    dev_Activision = str_detect(developers, "Activision"),
    dev_Ubisoft = str_detect(developers, "Ubisoft"),
    dev_Rockstar = str_detect(developers, "Rockstar"),
    dev_1C = str_detect(developers, "1C"),
    dev_DICE = str_detect(developers, "DICE"),
    dev_Capcom = str_detect(developers, "Capcom"),
    dev_2K = str_detect(developers, "2K"),
    dev_343Industries = str_detect(developers, "343 Industries"),
    dev_CreativeAssembly = str_detect(developers, "Creative Assembly"),
    dev_FromSoftware = str_detect(developers, "FromSoftware"),
    dev_Vanguard = str_detect(developers, "Vanguard Games"),
    dev_Arkane = str_detect(developers, "Arkane"),
    dev_BandaiNamco = str_detect(developers, "Bandai Namco"),
    dev_Bethesda = str_detect(developers, "Bethesda"),
    dev_Bungie = str_detect(developers, "Bungie"),
    dev_Crytek = str_detect(developers, "Crytek"),
    dev_EA = str_detect(developers, "EA "),
    dev_Nintendo = str_detect(developers, "Nintendo"),
    dev_Ensemble = str_detect(developers, "Ensemble Studios"),
    dev_EpicGames = str_detect(developers, "Epic Games"),
    dev_Frontier = str_detect(developers, "Frontier Developments"),
    dev_Feral = str_detect(developers, "Feral Interactive"),
    dev_InfinityWard = str_detect(developers, "Infinity Ward"),
    dev_Insomniac = str_detect(developers, "Insomniac Games"),
    dev_JapanStudios = str_detect(developers, "Japan Studio"),
    dev_Klei = str_detect(developers, "Klei Entertainment"),
    dev_Konami = str_detect(developers, "Konami"),
    dev_LucasArts = str_detect(developers, "LucasArts"),
    dev_NaughtyDog = str_detect(developers, "Naughty Dog"),
    dev_Namco = str_detect(developers, "Namco"),
    dev_TellTale = str_detect(developers, "Telltale Games")) 
  )

# Identify developers with very few games
other_dev = cleaned_developers[rowSums(cleaned_developers[3:36]) == 0,]

# Flag "other" developers and remove the original count column
cleaned_developers <- cleaned_developers %>%
  mutate(dev_other = ifelse(developers %in% other_dev$developers, TRUE, FALSE)) %>%
  select(-n)

# Group and summarize publisher information
publishers <- distinct_games %>% group_by(publishers) %>% summarize(n = n())

# Identify specific publishers using string detection
clean_pubs <- publishers %>%
  mutate(
    # Commented out: pub_other = ifelse(n < 10, TRUE, FALSE),
    pub_Eidos = str_detect(publishers, "Eidos Interactive"),
    pub_EA = str_detect(publishers, "EA Games"),
    pub_DeepSilver = str_detect(publishers, "Deep Silver"),
    # ... (other publisher detection lines) ...
    dev_tinyBuild = str_detect(publishers, "tinyBuild")
  )

# Identify publishers with very few games
other_pubs <- clean_pubs[rowSums(clean_pubs[3:47]) == 0,]

# Flag "other" publishers and handle special cases, then remove the original count column
clean_pubs <- clean_pubs %>% 
  mutate(
     pub_Eidos = str_detect(publishers, "Eidos Interactive"),
     pub_EA = str_detect(publishers, "EA Games"),
     pub_DeepSilver = str_detect(publishers, "Deep Silver"),
     pub_ElectronicArts = str_detect(publishers, "Electronic Arts"),
     pub_Ubisoft = str_detect(publishers, "Ubisoft"),
     pub_Sega = str_detect(publishers, "Sega"),
     pub_Activision = str_detect(publishers, "Activision"),
     pub_SquareEnix = str_detect(publishers, "Square Enix"),
     pub_Devolver = str_detect(publishers, "Devolver Digital"),
     pub_Capcom = str_detect(publishers, "Capcom"),
     pub_Konami = str_detect(publishers, "Konami"),
     pub_BandaiNamco = str_detect(publishers, "Bandai Namco"),
     pub_Paradox = str_detect(publishers, "Paradox Interactive"),
     pub_Nintendo = str_detect(publishers, "Nintendo"),
     pub_Sony = str_detect(publishers, "Sony"),
     pub_koei = str_detect(publishers, "Koei"),
     pub_rockstar = str_detect(publishers, "Rockstar"),
     pub_THQ = str_detect(publishers, "THQ"),
     pub_2K = str_detect(publishers, "2K"),
     pub_D3 = str_detect(publishers, "D3"),
     pub_vivendi = str_detect(publishers, "Vivendi"),
     pub_majesco = str_detect(publishers, "Majesco"),
     pub_microsoft = str_detect(publishers, "Microsoft"),
     pub_505 = str_detect(publishers, "505 Games"),
     pub_Atari = str_detect(publishers, "Atari"),
     pub_Spike = str_detect(publishers, "Spike"),
     pub_RisingStar = str_detect(publishers, "Rising Star"),
     pub_Midway = str_detect(publishers, "Midway"),
     pub_Spike = str_detect(publishers, "LucasArts"),
     pub_WarnerBros = str_detect(publishers, "Warner Bros"),
     pub_Atlus = str_detect(publishers, "Atlus"),
     pub_Codemasters = str_detect(publishers, "Codemasters"),
     pub_Disney = str_detect(publishers, "Disney"),
     pub_Blizzard = str_detect(publishers, "Blizzard"),
     pub_Bethesda = str_detect(publishers, "Bethesda"),
     pub_Curve = str_detect(publishers, "Curve Digital"),
     pub_1C = str_detect(publishers, "1C"),
     pub_daedalic = str_detect(publishers, "Daedalic Entertainment"),
     pub_FocusHome = str_detect(publishers, "Focus Home Interactive"),
     dev_HumbleBumble = str_detect(publishers, "Humble Bumble"),
     dev_Kalypso = str_detect(publishers, "Kalypso Media"),
     pub_TellTale = str_detect(publishers, "Telltale Games"),
     dev_Team17 = str_detect(publishers, "Team17"),
     dev_Valve = str_detect(publishers, "Valve"),
     dev_Xbox = str_detect(publishers, "Xbox Game Studios"),
     dev_tinyBuild = str_detect(publishers, "tinyBuild"))
  ) %>%
  select(-n)

# Join the cleaned developer and publisher information with the original dataset
pub_dev1 <- pub_dev %>%
  left_join(cleaned_developers, by = "developers")

cleaned_pub_dev <- pub_dev1 %>%
  left_join(clean_pubs, by = "publishers")

# Export the cleaned and enriched dataset
export(cleaned_pub_dev, "~/Final_dev_pub.csv")

```

## Machine Learning 

In this section, we delve into the intricacies of our machine learning approach and the techniques we employed to build a predictive model that uncovers valuable insights within the realm of gaming. Leveraging advanced methodologies and tools, we aimed to unearth patterns, trends, and predictive power within our dataset.

## Importing Scikit-Learn Libraries

This contains import statements for various machine learning models along with other necessary libraries. These models include Support Vector Classifier (SVC), Random Forest Classifier, Gradient Boosting Classifier, and Logistic Regression, which are commonly used for classification tasks. Additionally, the code imports evaluation metrics and data preprocessing tools to facilitate model evaluation and feature scaling.

```{python}
# Importing the pandas library for data manipulation and analysis
import pandas as pd
# Pandas is a powerful library for data manipulation and analysis, providing data structures and functions.

# Importing the NumPy library for numerical operations
import numpy as np
# NumPy is used for numerical computations, providing support for arrays and mathematical functions.      

# Importing the matplotlib library for creating plots and charts
import matplotlib.pyplot as plt
# Matplotlib is a comprehensive library for creating various types of plots and charts.

# Importing machine learning models and utilities from the sklearn module
from sklearn.svm import SVC
# SVC is a popular classification algorithm for Support Vector Machines.
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
# Ensemble learning methods based on decision trees, commonly used for classification tasks.
from sklearn.linear_model import LogisticRegression
# LogisticRegression is a popular algorithm for binary and multiclass classification problems.

# Importing utility functions for data splitting and model evaluation
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
# train_test_split is used for splitting the data into training and testing sets.
# cross_val_score is used for cross-validation during model evaluation.
# GridSearchCV is used for hyperparameter tuning to find the best model configuration.

 # Library for decision tree models
from sklearn import tree     

# Library for label encoding
from sklearn.preprocessing import LabelEncoder      

# Importing evaluation metrics from the sklearn.metrics module
from sklearn.metrics import (
    cohen_kappa_score,
    roc_auc_score,
    accuracy_score,
    precision_score,
    recall_score,
    confusion_matrix,
)
# These metrics are used to evaluate the performance of classification models.

# Importing feature selection and preprocessing tools from sklearn
from sklearn.feature_selection import SelectKBest, chi2, SelectFromModel
# SelectKBest and chi2 are used for feature selection based on statistical tests.
# SelectFromModel is used for feature selection based on the importance from a supervised model.

from sklearn.decomposition import PCA
# PCA (Principal Component Analysis) is used for dimensionality reduction.

from sklearn.preprocessing import StandardScaler, LabelEncoder
# StandardScaler is used for scaling numerical features to have a mean of 0 and standard deviation of 1.
# LabelEncoder is used for converting categorical labels into numerical values.

import xgboost as xgb
# XGBoost is a popular gradient boosting library used for classification and regression tasks.
```

## Data Preprocessing and Analysis

This processes data from a CSV file containing information about video games from RAWG's API. It categorizes the games based on their ratings into "Poor," "Mixed," "Good," "Great," "Excellent," or "Masterpiece." Additionally, it adds a "season" column to indicate the season when each game was released and a "playtime_category" column to group the games based on their playtime, such as "Novice," "Casual," "Experienced," or "Veteran." The code ensures missing values are removed to prepare the data for analysis.

```{python}
# Read the CSV file into a DataFrame
games = pd.read_csv("Final_dev_pub.csv")
games.dropna(inplace=True)
print(games.shape)


# Define rating ranges and corresponding labels
rating_ranges = [(0, 67, "Poor"),
                 (68, 72, "Mixed"),
                 (73, 76, "Good"),
                 (77, 80, "Great"),
                 (81, 84, "Excellent"),
                 (85, 100, "Masterpiece")]

# Create a new column for the categorical labels
games["metacritic_category"] = pd.cut(
    games["metacritic"],
    bins=[r[0] for r in rating_ranges] + [101],
    labels=[r[2] for r in rating_ranges],
    right=False
)

# Convert "released" column to datetime type
games["released"] = pd.to_datetime(games["released"])

def get_season(date):
    if date.month in (3, 4, 5):
        return "Spring"
    elif date.month in (6, 7, 8):
        return "Summer"
    elif date.month in (9, 10, 11):
        return "Fall"
    elif date.month in (12, 1, 2):
        return "Winter"
    else:
        return "Invalid date"

# Apply the get_season function to the "released" column and create the "season" column
games["season"] = games["released"].apply(get_season)

# Print the first 5 rows with the new "season" column
print(games.head(5))
print("Shape:", games.shape)

# Define the playtime ranges and corresponding categories
playtime_ranges = [(0, 10), (11, 50), (51, 100), (101, float('inf'))]
playtime_categories = ['Novice', 'Casual', 'Experienced', 'Veteran']

# Create a new column with categorical values based on playtime
games['playtime_category'] = pd.cut(
    games['playtime'],
    bins=[range[0] - 1 for range in playtime_ranges] + [playtime_ranges[-1][1]],
    labels=playtime_categories
)

# Drop the missing values
games.dropna(inplace=True)
```

This refines and organizes the "genres" column in a dataset containing information about video games. It splits the genres into subgenres, capitalizes them, and creates new rows for each subgenre. The code then updates the DataFrame to include the subgenres' information, and it lists all the columns in the final dataset. This process helps in better categorizing and understanding the various subgenres of video games present in the dataset.

```{python}
# Clean up the genres column
games['genres'] = games['genres'].str.replace('\[.*?\]', '')  # Remove anything within square brackets [...]
games['genres'] = games['genres'].str.replace('\(.*?\)', '')  # Remove anything within parentheses (...)
games['genres'] = games['genres'].str.strip()  # Remove leading/trailing whitespace

# Split the genres and create new rows
new_rows = []
for index, row in games.iterrows():
    genres = row["genres"].split(",")
    for genre in genres:
        genre = genre.strip()
        if "-" in genre:
            genre_parts = genre.split("-")
            genre_parts = [part.capitalize() for part in genre_parts]
            genre = "-".join(genre_parts)
        elif "\n" in genre:
            genre_parts = genre.split("\n")
            genre_parts = [part.capitalize() for part in genre_parts]
            genre = " ".join(genre_parts)
        else:
            genre = genre.capitalize()

        # Create a dictionary to store the information for each subgenre row
        new_row = {"subgenres": genre}

        # Copy the relevant information from the other columns of the original DataFrame
        for col in games.columns:
            if col != "genres" and col != "subgenres":
                new_row[col] = row[col]

        new_rows.append(new_row)

# Update the DataFrame from the new rows
games = pd.DataFrame(new_rows)

# Capitalize the "subgenres" column
games['subgenres'] = games['subgenres'].str.title()

# Display the updated dataset with subgenres information
print(games)

# List all the columns in the DataFrame 'games'
print(list(games.columns))
```

## Feature Engineering

This enhances the video game dataset with several new features. It adds a "Multiplatform" column to identify games available on multiple platforms, a "year" column to show the release year of each game, a "metacritic trend line" column to indicate the score trend over the years, a "playtime trend line" column to represent the playtime trend over the years, "playtime quartiles" to categorize games based on their playtime distribution, and "playtime ratios" to calculate the playtime of each game as a ratio of the maximum playtime in the dataset. The code also filters the dataset to include games released in 2013 or later. These new features provide valuable insights into the video game data and can assist in further analysis and decision-making.
```{python}
# ADD FEATURE: Multi-Platform, etc.

# List of platform columns to check for multiple true values
platform_columns = ["PC", "macOS", "Linux", "Xbox One", "PlayStation 4", "Nintendo Switch",
                    "Wii U", "Xbox 360", "PlayStation 3", "Xbox", "PlayStation 2",
                    "Xbox Series S/X", "Nintendo 3DS", "PlayStation 5", "GameCube"]

# Create a new column "Multiplatform" where the value is 1 if there are more than one true values in the platform columns
games["Multiplatform"] = games[platform_columns].apply(lambda row: sum(row), axis=1).apply(lambda x: 1 if x > 1 else 0)

# Print the updated 'games' to see the new "Multiplatform" column
print(games)


# ADD FEATURE: year

# Step 1: Convert the 'released' column to datetime type
games['released'] = pd.to_datetime(games['released'])

# Step 2: Extract the year and create a new column 'year'
games['year'] = games['released'].dt.year

# ADD FEATURE: metacritic trend line

# Step 1: Group the data by year and category, calculate the average score
grouped = games.groupby(['year', 'metacritic_category']).agg(avg_score=('metacritic', 'mean')).reset_index()

# Step 2: Calculate the year-over-year difference in scores
grouped['yoy_diff'] = grouped.groupby('metacritic_category')['avg_score'].diff()

# Step 3: Create the trend line column
grouped['trend_line_metacritic_yoy'] = ''

# Step 4: Assign the trend line values based on the year-over-year difference
grouped.loc[grouped['yoy_diff'] > 0, 'trend_line_metacritic_yoy'] = 'Positive'
grouped.loc[grouped['yoy_diff'] < 0, 'trend_line_metacritic_yoy'] = 'Negative'
grouped.loc[grouped['yoy_diff'] == 0, 'trend_line_metacritic_yoy'] = 'Stable'

# Merge the trend line column back
games = pd.merge(games, grouped[['year', 'metacritic_category', 'trend_line_metacritic_yoy']], on=['year', 'metacritic_category'], how='left')

# ADD FEATURE: playtime trend line

# Step 1: Group the data by year and calculate the average playtime
grouped = games.groupby('year')['playtime'].mean().reset_index()

# Step 2: Calculate the year-over-year difference in playtime
grouped['yoy_diff'] = grouped['playtime'].diff()

# Step 3: Create the trend line column
grouped['trend_line_playtime_yoy'] = ''

# Step 4: Assign the trend line values based on the year-over-year difference
grouped.loc[grouped['yoy_diff'] > 0, 'trend_line_playtime_yoy'] = 'Increasing'
grouped.loc[grouped['yoy_diff'] < 0, 'trend_line_playtime_yoy'] = 'Decreasing'
grouped.loc[grouped['yoy_diff'] == 0, 'trend_line_playtime_yoy'] = 'Stable'

# Merge the trend line column
games = pd.merge(games, grouped[['year', 'trend_line_playtime_yoy']], on='year', how='left')

# ADD FEATURES: playtime quartiles

# Step 1: Calculate the quartiles for playtime
quartiles = np.linspace(0, 1, num=5)  # Split into quartiles (0%, 25%, 50%, 75%, 100%)

# Step 2: Create the playtime quartile labels
quartile_labels = ['Q1', 'Q2', 'Q3', 'Q4']

# Step 3: Assign quartile labels to playtime quartiles
games['playtime_quartile'] = pd.qcut(games['playtime'], quartiles, labels=quartile_labels, duplicates='drop')

# Fill missing values with a default label if any
games['playtime_quartile'] = games['playtime_quartile'].cat.add_categories('N/A').fillna('N/A')


# ADD FEATURES: playtime ratios

# Step 1: Calculate the maximum playtime in the dataset
max_playtime = games['playtime'].max()

# Step 2: Create the playtime ratio feature
games['playtime_ratio'] = games['playtime'] / max_playtime


# Filter video game year from 2013 forward
games = games[games['year'] >= 2013]
```

This removes specific columns from a dataset containing information about video games. The columns that are removed include 'id', 'background_image', 'metacritic', 'name', 'playtime', 'description', 'released', 'developers', 'publishers', and 'n'. After removing these columns, the code prints the new shape of the dataset and lists the remaining columns. This process helps to focus on the most relevant information and simplifies the dataset for further analysis or modeling.

```{python}
# For be citation 
citationDs = games[['id', 'name']].copy()

# Remove the specified columns
columns_to_remove = ['id', 'background_image', 'metacritic', 'name', 'playtime', 'description', 'released', 'developers', 'publishers','n']
games.drop(columns_to_remove, axis=1, inplace=True)

# Print the new shape of the DataFrame after removing columns
print("Shape of games DataFrame:", games.shape)

# Create a new DataFrame 'modelDs' to store the modified data
modelDs = games

# Print the list of columns
print("Columns in modelDs DataFrame:", list(modelDs.columns))

```

### Convert Categorical Columns to Dummy Variables

This converts categorical columns in the "modelDs" DataFrame into dummy variables to represent them as binary indicators. The categorical columns that are converted include 'esrb_rating_name', 'genre', 'season', 'subgenres', 'playtime_category', 'subgenres', 'year', 'trend_line_metacritic_yoy', 'trend_line_playtime_yoy', and 'playtime_quartile'. After creating the dummy variables, the original categorical columns are removed from the DataFrame to prepare the data for machine learning tasks, where numerical data is generally required. This process helps in encoding categorical information into a format that machine learning algorithms can work with.


```{python}
# List of categorical columns to convert to dummy variables
columns_to_dummy = ['esrb_rating_name', 'genre', 'season', 'subgenres', 'playtime_category', 'subgenres', 'year', 'trend_line_metacritic_yoy', 'trend_line_playtime_yoy', 'playtime_quartile']

# Display the current shape 
print("Shape of modelDs DataFrame:", modelDs.shape)

# Display the number of columns 
print("Number of columns in modelDs DataFrame:", modelDs.shape[1])

# Display the expected number of columns after converting categorical columns to dummy variables
print("Expected number of columns:", len(columns_to_dummy))

# Display the list of columns that will be converted to dummy variables
print("Columns to dummy:", columns_to_dummy)

# Remove the last element from the 'columns_to_dummy' list to create prefixes for dummy variable column names
prefix = columns_to_dummy[:-1]

# Convert categorical columns to dummy variables, adding prefixes to the column names
dummy_cols = pd.get_dummies(modelDs[columns_to_dummy], prefix=prefix, drop_first=True)

# Concatenate the dummy variable columns 
modelDs = pd.concat([modelDs, dummy_cols], axis=1)

# Drop the original categorical columns 
modelDs.drop(columns_to_dummy, axis=1, inplace=True)

# 'modelDs' DataFrame now contains the data with dummy variables instead of categorical columns
modelDs
```

### Calculate Relative Frequencies of Game Ratings

This calculates the relative frequencies (weights) for each category in the "metacritic_category" column of the video game dataset. These weights represent the proportion of games falling into each rating category (e.g., "Poor," "Good," "Excellent") relative to the total number of games in the dataset. Printing the weights allows for understanding the distribution of game ratings and their respective frequencies in the dataset.

```{python}
# Calculate the relative frequencies (weights) for each category
weights = games['metacritic_category'].value_counts(normalize=True)

# Print the weights
print(weights)
```

## Train Test Split

This prepares the data for machine learning by splitting it into features (X) and the target variable (y). The target variable represents game ratings (e.g., 'Masterpiece', 'Great', 'Good', 'Poor', 'Excellent', 'Mixed'), each with an associated weight. The data is further split into training and testing sets while ensuring the same distribution of game ratings in both sets using the 'stratify' parameter. The weights for each category are calculated and printed for the training and testing sets, facilitating the model's training with weighted samples and evaluation on a representative test set.

```{python}
# Split the data into features (X) and target (y)
X = modelDs.drop('metacritic_category', axis=1)  # Features (input variables)
y = modelDs['metacritic_category']  # Target variable

# Given weights
weights = {'Masterpiece': 0.183429, 'Great': 0.176133, 'Good': 0.169359, 'Poor': 0.167275, 'Excellent': 0.164148, 'Mixed': 0.139656}

# Use the 'stratify' parameter to preserve the target variable distribution in the train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=154, stratify=y)

# Now, you can access the weights for each category as follows:
# Note that `y_train` and `y_test` now have the same distribution of categories as `y`
y_train_weights = y_train.map(weights)
y_test_weights = y_test.map(weights)

# Print the weights for the first few rows in the training set
print("Training set weights:")
print(y_train_weights.head())

# Print the weights for the first few rows in the testing set
print("Testing set weights:")
print(y_test_weights.head())
```

## First Random Forest Model

### Random Forest Model With Hyperparameter Tuning + Metrics

This creates and trains a machine learning model called the RandomForestClassifier with optimized hyperparameters. The model is trained using the training data, and predictions are made on the test data to evaluate its performance. Metrics such as ROC AUC score, Kappa coefficient, accuracy, precision, recall, and confusion matrix are calculated to assess how well the model predicts the game ratings. These metrics provide insights into the model's overall performance and its ability to correctly classify games into different rating categories.


```{python}
# Create the RandomForestClassifier instance with the best hyperparameters
rf_classifier_best = RandomForestClassifier(
    n_estimators=200,
    max_depth=None,
    min_samples_split=2,
    min_samples_leaf=1,
    criterion='gini',
    min_impurity_decrease=0.0,
    random_state=65
)

# Fit the classifier to the training data with the given weights
rf_classifier_best.fit(X_train, y_train, sample_weight=y_train_weights)

# Use the trained classifier for predictions on test data
y_pred = rf_classifier_best.predict(X_test)
y_pred_prob = rf_classifier_best.predict_proba(X_test)

```

#### First Model Metrics

This evaluates the first machine learning model's performance, called the RandomForestClassifier, which was trained to predict game ratings using important features from the video game dataset. The model's performance is assessed using various evaluation metrics. The metrics include ROC AUC score, which measures the model's ability to distinguish between different game ratings, the Kappa coefficient, which indicates the model's agreement with the actual ratings, accuracy, which represents the overall correctness of predictions, precision, which shows the model's ability to predict each rating category accurately, and recall, which measures the model's ability to capture all instances of each rating category. Finally, the code prints the confusion matrix, a table that summarizes the model's predictions against the actual game ratings. These evaluations help understand how well the second model performs in predicting game ratings and provide valuable insights into its effectiveness in classifying games into their respective categories.

```{python}
# Calculate ROC AUC score for binary classification
roc_auc = roc_auc_score(y_test, y_pred_prob, multi_class='ovr')
print(f"ROC AUC: {roc_auc}")

# Calculate Kappa coefficient
kappa = cohen_kappa_score(y_test, y_pred)
print(f"Kappa: {kappa}")

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

# Calculate precision
precision = precision_score(y_test, y_pred, average='weighted')
print(f"Precision: {precision}")

# Calculate recall
recall = recall_score(y_test, y_pred, average='weighted')
print(f"Recall: {recall}")

# Calculate confusion matrix
confusion = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(confusion)

```

#### Feature Selection Methods

This demonstrates three different methods to select the most important features from the video game dataset for machine learning models. Method 1 uses the SelectKBest algorithm with chi-square to select the top 25 features. Method 2 uses the SelectFromModel algorithm with L1 regularization (Logistic Regression) to identify another set of top 25 features. Method 3 utilizes the Tree-based Feature Importance approach with Random Forest to determine the third set of top 25 features. The code prints these selected features for each method and then merges them to create a new dataset containing only the most relevant features for training the machine learning model. This feature selection process helps improve the model's performance and reduces computation time by focusing on the most informative features.

```{python}
# Limits the top number of features
num_features_to_select = 16

# Method 1: SelectKBest with chi-square
selector_chi2 = SelectKBest(score_func=chi2, k=num_features_to_select)
X_train_chi2_selected = selector_chi2.fit_transform(X_train, y_train)
selected_feature_indices_chi2 = selector_chi2.get_support(indices=True)
selected_features_chi2 = X_train.columns[selected_feature_indices_chi2].tolist()

plt.figure(figsize=(8, 4))
plt.barh(range(num_features_to_select), selector_chi2.scores_[selected_feature_indices_chi2][::-1], tick_label=selected_features_chi2[::-1])
plt.xlabel('Chi-square Score')
plt.ylabel('Features')
plt.title('Top Features using SelectKBest with chi-square')
plt.show()

# Method 2: SelectFromModel with L1 regularization (Logistic Regression)
logistic_regression = LogisticRegression(penalty='l1', solver='liblinear', random_state=65)
selector_l1 = SelectFromModel(logistic_regression, max_features=num_features_to_select)
X_train_l1_selected = selector_l1.fit_transform(X_train, y_train)
selected_feature_indices_l1 = selector_l1.get_support(indices=True)
selected_features_l1 = X_train.columns[selected_feature_indices_l1].tolist()

# Get coefficients from the best estimator with L1 regularization
coefficients = abs(selector_l1.estimator_.coef_[0])

plt.figure(figsize=(8, 4))
plt.barh(range(num_features_to_select), coefficients[selected_feature_indices_l1][::-1], tick_label=selected_features_l1[::-1])
plt.xlabel('Coefficient Magnitude')
plt.ylabel('Features')
plt.title('Top Features using SelectFromModel with L1 regularization (Logistic Regression)')
plt.show()

# Method 3: Tree-based Feature Importance (Random Forest)
rf_classifier = RandomForestClassifier(random_state=65)
rf_classifier.fit(X_train, y_train)
feature_importances = rf_classifier.feature_importances_
top_features_indices_rf = feature_importances.argsort()[-num_features_to_select:][::-1]
top_features_rf = X_train.columns[top_features_indices_rf].tolist()

plt.figure(figsize=(8, 4))
plt.barh(range(num_features_to_select), feature_importances[top_features_indices_rf][::-1], tick_label=top_features_rf[::-1])
plt.xlabel('Feature Importance')
plt.ylabel('Features')
plt.title('Top Features using Tree-based Feature Importance (Random Forest)')
plt.show()

# Print the top 25 features for each method
print("Top 25 Features using SelectKBest with chi-square:")
print(selected_features_chi2)

print("\nTop 25 Features using SelectFromModel with L1 regularization (Logistic Regression):")
print(selected_features_l1)

print("\nTop 25 Features using Tree-based Feature Importance (Random Forest):")
print(top_features_rf)

# Combine selected features from all three methods without duplicates
all_selected_features = list(set(selected_features_chi2 + selected_features_l1 + top_features_rf))

# Create a new dataset with the selected features
X_train_selected = X_train[all_selected_features]
X_test_selected = X_test[all_selected_features]


print(len(X_train_selected.columns))  # Merged features, it should be 40 columns
print(len(X_test_selected.columns))   # Merged features, it should be 40 columns
```

## Second Random Forest Model 

### Random Forest Model With Feature Selection + Hyperparameter Tuning

This trains the second machine learning model, called the RandomForestClassifier, using the selected important features from the video game dataset. The model is constructed with 200 decision trees and optimized hyperparameters. It is then trained on the training dataset, considering the weights associated with each game rating category. After training, the model is used to make predictions on the test dataset. Additionally, the code computes the probabilities of the predicted game ratings using the final model. This process allows the model to predict game ratings based on the most relevant features identified during the feature selection step, resulting in a more accurate and efficient predictive model.

```{python}
# Train the second classifier with the selected features
second_rf_classifier = RandomForestClassifier(
    n_estimators=200,
    max_depth=None,
    min_samples_split=2,
    min_samples_leaf=1,
    criterion='gini',
    min_impurity_decrease=0.0,
    random_state = 23
)
second_rf_classifier.fit(X_train_selected, y_train, sample_weight = y_train_weights)

# Use the second model for predictions
y_pred_second = second_rf_classifier.predict(X_test_selected)

# Make predictions with class probabilities using the second model
y_pred_prob_second = second_rf_classifier.predict_proba(X_test_selected)

```

#### Second Model Metrics

This evaluates the second machine learning model's performance, called the RandomForestClassifier, which was trained to predict game ratings using important features from the video game dataset. The model's performance is assessed using various evaluation metrics. The metrics include ROC AUC score, which measures the model's ability to distinguish between different game ratings, the Kappa coefficient, which indicates the model's agreement with the actual ratings, accuracy, which represents the overall correctness of predictions, precision, which shows the model's ability to predict each rating category accurately, and recall, which measures the model's ability to capture all instances of each rating category. Finally, the code prints the confusion matrix, a table that summarizes the model's predictions against the actual game ratings. These evaluations help understand how well the second model performs in predicting game ratings and provide valuable insights into its effectiveness in classifying games into their respective categories.

```{python}
# Evaluate the second model
# Calculate ROC AUC score for the final model
roc_auc_second = roc_auc_score(y_test, y_pred_prob_second, multi_class='ovr')
print(f"ROC AUC (Second Model): {roc_auc_second}")

# Calculate Kappa coefficient for the second model
kappa_second = cohen_kappa_score(y_test, y_pred_second)
print(f"Kappa (Second Model): {kappa_second}")

# Calculate accuracy for the second model
accuracy_second = accuracy_score(y_test, y_pred_second)
print(f"Accuracy (Second Model): {accuracy_second}")

# Calculate precision for the second model
precision_second = precision_score(y_test, y_pred_second, average='weighted', zero_division='warn')
print(f"Precision (Second Model): {precision_second}")

# Calculate recall for the second model
recall_second = recall_score(y_test, y_pred_second, average='weighted', zero_division='warn')
print(f"Recall (Second Model): {recall_second}")

# Calculate confusion matrix for the second model
confusion_second = confusion_matrix(y_test, y_pred_second)
print("Confusion Matrix (Second Model):")
print(confusion_second)

# TOP 40 FEATURES
print(X_train_selected.columns)

```

## Principal Component Analysis (PCA) for Dimensionality Reduction and Feature Importance

This performs Principal Component Analysis (PCA) on a given dataset to reduce the dimensionality of the features and identify the most important features contributing to each principal component. PCA is a common technique used for feature extraction and visualization in machine learning and data analysis.

Here's a step-by-step explanation of the code:

A list named PCA_features is defined, which contains the names of the features that will be used for PCA. These features will be extracted from the original dataset.

A DataFrame named PCA_columns is created by selecting the columns corresponding to the features specified in PCA_features from a DataFrame called modelDs. This PCA_columns DataFrame is used as the input data for the PCA process.

The perform_pca function is then defined to carry out the PCA process:

The function takes two arguments - data (the DataFrame containing the features) and target_variable (the column name of the target variable).

The function first separates the target variable from the features and performs standardization on the feature data using StandardScaler. Standardization ensures that all features have a mean of 0 and a standard deviation of 1.

PCA is then applied to the standardized feature data using the PCA class from scikit-learn. The function computes the principal components and extracts information such as explained variance ratio and cumulative explained variance.

The cumulative explained variance is plotted against the number of principal components to visualize how much variance is explained by adding additional components.
The feature importance within each principal component is computed, and only the features with an absolute importance greater than 0.25 are printed for the top 25 principal components. This allows us to understand which original features contribute the most to each principal component.

The transformed data, target variable, and PCA results are returned from the function as separate DataFrames (transformed_data, target_variable, and pca_results, respectively).


```{python}
# PCA_features and PCA_columns are already defined here

PCA_features = ['playtime_ratio', 'Xbox 360', 'trend_line_playtime_yoy_Q2', 'year_Positive', 'pub_2K', 'pub_SquareEnix', 'pub_Curve', 'dev_FromSoftware', 'Web', 'dev_other', 'Nintendo Switch', 'season_Spring', 'Multiplayer', 'pub_Team17', 'esrb_rating_name_Teen', 'pub_Nintendo', 'playtime_category_Novice', 'dev_Crytek', 'trend_line_metacritic_yoy_Increasing', 'pub_Blizzard', 'season_Summer', 'PlayStation 4', 'iOS', 'esrb_rating_name_Mature', 'pub_Paradox', 'pub_Kalypso', 'macOS', 'pub_Sony', 'Linux', 'season_Winter', 'pub_Xbox', 'trend_line_playtime_yoy_Q4', 'dev_BioWare', 'pub_majesco', 'Xbox One', 'subgenres_Space Flight Simulator', 'Wii U', 'Xbox Series S/X', 'PlayStation 5', 'metacritic_category']
PCA_columns = modelDs[PCA_features]


def perform_pca(data, target_variable):
    # Separate the target variable from the features
    X = data.drop(target_variable, axis=1)
    y = data[target_variable]
    
    # Standardize the features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Perform PCA
    pca = PCA()
    principal_components = pca.fit_transform(X_scaled)
    
    # Explained variance ratio
    explained_variance_ratio = pca.explained_variance_ratio_
    
    # Cumulative explained variance
    cum_explained_variance = np.cumsum(explained_variance_ratio)
    
    # Feature importance within each component
    feature_importance = pca.components_
    
    # Create a DataFrame to store the results
    pca_results = pd.DataFrame({
        'Principal Component': range(1, len(explained_variance_ratio) + 1),
        'Explained Variance Ratio': explained_variance_ratio,
        'Cumulative Explained Variance': cum_explained_variance
    })
    
    # Plot cumulative explained variance
    plt.plot(range(1, len(explained_variance_ratio) + 1), cum_explained_variance, marker='o')
    plt.xlabel('Principal Component')
    plt.ylabel('Cumulative Explained Variance')
    plt.title('Cumulative Explained Variance by Principal Component')
    plt.grid(True)
    plt.show()
    
    # Print feature importance within each component for the top 25 components and importance > 0.25
    num_components = min(25, len(feature_importance))
    importance_threshold = 0.25
    for i in range(num_components):
        component_importance = feature_importance[i]
        relevant_features = [feat for j, feat in enumerate(X.columns) if abs(component_importance[j]) > importance_threshold]
        if len(relevant_features) > 0:
            print(f"\nPrincipal Component {i+1} - Feature Importance:")
            for feat in relevant_features:
                print(f"{feat}: {component_importance[X.columns.get_loc(feat)]}")
    
    # Rejoin the first num_components of PCA transformed data with the target variable
    modelDs = pd.concat([pd.DataFrame(principal_components[:, :num_components]), y], axis=1)
    
    # Return the PCA results, transformed data, and the target variable
    return pca_results, pd.DataFrame(principal_components[:, :num_components], columns=[f'PC{i}' for i in range(1, num_components + 1)]), y

# Example usage
# data = pd.read_csv('your_dataset.csv')  # Replace with your dataset

# Call the PCA function
pca_results, transformed_data, target_variable = perform_pca(PCA_columns, 'metacritic_category')

# Print the PCA results
print("\nPCA Results:")
print(pca_results)

# Print the transformed data
print("\nTransformed Data:")
print(transformed_data)

# Print the target variable
print("\nTarget Variable:")
print(target_variable)

# Verify dimensions
if transformed_data.shape[0] == target_variable.shape[0]:
    # Reset the index of both DataFrames
    transformed_data.reset_index(drop=True, inplace=True)
    target_variable.reset_index(drop=True, inplace=True)

```

### PCA-Transformed Data with Renamed Columns

This code snippet renames the columns of the DataFrame to provide more meaningful and descriptive labels for each principal component. The renaming is done using a dictionary mapping the original column names ('PC1' to 'PC25') to more interpretable names that represent different aspects of the data.

Next, the code concatenates the PCA-transformed features DataFrame (transformed_data) with the target variable, presumably stored in a separate variable called target_variable. This step combines the PCA-transformed features with the target variable to create a single DataFrame containing both the features and the target variable.

```{python}
# Rename the columns of 'transformed_data' DataFrame using a dictionary to provide more descriptive labels for PCA components
transformed_data.rename(columns={
    'PC1': 'Mature Games',
    'PC2': 'New Console Platforms',
    'PC3': 'Space Flight',
    'PC4': 'Novice Games',
    'PC5': 'Teen Games',
    'PC6': 'Xbox',
    'PC7': 'Nintendo',
    'PC8': 'Multiplayer Winter Release',
    'PC9': 'Xbox & SquareEnix',
    'PC10': 'Blizzard MMO',
    'PC11': 'Multiplayer Games',
    'PC12': 'Positive Year Review Trend',
    'PC13': 'Xbox Exclusive',
    'PC14': 'Casual/Family Friendly',
    'PC15': 'Xbox & Bioware',
    'PC16': 'Online Platform Games',
    'PC17': 'Crysis 3',
    'PC18': 'Strategy Games',
    'PC19': 'Storytelling Games',
    'PC20': 'Crytek & Curve Developers',
    'PC21': 'Puzzle Platformer Games',
    'PC22': 'FromSoftware',
    'PC23': 'Long Playtime Games',
    'PC24': 'Strong Winter Lineup',
    'PC25': 'Old Console Platforms'
}, inplace=True)

# Concatenate the PCA-transformed features DataFrame with the target variable
data_with_target = pd.concat([transformed_data, target_variable], axis=1)

# Print the updated DataFrame
print(data_with_target)
```

## Final Random Forest Model

### Random Forest Classifier for Multi-class Classification

This code snippet demonstrates the process of training a Random Forest Classifier for a multi-class classification problem. The goal is to predict the target variable 'metacritic_category' based on the given features.

Here's a step-by-step explanation of the code:

1. The data is split into features (X) and the target variable (y) using the 'data_with_target' DataFrame.
   - `X` contains all the columns from 'data_with_target' except 'metacritic_category'.
   - `y` contains only the 'metacritic_category' column.

2. The data is further split into training and testing sets using the `train_test_split` function from scikit-learn. The training set will be used to train the model, while the testing set will be used to evaluate its performance.
   - `X_train`, `X_test`: The feature data for training and testing, respectively.
   - `y_train`, `y_test`: The target variable data for training and testing, respectively.
   - `test_size=0.2`: This indicates that 20% of the data will be used for testing, while 80% will be used for training.
   - `random_state=42`: This sets a random seed for reproducibility of the split.

3. A Random Forest Classifier model is created with `n_estimators=100` (number of trees in the forest) and `random_state=42` for reproducibility.

4. The Random Forest model is trained on the training data using the `fit` method, which learns patterns from the feature-target relationships.

5. The trained model is then used to make predictions on the test set (`X_test`) using the `predict` method, and the predicted target values are stored in `y_pred`.

6. Several evaluation metrics are computed to assess the performance of the final model on the test set:

   - **ROC AUC Score (Receiver Operating Characteristic - Area Under the Curve):** This metric is used for multi-class classification problems, and it measures the ability of the model to distinguish between different classes. The `'ovr'` (one-vs-rest) parameter indicates that a one-vs-rest strategy is used for multi-class evaluation.
   - **Kappa Score (Cohen's Kappa):** It measures the agreement between the actual and predicted classes, taking into account the possibility of agreement occurring by chance. Higher kappa values indicate better model performance.
   - **Accuracy:** The percentage of correctly predicted instances out of the total instances in the test set.
   - **Precision:** The ability of the model to correctly identify positive instances out of all instances predicted as positive. Weighted averaging is used for multi-class problems to handle class imbalance.
   - **Recall:** The ability of the model to correctly identify positive instances out of all actual positive instances. Weighted averaging is used for multi-class problems to handle class imbalance.

7. The confusion matrix is computed using the `confusion_matrix` function from scikit-learn. It shows the number of correct and incorrect predictions for each class in tabular form.

The printed evaluation metrics and the confusion matrix provide insights into the performance of the Random Forest Classifier on the test set. These metrics are crucial for determining how well the model generalizes to unseen data and whether it effectively discriminates among the different classes in the multi-class classification problem.

```{python}
# Split the data into features (X) and the target variable (y)
X = data_with_target.drop('metacritic_category', axis=1)
y = data_with_target['metacritic_category']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the Random Forest model
final_rf_model = RandomForestClassifier(
    n_estimators=100,
    max_depth=12,
    min_samples_split=2,
    min_samples_leaf=1,
    criterion='gini',
    random_state=23
)

# Train the model on the training data
final_rf_model.fit(X_train, y_train)

# Use the trained model to make predictions on the test set
y_pred_final = final_rf_model.predict(X_test)

# Make predictions with class probabilities using the final model
y_pred_prob_final = final_rf_model.predict_proba(X_test)

# Evaluate the final model
roc_auc_final = roc_auc_score(y_test, y_pred_prob_final, multi_class='ovr')
print(f"ROC AUC (Final Model): {roc_auc_final}")

kappa_final = cohen_kappa_score(y_test, y_pred_final)
print(f"Kappa (Final Model): {kappa_final}")

accuracy_final = accuracy_score(y_test, y_pred_final)
print(f"Accuracy (Final Model): {accuracy_final}")

precision_final = precision_score(y_test, y_pred_final, average='weighted', zero_division='warn')
print(f"Precision (Final Model): {precision_final}")

recall_final = recall_score(y_test, y_pred_final, average='weighted', zero_division='warn')
print(f"Recall (Final Model): {recall_final}")

confusion_final = confusion_matrix(y_test, y_pred_final)
print("Confusion Matrix (Final Model):")
print(confusion_final)
```

#### Feature Importance Analysis with Random Forest Classifier

This code snippet demonstrates how to analyze the feature importances of a Random Forest Classifier model. Feature importance analysis helps identify which features have the most significant impact on the model's predictions and can be crucial for understanding the factors driving the classification outcomes.

The printed output displays the features in descending order of importance, providing insights into which features have the most significant influence on the Random Forest Classifier's predictions. Features with higher importances are more influential in making accurate predictions, while features with lower importances have less impact on the model's decision-making process.

This analysis can be used to gain a better understanding of the dataset and the factors contributing to the classification outcomes. It also helps in feature selection, as features with low importance may be candidates for removal to simplify the model without sacrificing predictive performance. Additionally, feature importance analysis can guide further investigations into the relationships between features and the target variable in the context of the classification problem at hand.

```{python}
# Get the feature importances from the model
feature_importances = final_rf_model.feature_importances_

# Create a DataFrame to store feature names and their importances
feature_importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importances
})

# Sort the DataFrame by importance in descending order
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Print the features from greatest importance to least
print("Features ranked by importance (from greatest to least):")
print(feature_importance_df)

```

#### Random Forest Classifier Evaluation Results

After training the Random Forest Classifier on the provided dataset and making predictions on the test set, the model's performance was evaluated using various metrics. Here are the updated evaluation results:

- **ROC AUC (Final Model): 0.9749**
  The ROC AUC score measures the ability of the model to discriminate between different classes in a multi-class classification problem. The score ranges from 0 to 1, with 1 indicating a perfect classifier and 0.5 indicating a random classifier. With an improved ROC AUC score of 0.9749, the model's discriminatory power is significantly better than random guessing, suggesting that it performs very well in distinguishing between classes.

- **Kappa (Final Model): 0.8403**
  Cohen's Kappa measures the agreement between the model's predictions and the actual class labels, taking into account the possibility of agreement by chance. A kappa value of 1 indicates perfect agreement, while a value close to 0 suggests agreement by chance. The model achieves a Kappa score of approximately 0.8403, indicating strong agreement between predictions and true labels.

- **Accuracy (Final Model): 0.8672**
  Accuracy is the percentage of correctly predicted instances out of the total instances in the test set. In this case, the model achieves an accuracy of around 86.7%, indicating that it correctly predicts the class label for a substantial portion of the test instances.

- **Precision (Final Model): 0.8711**
  Precision measures the ability of the model to correctly identify positive instances out of all instances predicted as positive. Weighted averaging is used for multi-class problems to handle class imbalance. Here, the weighted precision is approximately 0.8711, indicating that the model performs well in correctly identifying positive instances across different classes.

- **Recall (Final Model): 0.8672**
  Recall, also known as sensitivity or true positive rate, measures the ability of the model to correctly identify positive instances out of all actual positive instances. Weighted averaging is used for multi-class problems to handle class imbalance. The weighted recall is approximately 0.8672, indicating that the model effectively captures a high proportion of positive instances for different classes.

- **Confusion Matrix (Final Model):**
  ```
  [[52  3  1  2  1  1]
   [ 0 56  2  1  1  1]
   [ 0  7 58  2  0  3]
   [ 2  3  3 59  2  0]
   [ 0  0  1  1 47  5]
   [ 0  2  5  1  1 61]]
  ```
  The confusion matrix provides a detailed breakdown of correct and incorrect predictions for each class. The matrix is displayed in tabular form, where rows represent the true classes, and columns represent the predicted classes. Each cell (i, j) in the matrix represents the number of instances of class i that were predicted as class j. The diagonal elements (from top-left to bottom-right) represent correct predictions, and off-diagonal elements represent misclassifications. The confusion matrix can help identify which classes are well-predicted and which may require further investigation or improvement.


  The random forest model achieved excellent performance, with an ROC AUC of 0.975, indicating strong discriminatory power. The Kappa score of 0.840 suggests substantial agreement beyond chance. The overall accuracy of the model is 86.7%, and it achieved a high precision of 87.1%. The recall is also 86.7%, indicating a good ability to identify true positives. The confusion matrix shows relatively low misclassifications across different classes, further confirming the model's effectiveness in making accurate predictions.

  #### Decision Tree Visualization
```{python}
from sklearn.tree import plot_tree

# Get the first decision tree from the Random Forest model
best_decision_tree = final_rf_model.estimators_[6]

# Get the feature names from the original data
feature_names = X.columns

plt.rcParams['font.family'] = 'SF Compact Rounded'

plt.figure(figsize=(20, 10))
plot_tree(best_decision_tree, feature_names=feature_names, class_names=final_rf_model.classes_,
          filled=True, rounded=True, fontsize=9, max_depth=3)  # Set max_depth=3 and font_name='Arial'
plt.title("Random Forest's First Decision Tree (First 3 Levels)", fontsize=16)  # Set fontname='Arial'

# Adjust layout to avoid overlapping
plt.tight_layout()

# Save the decision tree as an SVG file
plt.savefig("best_decision_tree_first_3_levels_custom_font.jpeg", format="jpeg")
plt.show()
```


## Other Successful Models

### Gradient Boosting Machine Model

This code snippet performs hyperparameter tuning for a Gradient Boosting classifier using GridSearchCV with 5-fold cross-validation. The goal is to find the best combination of hyperparameters that results in the highest accuracy on the validation data.

The hyperparameters considered for tuning are `n_estimators` (number of boosting stages), `learning_rate` (step size at each iteration), `max_depth` (maximum depth of trees), `min_samples_split` (minimum samples required to split an internal node), and `min_samples_leaf` (minimum samples required to be at a leaf node).

After fitting the GridSearchCV to the training data, the best hyperparameters (`best_params`) are obtained, and the best Gradient Boosting classifier (`best_gb_classifier`) is extracted. This process helps optimize the model's performance and improves its ability to make accurate predictions on unseen data.

```{python}
# Create the Gradient Boosting classifier
#gb_classifier = GradientBoostingClassifier()

# Define the hyperparameter grid to search over
#param_grid = {
#    'n_estimators': [50, 100, 200],          # Number of boosting stages to be run
#    'learning_rate': [0.01, 0.1, 0.2],       # Step size at each iteration
#    'max_depth': [3, 5, 7],                  # Maximum depth of the individual trees
#    'min_samples_split': [2, 5, 10],         # Minimum number of samples required to split an internal node
#   'min_samples_leaf': [1, 2, 4]            # Minimum number of samples required to be at a leaf node
#}

# Create the GridSearchCV object with 5-fold cross-validation
#grid_search = GridSearchCV(gb_classifier, param_grid, cv=5, scoring='accuracy')

# Fit the GridSearchCV to the training data
#grid_search.fit(X_train, y_train, sample_weight=y_train_weights)

# Get the best hyperparameters from the grid search
#best_params = grid_search.best_params_
#print("Best Hyperparameters:", best_params)

# Get the best Gradient Boosting classifier with the best hyperparameters
#best_gb_classifier = grid_search.best_estimator_


```

#### Gradient Boosting Classifier Evaluation

This code snippet evaluates the performance of a Gradient Boosting classifier with the best hyperparameters on a given dataset. The key steps are as follows:

1. **Creating the Classifier**: The Gradient Boosting classifier is initialized with optimized hyperparameters, including learning rate, max depth, minimum samples per leaf, minimum samples per split, and the number of estimators.

2. **Cross-Validation and Average Accuracy**: The classifier's performance is estimated through 5-fold cross-validation, and the average accuracy is computed.

3. **Fitting the Classifier**: The best classifier is trained on the training data, with optional sample weights.

4. **Making Predictions**: The trained classifier is used to predict class labels and class probabilities on the test data.

5. **Model Evaluation**: Various metrics are calculated to evaluate the classifier's performance, including ROC AUC score, Kappa coefficient, accuracy, precision, recall, and the confusion matrix.

Overall, this code demonstrates the process of training, evaluating, and analyzing the effectiveness of the Gradient Boosting classifier on the given dataset.

```{python}
# Create the Gradient Boosting classifier with the best hyperparameters
best_gb_classifier = GradientBoostingClassifier(learning_rate=0.1, 
                                                max_depth=3, 
                                                min_samples_leaf=1, 
                                                min_samples_split=5, 
                                                n_estimators=200, 
                                                random_state=456)

# Perform cross-validation with the best classifier and print out the average accuracy
cv_scores_gb = cross_val_score(best_gb_classifier, X_train, y_train, cv=5)
print("Best Gradient Boosting Cross-Validation Scores:", cv_scores_gb)
print("Average Best Gradient Boosting Accuracy:", cv_scores_gb.mean())

# Fit the best Gradient Boosting classifier to the training data
best_gb_classifier.fit(X_train, y_train, sample_weight=y_train_weights)

# Use the trained best Gradient Boosting classifier for predictions
y_pred_gb = best_gb_classifier.predict(X_test)

# Make predictions with class probabilities
y_pred_prob_gb = best_gb_classifier.predict_proba(X_test)

# Calculate ROC AUC score
roc_auc_gb = roc_auc_score(y_test, y_pred_prob_gb, multi_class='ovr')
print(f"ROC AUC (Best Gradient Boosting): {roc_auc_gb}")

# Calculate Kappa coefficient
kappa_gb = cohen_kappa_score(y_test, y_pred_gb)
print(f"Kappa (Best Gradient Boosting): {kappa_gb}")

# Calculate accuracy
accuracy_gb = accuracy_score(y_test, y_pred_gb)
print(f"Accuracy (Best Gradient Boosting): {accuracy_gb}")

# Calculate precision
precision_gb = precision_score(y_test, y_pred_gb, average='weighted')
print(f"Precision (Best Gradient Boosting): {precision_gb}")

# Calculate recall
recall_gb = recall_score(y_test, y_pred_gb, average='weighted')
print(f"Recall (Best Gradient Boosting): {recall_gb}")

# Calculate confusion matrix
confusion_gb = confusion_matrix(y_test, y_pred_gb)
print("Confusion Matrix (Best Gradient Boosting):")
print(confusion_gb)

```

#### Gradient Boosting Classifier Evaluation

- **Best Gradient Boosting Cross-Validation Scores**: The cross-validation accuracy scores for the best Gradient Boosting classifier are as follows: [0.82084691, 0.82410423, 0.79478827, 0.82736156, 0.77198697]. These scores were obtained using 5-fold cross-validation to estimate the classifier's performance on unseen data.

- **Average Best Gradient Boosting Accuracy**: The average accuracy of the classifier across the 5 cross-validation folds is 0.8078. This value provides an overall indication of the classifier's performance on the training data.

- **ROC AUC (Best Gradient Boosting)**: The Receiver Operating Characteristic Area Under the Curve (ROC AUC) score is 0.9702. A higher ROC AUC score indicates that the classifier has good discrimination ability between different classes.

- **Kappa (Best Gradient Boosting)**: The Kappa coefficient is 0.8248. Kappa measures the agreement between the predicted and true labels, considering agreement by chance. Higher values signify better agreement.

- **Accuracy (Best Gradient Boosting)**: The accuracy of the classifier on the test data is 0.8542. It represents the proportion of correct predictions out of all predictions made.

- **Precision (Best Gradient Boosting)**: The precision is 0.8556. Precision is the ratio of true positive predictions to the total predicted positive instances. The weighted average is used for multi-class problems.

- **Recall (Best Gradient Boosting)**: The recall is 0.8542. Recall is the ratio of true positive predictions to the total actual positive instances. The weighted average is used for multi-class problems.

- **Confusion Matrix (Best Gradient Boosting)**: The confusion matrix provides a detailed view of the classifier's predictions compared to the true labels. It shows the number of instances for each true class and the predicted class, helping to analyze the classifier's performance in multi-class classification scenarios.

In conclusion, the best Gradient Boosting classifier demonstrates favorable performance, with high accuracy, ROC AUC score, and precision. The confusion matrix offers valuable insights into the classifier's predictions for each class.


#### Feature Importance Analysis

This code snippet performs feature importance analysis for the trained Gradient Boosting classifier (`best_gb_classifier`). The key steps are as follows:

1. **Get Feature Importances**: The code retrieves the feature importances from the trained Gradient Boosting model. Feature importances indicate the relative importance of each feature in contributing to the model's predictions.

2. **Create Feature Importance DataFrame**: The feature importances are stored in a DataFrame named `feature_importance_df`. This DataFrame has two columns: 'Feature', which contains the names of the features, and 'Importance', which contains their corresponding importances.

3. **Sort Features by Importance**: The DataFrame is sorted in descending order based on the feature importances. This step arranges the features from the most important to the least important.

4. **Print Ranked Features**: The code prints the list of features along with their importances, in descending order of importance. This provides insights into which features have the most significant impact on the model's predictions.

Overall, this analysis helps identify the most influential features, allowing for better understanding and interpretation of the model's decision-making process.

```{python}
# Get the feature importances from the model
feature_importances = best_gb_classifier.feature_importances_

# Create a DataFrame to store feature names and their importances
feature_importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importances
})

# Sort the DataFrame by importance in descending order
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Print the features from greatest importance to least
print("Features ranked by importance (from greatest to least):")
print(feature_importance_df)

```

#### Feature Importance Ranking

The table below displays the features ranked by importance in descending order:

| Feature                     | Importance  | Description                                                                                                                             |
|-----------------------------|-------------|-----------------------------------------------------------------------------------------------------------------------------------------|
| Nintendo                    | 0.072797    | The feature "Nintendo" has the highest importance, indicating its substantial influence on the classifier's predictions. It suggests that games associated with the Nintendo platform play a significant role in determining the predicted "metacritic_category." |
| Novice Games                | 0.070135    | "Novice Games" is the second most important feature. It suggests that games categorized as "Novice" might strongly influence the classifier's predictions.                                                                  |
| Mature Games                | 0.063015    | "Mature Games" is the third most important feature. Games targeted at mature audiences seem to be influential in predicting the "metacritic_category."                                                          |
| Crytek & Curve Developers   | 0.050887    | The involvement of "Crytek & Curve Developers" has a relatively high importance, impacting the classifier's predictions.                                                                                |
| Positive Year Review Trend  | 0.048675    | The presence of a "Positive Year Review Trend" holds significant importance, suggesting that games with positive year-long trends might contribute to more positive predictions.                                      |

This feature importance ranking provides insights into which features had the most significant impact on the predictions made by the classifier for the target variable "metacritic_category." The importance values are normalized and sum up to 1.0. Hence, the higher the importance value for a feature, the more influential it is in determining the predicted "metacritic_category." Features with lower importance values have relatively less impact on the predictions.


### XGBoost Model

#### Hyperparameter Tuning for XGBoost Classifier

This code performs hyperparameter tuning for an XGBoost classifier using GridSearchCV with 5-fold cross-validation. It encodes the target variable `y_train` into integer labels, defines a hyperparameter grid, creates the XGBoost classifier, and fits the GridSearchCV to the training data. After the grid search, it obtains the best hyperparameters (`best_params_xgb`) and retrieves the best XGBoost classifier (`best_xgb_classifier`) with the optimal hyperparameters. This process aims to optimize the classifier's performance and improve its predictions on unseen data.

```{python}
# Encode the target variable 'y_train' into integer labels
#label_encoder = LabelEncoder()
#y_train_encoded = label_encoder.fit_transform(y_train)

# Encode the target variable 'y_test' into integer labels using the same label encoder
#y_test_encoded = label_encoder.transform(y_test)

# Define the hyperparameter grid to search over
#param_grid = {
#    'learning_rate': [0.01, 0.1, 0.2],
#    'max_depth': [3, 5, 7],
#    'min_child_weight': [1, 3, 5],
#    'subsample': [0.8, 1.0],
#    'colsample_bytree': [0.8, 1.0],
#    'n_estimators': [100, 200, 300]
#}

# Create the XGBoost classifier
#xgb_classifier = xgb.XGBClassifier(random_state=456)

# Create the GridSearchCV object with 5-fold cross-validation
#grid_search = GridSearchCV(xgb_classifier, param_grid, cv=5, scoring='accuracy')

# Fit the GridSearchCV to the training data
#grid_search.fit(X_train, y_train_encoded, sample_weight=y_train_weights)

# Get the best hyperparameters from the grid search
#best_params_xgb = grid_search.best_params_
#print("Best Hyperparameters for XGBoost:", best_params_xgb)

# Get the best XGBoost classifier with the best hyperparameters
#best_xgb_classifier = grid_search.best_estimator_
```

#### XGBoost Classifier Evaluation with Best Hyperparameters

This code evaluates the performance of an XGBoost classifier with the best hyperparameters obtained from previous hyperparameter tuning. The steps involved are as follows:

1. **Encoding Target Variable**: The target variable `y_train` is encoded into integer labels using the `LabelEncoder`, resulting in `y_train_encoded`. The same label encoder is used to encode the target variable `y_test` into integer labels, resulting in `y_test_encoded`.

2. **Setting Best Hyperparameters**: The best hyperparameters for the XGBoost classifier are predefined and stored in `best_params_xgb`. These hyperparameters include `colsample_bytree`, `learning_rate`, `max_depth`, `min_child_weight`, `n_estimators`, and `subsample`.

3. **Creating the XGBoost Classifier**: The XGBoost classifier `best_xgb_classifier` is created with the best hyperparameters specified in `best_params_xgb`. The `random_state` is set to 456 for reproducibility.

4. **Cross-Validation and Average Accuracy**: The code performs 5-fold cross-validation with the best XGBoost classifier using `cross_val_score`. It computes the cross-validation scores (`cv_scores_xgb`) and calculates the average accuracy (`cv_scores_xgb.mean()`).

5. **Fitting the Classifier**: The best XGBoost classifier is trained on the training data (`X_train`, `y_train_encoded`) with optional sample weights (`y_train_weights`) using the `fit` method.

6. **Making Predictions**: The trained XGBoost classifier is used to predict class labels (`y_pred_xgb`) and class probabilities (`y_pred_prob_xgb`) on the test data (`X_test`).

7. **Calculating Evaluation Metrics**:
   - **ROC AUC Score**: The Receiver Operating Characteristic Area Under the Curve (ROC AUC) score is calculated using the `roc_auc_score` function. It measures the classifier's ability to distinguish between different classes, considering the "One-vs-Rest" strategy for multi-class problems.
   - **Kappa Coefficient**: The Cohen's Kappa coefficient is calculated using the `cohen_kappa_score` function. It measures the agreement between the predicted and true labels, accounting for the possibility of agreement by chance.
   - **Accuracy**: The accuracy of the classifier on the test data is calculated using the `accuracy_score` function. It represents the proportion of correct predictions out of all predictions made.
   - **Precision**: Precision is calculated using the `precision_score` function with the weighted average for multi-class problems. Precision is the ratio of true positive predictions to the total predicted positive instances.
   - **Recall**: Recall is calculated using the `recall_score` function with the weighted average for multi-class problems. Recall is the ratio of true positive predictions to the total actual positive instances.

8. **Confusion Matrix**: The confusion matrix is calculated using the `confusion_matrix` function. It provides a tabular representation of the classifier's predictions compared to the true labels. The matrix helps analyze the classifier's performance in detail, particularly in multi-class classification scenarios.

Overall, this code evaluates the XGBoost classifier's effectiveness in making predictions with the best hyperparameters and provides insights into its performance using various evaluation metrics.

```{python}
# Encode the target variable 'y_train' into integer labels
label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)

# Encode the target variable 'y_test' into integer labels using the same label encoder
y_test_encoded = label_encoder.transform(y_test)

# Set the best hyperparameters for XGBoost
best_params_xgb = {'colsample_bytree': 0.8, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 1, 'n_estimators': 300, 'subsample': 0.8}

# Create the XGBoost classifier with the best hyperparameters
best_xgb_classifier = xgb.XGBClassifier(**best_params_xgb, random_state=456)

# Perform cross-validation with the best classifier and print out the average accuracy
cv_scores_xgb = cross_val_score(best_xgb_classifier, X_train, y_train_encoded, cv=5)
print("Best XGBoost Cross-Validation Scores:", cv_scores_xgb)
print("Average Best XGBoost Accuracy:", cv_scores_xgb.mean())

# Fit the best XGBoost classifier to the training data
best_xgb_classifier.fit(X_train, y_train_encoded, sample_weight=y_train_weights)

# Use the trained best XGBoost classifier for predictions
y_pred_xgb = best_xgb_classifier.predict(X_test)

# Make predictions with class probabilities
y_pred_prob_xgb = best_xgb_classifier.predict_proba(X_test)

# Calculate ROC AUC score
roc_auc_xgb = roc_auc_score(y_test_encoded, y_pred_prob_xgb, multi_class='ovr')
print(f"ROC AUC (Best XGBoost): {roc_auc_xgb}")

# Calculate Kappa coefficient
kappa_xgb = cohen_kappa_score(y_test_encoded, y_pred_xgb)
print(f"Kappa (Best XGBoost): {kappa_xgb}")

# Calculate accuracy
accuracy_xgb = accuracy_score(y_test_encoded, y_pred_xgb)
print(f"Accuracy (Best XGBoost): {accuracy_xgb}")

# Calculate precision
precision_xgb = precision_score(y_test_encoded, y_pred_xgb, average='weighted')
print(f"Precision (Best XGBoost): {precision_xgb}")

# Calculate recall
recall_xgb = recall_score(y_test_encoded, y_pred_xgb, average='weighted')
print(f"Recall (Best XGBoost): {recall_xgb}")

# Calculate confusion matrix
confusion_xgb = confusion_matrix(y_test_encoded, y_pred_xgb)
print("Confusion Matrix (Best XGBoost):")
print(confusion_xgb)


```

#### XGBoost Feature Importance Ranking

This code calculates and ranks the feature importances from the trained XGBoost classifier (`best_xgb_classifier`). The importance values are sorted in descending order, providing insights into the most influential features used by the XGBoost model in making predictions.

```{python}
# Get the feature importances from the model
feature_importances = best_xgb_classifier.feature_importances_

# Create a DataFrame to store feature names and their importances
feature_importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importances
})

# Sort the DataFrame by importance in descending order
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Print the features from greatest importance to least
print("Features ranked by importance (from greatest to least):")
print(feature_importance_df)
```

#### Feature Importance Ranking

The table below displays the features ranked by their importance in descending order, as determined by the model:

| Rank | Feature                    | Importance |
|------|----------------------------|------------|
| 1    | Mature Games               | 0.054591   |
| 2    | Novice Games               | 0.051460   |
| 3    | Nintendo                   | 0.050755   |
| 4    | Xbox                       | 0.045813   |
| 5    | FromSoftware               | 0.043867   |
| 6    | Crytek & Curve Developers  | 0.042657   |
| 7    | Strong Winter Lineup       | 0.041910   |
| 8    | Casual/Family Friendly     | 0.041123   |
| 9    | Storytelling Games         | 0.040672   |
| 10   | Puzzle Platformer Games    | 0.040195   |
| 11   | Xbox & Bioware             | 0.040179   |
| 12   | Crysis 3                   | 0.038291   |
| 13   | Strategy Games             | 0.037837   |
| 14   | Positive Year Review Trend | 0.037780   |
| 15   | Teen Games                 | 0.037780   |
| 16   | New Console Platforms      | 0.037450   |
| 17   | Space Flight               | 0.037444   |
| 18   | Long Playtime Games        | 0.037288   |
| 19   | Xbox Exclusive             | 0.037132   |
| 20   | Xbox & SquareEnix          | 0.037038   |
| 21   | Old Console Platforms      | 0.036267   |
| 22   | Online Platform Games      | 0.036013   |
| 23   | Multiplayer Games          | 0.033563   |
| 24   | Blizzard MMO               | 0.032037   |
| 25   | Multiplayer Winter Release | 0.030859   |


To understand why certain features matter in predicting the "metacritic_category" target variable, we analyze the feature importance ranking in descending order:

1. **Mature Games (Importance: 0.054591)**:
   - The feature "Mature Games" holds the highest importance, indicating that games targeted at mature audiences significantly influence the model's predictions. Such games might have themes, content, or gameplay elements that align with specific "metacritic_category" levels. This suggests that games intended for mature players could be associated with higher ratings like "Great" or "Excellent."

2. **Novice Games (Importance: 0.051460)**:
   - "Novice Games" come in as the second most important feature, suggesting that games tailored for entry-level or less experienced players play a crucial role in the model's predictions. It implies that these games might have specific characteristics associated with certain "metacritic_category" levels. For example, they might receive lower ratings falling into "Poor" or "Mixed" categories.

3. **Nintendo (Importance: 0.050755)**:
   - The presence of "Nintendo" among the top features implies that games associated with the Nintendo platform significantly impact the model's decisions. It suggests that games released on Nintendo consoles may have unique qualities, gaming experiences, or audience preferences that align with specific "metacritic_category" levels.

4. **Xbox (Importance: 0.045813)**:
   - "Xbox" is the fourth most important feature, indicating that games associated with the Xbox platform have notable importance in the model's predictions. Xbox games might possess distinct characteristics or gaming experiences that align with certain "metacritic_category" levels. For instance, Xbox-exclusive titles could influence higher ratings.

5. **FromSoftware (Importance: 0.043867)**:
   - The feature "FromSoftware" ranks fifth in importance, suggesting that games developed by this studio significantly influence the model's predictions. FromSoftware is known for its critically acclaimed and challenging games, which could be associated with higher ratings like "Great" or "Excellent" in the "metacritic_category."

#### Visualizing the First Decision Tree in XGBoost

This code snippet demonstrates how to visualize the first decision tree within an XGBoost model using the `plot_tree` function and the `graphviz` library. The resulting plot is saved as a JPEG image with adjustable resolution, allowing us to gain insights into the model's decision-making process.


```{python}
from xgboost import plot_tree

# Get the booster from the classifier
booster = best_xgb_classifier.get_booster()

# Set the size of the plot
fig, ax = plt.subplots(figsize=(8, 8))

# Plot the first tree (num_trees=0)
xgb.plot_tree(booster, num_trees=0, ax=ax)

# Increase the DPI for higher resolution (e.g., 600)
dpi = 1000

# Save the plot to an SVG file with specific DPI (resolution)
plt.savefig('xgb_tree_plot.jpeg', format='jpeg', dpi=dpi)

plt.show()
```

## Unsuccessful Models

The following models were tested, but they did not yield sufficient performance to be considered. These models are not recommended for further use, and attempting hyperparameter tuning is discouraged as it is unlikely to result in significant performance gains compared to Random Forest/GBM models.


### SVM Model

```{python}
# Create the SVM classifier
svm_classifier = SVC(probability = True)

# Perform cross-validation and print out the average accuracy
cv_scores_svm = cross_val_score(svm_classifier, X_train, y_train, cv=5)
print("SVM Cross-Validation Scores:", cv_scores_svm)
print("Average SVM Accuracy:", cv_scores_svm.mean())

# Fit the SVM classifier to the training data
svm_classifier.fit(X_train, y_train, sample_weight=y_train_weights)

# Use the trained SVM classifier for predictions
y_pred_svm = svm_classifier.predict(X_test)

# Make predictions with class probabilities
y_pred_prob_svm = svm_classifier.predict_proba(X_test)

# Calculate ROC AUC score
roc_auc_svm = roc_auc_score(y_test, y_pred_prob_svm, multi_class='ovr')
print(f"ROC AUC (SVM): {roc_auc_svm}")

# Calculate Kappa coefficient
kappa_svm = cohen_kappa_score(y_test, y_pred_svm)
print(f"Kappa (SVM): {kappa_svm}")

# Calculate accuracy
accuracy_svm = accuracy_score(y_test, y_pred_svm)
print(f"Accuracy (SVM): {accuracy_svm}")

# Calculate precision
precision_svm = precision_score(y_test, y_pred_svm, average='weighted')
print(f"Precision (SVM): {precision_svm}")

# Calculate recall
recall_svm = recall_score(y_test, y_pred_svm, average='weighted')
print(f"Recall (SVM): {recall_svm}")

# Calculate confusion matrix
confusion_svm = confusion_matrix(y_test, y_pred_svm)
print("Confusion Matrix (SVM):")
print(confusion_svm)
```

### Logistic Classifier
```{python}
# Create the Logistic Regression classifier
logreg_classifier = LogisticRegression()

# Perform cross-validation and print out the average accuracy
cv_scores_logreg = cross_val_score(logreg_classifier, X_train, y_train, cv=5)
print("Logistic Regression Cross-Validation Scores:", cv_scores_logreg)
print("Average Logistic Regression Accuracy:", cv_scores_logreg.mean())

# Fit the Logistic Regression classifier to the training data
logreg_classifier.fit(X_train, y_train, sample_weight=y_train_weights)

# Use the trained Logistic Regression classifier for predictions
y_pred_logreg = logreg_classifier.predict(X_test)

# Make predictions with class probabilities
y_pred_prob_logreg = logreg_classifier.predict_proba(X_test)

# Calculate ROC AUC score
roc_auc_logreg = roc_auc_score(y_test, y_pred_prob_logreg, multi_class='ovr')
print(f"ROC AUC (Logistic Regression): {roc_auc_logreg}")

# Calculate Kappa coefficient
kappa_logreg = cohen_kappa_score(y_test, y_pred_logreg)
print(f"Kappa (Logistic Regression): {kappa_logreg}")

# Calculate accuracy
accuracy_logreg = accuracy_score(y_test, y_pred_logreg)
print(f"Accuracy (Logistic Regression): {accuracy_logreg}")

# Calculate precision
precision_logreg = precision_score(y_test, y_pred_logreg, average='weighted')
print(f"Precision (Logistic Regression): {precision_logreg}")

# Calculate recall
recall_logreg = recall_score(y_test, y_pred_logreg, average='weighted')
print(f"Recall (Logistic Regression): {recall_logreg}")

# Calculate confusion matrix
confusion_logreg = confusion_matrix(y_test, y_pred_logreg)
print("Confusion Matrix (Logistic Regression):")
print(confusion_logreg)

```

# Results

The analysis of the top 9 features provides valuable insights that game developers can use to understand why a game may succeed or fail in the market. Platform selection emerges as a critical factor, with "Nintendo" and "Xbox" standing out as influential features. Carefully considering which platforms to target can substantially impact a game's overall performance and sales, making it essential for developers to analyze market trends and audience preferences for different platforms.

Moreover, the prominence of "Novice Games" and "Mature Games" highlights the importance of catering to the target audience's specific preferences and gaming experience levels. Understanding the demographic and gaming habits of the intended player base is essential in creating a game that resonates with them and increases their chances of success.

Beyond audience considerations, the feature "FromSoftware" signifies the impact of the developer on a game's success. Developers should focus on building a strong reputation and delivering high-quality experiences to attract a dedicated fanbase. A developer's track record can significantly influence the perception of a new game and its potential success.

In addition to content and developer influence, game duration and strategic release timing play a crucial role. "Long Playtime Games" and "Strong Winter Lineup" indicate that game developers must carefully consider the appropriate length of their games and identify optimal launch periods to avoid competing with other major titles and leverage seasonal demand.

The presence of "Multiplayer Games" highlights the importance of incorporating engaging multiplayer features in games. Such experiences can significantly extend a game's lifespan and foster a sense of community among players, contributing to long-term success.

Furthermore, the feature "New Console Platforms" suggests that launching games compatible with the latest gaming consoles can positively impact their performance. Staying up-to-date with technological advancements and ensuring compatibility with new platforms can attract a broader audience and increase the game's chances of success.

By considering these insights during game development, developers can increase their understanding of the market's demands and tailor their games to meet those requirements. Additionally, analyzing the performance of existing successful games and learning from previous successes can provide valuable lessons to apply in new projects. Conversely, studying the features that may have led to the failure of certain games can help developers avoid potential pitfalls and improve their chances of success.

In conclusion, a comprehensive understanding of these influential factors can guide game developers in making informed decisions throughout the development process, enhancing their games' overall quality, appeal, and marketability. By leveraging these insights, developers can maximize their game's potential for success and build stronger connections with their target audience.

# Discussion

During our research, we took rigorous measures to ensure the validity and accuracy of our model. The final model exhibited a kappa of over 0.85, signifying a nearly perfect agreement between predicted and actual data points. This indicates that the model explains the relationship far better than mere chance. 

Moreover, with accuracy, precision, and recall all around 0.87, the model demonstrated a low false positive and false negative rate, showcasing its robustness in correctly classifying data. Overall, the model effectively and accurately predicted the Metacritic outcome, presenting the promising potential for its application in a commercial setting. Utilizing this model during the research and development stage of game creation could significantly save time and resources for video game developers and studios.

However, one of the primary constraints we encountered was the scarcity of developers' and publishers' data directly available from the RAWG API. The API's structure impeded our access to this vital information for individual games, limiting the scope of our study. With a complete dataset readily available, we could have expanded our study to include a more extensive collection of games, providing richer training data for forecasting Metacritic ratings representative of the overall video game population.

Due to a deficiency of readily available clean data, we had to resort to an alternative approach, using information from Wikipedia pages to match developers’ and publishers’ data for each title. Extracting data from Wikipedia tables was a relatively straightforward process. However, this introduced inconsistencies in the names of developers and publishers. To address this issue, we condensed rarely occurring developers and publishers into an "other" category. This step, however, introduced a limitation to the accuracy of our predictive model concerning the estimation of other features.

Furthermore, our analysis relied on reviewer ratings as the predicted variable, as confidential sales information for the games was unavailable. However, it is essential to acknowledge that developers and studios are often more concerned with a game's sales performance than its critical reception alone. Incorporating sales data into the analysis would create a more robust model, combining critical acclaim with actual sales figures.

Currently, our use of Metacritic reviews as a proxy variable for success may introduce limitations, especially if sales are the ultimate measure of success. There could be instances where a game receives high critical acclaim yet fails to attract significant sales compared to a lower-rated game. Our present model lacks the ability to understand the relationship between Metacritic scores and sales data, highlighting the need for future research to better comprehend how these factors are interconnected.

By delving deeper into and understanding the correlation between Metacritic ratings and sales, we could enhance our model's accuracy in predicting real commercial success. This would greatly benefit developers in making informed decisions, creating more successful and marketable games.


# Further Study

To advance the understanding of the factors influencing game success and failure, several avenues for further study present promising opportunities. Firstly, incorporating sales data into the analysis would significantly enhance the predictive model's accuracy in gauging commercial success. Access to confidential sales information would enable researchers to unravel the intricate relationship between critical acclaim and actual sales performance, offering valuable insights for game developers and publishers seeking to optimize their strategies.

Secondly, exploring additional features beyond the top 9 identified in this study could yield valuable insights. Factors like marketing budget, social media presence, and pre-release hype could be investigated to understand their impact on game performance. Analyzing these additional elements may provide a more comprehensive understanding of the intricate web of factors influencing game success.

A third avenue of exploration could involve conducting a time-series analysis to track game performance over time. This approach could offer insights into how the significance of certain features evolves over different periods and how broader industry trends impact game performance.
Moreover, genre-specific analyses could help unveil unique patterns and insights, considering games' significant variation across genres. Understanding the specific factors driving success within distinct genres could empower developers to tailor their strategies effectively.

Incorporating user reviews and sentiment analysis, in addition to Metacritic reviews, might provide a more holistic view of player reception and satisfaction. Analyzing user feedback could reveal specific aspects of a game that resonate with players and contribute to its success.
Another fruitful area for further exploration involves considering the influence of cultural and regional factors on game success. Tailoring games to the preferences of specific regions could open new opportunities for developers in different markets.

Investigating the long-term impact of developer reputation on game success would be insightful. Analyzing the success trajectory of developers over multiple releases could shed light on their influence on a game's reception and performance.

Additionally, exploring advanced machine learning techniques and algorithms may improve the predictive model's accuracy and performance. Experimenting with different model architectures, feature engineering methods, and hyperparameter tuning could result in a more robust and accurate predictive model.

By pursuing these avenues of further study, researchers can gain deeper insights into the complex factors influencing game success and failure. Such insights can empower game developers and publishers to make informed decisions, creating more successful and marketable games. Additionally, a better understanding of these factors could contribute to the continuous growth and evolution of the video game industry as a whole.

# References

Harris, C. R., Millman, K. J., van der Walt, S. J., Gommers, R., Virtanen, P., Cournapeau, D., … Oliphant, T. E. (2020). Array programming with NumPy. Nature, 585(7825), 357-362. https://www.nature.com/articles/s41586-020-2649-2

Hunter, J. D. (2007). Matplotlib: A 2D Graphics Environment. Computing in Science & Engineering, 9(3), 90-95. https://ieeexplore.ieee.org/document/4160265

Flynn, S. (2023). The importance of marketing in the gaming industry. Fansided. https://apptrigger.com/2023/03/12/marketing-gaming-industry/

McKinney, W. (2010). Data Structures for Statistical Computing in Python. Proceedings of the 9th Python in Science Conference, 445-451. https://conference.scipy.org/proceedings/scipy2010/mckinney.html

Pedregosa, F., Varoquaux, G., Gramfort, A., Michel, V., Thirion, B., Grisel, O., … Duchesnay, E. (2011). Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research, 12, 2825-2830. https://jmlr.csail.mit.edu/papers/v12/pedregosa11a.html

RAWG. (n.d.). RAWG Video Games Database API. Retrieved June 15, 2023. https://rawg.io/apidocs
Rocket Brush (2022). How much does it cost to develop a game. Rocket Brush Studio. https://rocketbrush.com/blog/how-much-does-it-cost-to-develop-a-game

Room 8 (2020). Step-by-step process of game development pre-production phase. Room 8 Studio. https://room8studio.com/news/game-pre-production-core-steps/

Stefyn, N. (2022). How video games are made: the game development process. CGSpectrum. https://www.cgspectrum.com/blog/game-development-process

Waskom, M., Botvinnik, O., Hobson, P., … Halchenko, Y. (2021). mwaskom/seaborn: v0.11.1 (February 2021). Zenodo. https://doi.org/10.5281/zenodo.4473861

Wikipedia contributors. (2023, July 3). In Wikipedia. Retrieved July 3, 2023. https://en.wikipedia.org/wiki/

```{python}
#| include: false

# Base Wikipedia URL
wiki_base_url = "https://en.wikipedia.org/wiki/"

# Date of access
date_of_access = "July 3, 2023"

# Sort the games alphabetically
sorted_games = sorted(citationDs['name'].unique())

# Iterate through each game name in the sorted list
for game_name in sorted_games:
    # Encode only spaces in the game name to replace them in the URL
    encoded_game_name = game_name.replace(" ", "_")
    
    # Create the full Wikipedia URL for the game
    game_wiki_url = f"{wiki_base_url}{encoded_game_name}"
    
    # Print the formatted citation for the game
    print(f'Wikipedia. (n.d.). "{game_name}". Wikipedia. {game_wiki_url}\nAccessed on {date_of_access}.\n')

```

Wikipedia. (n.d.). "13 Sentinels: Aegis Rim". Wikipedia. https://en.wikipedia.org/wiki/13_Sentinels:_Aegis_Rim
Accessed on July 3, 2023.

Wikipedia. (n.d.). "60 Seconds!". Wikipedia. https://en.wikipedia.org/wiki/60_Seconds!
Accessed on July 3, 2023.

Wikipedia. (n.d.). "7 Billion Humans". Wikipedia. https://en.wikipedia.org/wiki/7_Billion_Humans
Accessed on July 3, 2023.

Wikipedia. (n.d.). "8-Bit Armies". Wikipedia. https://en.wikipedia.org/wiki/8-Bit_Armies
Accessed on July 3, 2023.

Wikipedia. (n.d.). "A Plague Tale: Innocence". Wikipedia. https://en.wikipedia.org/wiki/A_Plague_Tale:_Innocence
Accessed on July 3, 2023.

Wikipedia. (n.d.). "A Plague Tale: Requiem". Wikipedia. https://en.wikipedia.org/wiki/A_Plague_Tale:_Requiem
Accessed on July 3, 2023.

Wikipedia. (n.d.). "A Story About My Uncle". Wikipedia. https://en.wikipedia.org/wiki/A_Story_About_My_Uncle
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Absolver". Wikipedia. https://en.wikipedia.org/wiki/Absolver
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Abyss Odyssey". Wikipedia. https://en.wikipedia.org/wiki/Abyss_Odyssey
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ace Combat 7: Skies Unknown". Wikipedia. https://en.wikipedia.org/wiki/Ace_Combat_7:_Skies_Unknown
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Adventure Time: Pirates Of The Enchiridion". Wikipedia. https://en.wikipedia.org/wiki/Adventure_Time:_Pirates_Of_The_Enchiridion
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Aegis Defenders". Wikipedia. https://en.wikipedia.org/wiki/Aegis_Defenders
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Age Of Empires Iv". Wikipedia. https://en.wikipedia.org/wiki/Age_Of_Empires_Iv
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Age Of Empires: Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Age_Of_Empires:_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Age Of Wonders: Planetfall". Wikipedia. https://en.wikipedia.org/wiki/Age_Of_Wonders:_Planetfall
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Agents Of Mayhem". Wikipedia. https://en.wikipedia.org/wiki/Agents_Of_Mayhem
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Alan Wake Remastered". Wikipedia. https://en.wikipedia.org/wiki/Alan_Wake_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Albion Online". Wikipedia. https://en.wikipedia.org/wiki/Albion_Online
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Alien: Isolation". Wikipedia. https://en.wikipedia.org/wiki/Alien:_Isolation
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Aliens: Colonial Marines". Wikipedia. https://en.wikipedia.org/wiki/Aliens:_Colonial_Marines
Accessed on July 3, 2023.

Wikipedia. (n.d.). "American Fugitive". Wikipedia. https://en.wikipedia.org/wiki/American_Fugitive
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Amnesia: Rebirth". Wikipedia. https://en.wikipedia.org/wiki/Amnesia:_Rebirth
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Among The Sleep". Wikipedia. https://en.wikipedia.org/wiki/Among_The_Sleep
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Among Us". Wikipedia. https://en.wikipedia.org/wiki/Among_Us
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Animal Crossing: New Horizons". Wikipedia. https://en.wikipedia.org/wiki/Animal_Crossing:_New_Horizons
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Animal Crossing: Pocket Camp". Wikipedia. https://en.wikipedia.org/wiki/Animal_Crossing:_Pocket_Camp
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Anna'S Quest". Wikipedia. https://en.wikipedia.org/wiki/Anna'S_Quest
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Anno 1800". Wikipedia. https://en.wikipedia.org/wiki/Anno_1800
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Apex Legends". Wikipedia. https://en.wikipedia.org/wiki/Apex_Legends
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Apotheon". Wikipedia. https://en.wikipedia.org/wiki/Apotheon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Aragami 2". Wikipedia. https://en.wikipedia.org/wiki/Aragami_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Arizona Sunshine". Wikipedia. https://en.wikipedia.org/wiki/Arizona_Sunshine
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Arma 3". Wikipedia. https://en.wikipedia.org/wiki/Arma_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Armello". Wikipedia. https://en.wikipedia.org/wiki/Armello
Accessed on July 3, 2023.

Wikipedia. (n.d.). "As Dusk Falls". Wikipedia. https://en.wikipedia.org/wiki/As_Dusk_Falls
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin'S Creed Freedom Cry". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Freedom_Cry
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin'S Creed Iii: Remastered". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Iii:_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin'S Creed Odyssey". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Odyssey
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin'S Creed Origins". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Origins
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin'S Creed Syndicate". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Syndicate
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin'S Creed Unity". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Unity
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin'S Creed Valhalla". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Valhalla
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assassin’S Creed Iv: Black Flag". Wikipedia. https://en.wikipedia.org/wiki/Assassin’S_Creed_Iv:_Black_Flag
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assault Android Cactus". Wikipedia. https://en.wikipedia.org/wiki/Assault_Android_Cactus
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Assetto Corsa Competizione". Wikipedia. https://en.wikipedia.org/wiki/Assetto_Corsa_Competizione
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Astral Chain". Wikipedia. https://en.wikipedia.org/wiki/Astral_Chain
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Astro Bot Rescue Mission". Wikipedia. https://en.wikipedia.org/wiki/Astro_Bot_Rescue_Mission
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Astro'S Playroom". Wikipedia. https://en.wikipedia.org/wiki/Astro'S_Playroom
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Astroneer". Wikipedia. https://en.wikipedia.org/wiki/Astroneer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Atelier Ryza 2: Lost Legends & The Secret Fairy". Wikipedia. https://en.wikipedia.org/wiki/Atelier_Ryza_2:_Lost_Legends_&_The_Secret_Fairy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Atelier Ryza: Ever Darkness & The Secret Hideout". Wikipedia. https://en.wikipedia.org/wiki/Atelier_Ryza:_Ever_Darkness_&_The_Secret_Hideout
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Atomic Heart". Wikipedia. https://en.wikipedia.org/wiki/Atomic_Heart
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Axiom Verge". Wikipedia. https://en.wikipedia.org/wiki/Axiom_Verge
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Back 4 Blood". Wikipedia. https://en.wikipedia.org/wiki/Back_4_Blood
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Baldur'S Gate Ii: Enhanced Edition". Wikipedia. https://en.wikipedia.org/wiki/Baldur'S_Gate_Ii:_Enhanced_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Batman: Arkham Knight". Wikipedia. https://en.wikipedia.org/wiki/Batman:_Arkham_Knight
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Batman: Arkham Origins". Wikipedia. https://en.wikipedia.org/wiki/Batman:_Arkham_Origins
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Battle Chef Brigade". Wikipedia. https://en.wikipedia.org/wiki/Battle_Chef_Brigade
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Battleblock Theater". Wikipedia. https://en.wikipedia.org/wiki/Battleblock_Theater
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Battlefield 2042". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_2042
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Battlefield 3: End Game". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_3:_End_Game
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Battlefield 4". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Battlefield Hardline". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_Hardline
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Battlefield V". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_V
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bayonetta 2". Wikipedia. https://en.wikipedia.org/wiki/Bayonetta_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Beat Saber". Wikipedia. https://en.wikipedia.org/wiki/Beat_Saber
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Beautiful Desolation". Wikipedia. https://en.wikipedia.org/wiki/Beautiful_Desolation
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Beyond: Two Souls". Wikipedia. https://en.wikipedia.org/wiki/Beyond:_Two_Souls
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Biomutant". Wikipedia. https://en.wikipedia.org/wiki/Biomutant
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bioshock Infinite". Wikipedia. https://en.wikipedia.org/wiki/Bioshock_Infinite
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Birthdays The Beginning". Wikipedia. https://en.wikipedia.org/wiki/Birthdays_The_Beginning
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Black Desert Online". Wikipedia. https://en.wikipedia.org/wiki/Black_Desert_Online
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Blacksad: Under The Skin". Wikipedia. https://en.wikipedia.org/wiki/Blacksad:_Under_The_Skin
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Blood & Truth". Wikipedia. https://en.wikipedia.org/wiki/Blood_&_Truth
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Blood Bowl 2". Wikipedia. https://en.wikipedia.org/wiki/Blood_Bowl_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Blood: Fresh Supply". Wikipedia. https://en.wikipedia.org/wiki/Blood:_Fresh_Supply
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bloodborne". Wikipedia. https://en.wikipedia.org/wiki/Bloodborne
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bloodstained: Curse Of The Moon". Wikipedia. https://en.wikipedia.org/wiki/Bloodstained:_Curse_Of_The_Moon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bloodstained: Ritual Of The Night". Wikipedia. https://en.wikipedia.org/wiki/Bloodstained:_Ritual_Of_The_Night
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bomber Crew". Wikipedia. https://en.wikipedia.org/wiki/Bomber_Crew
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Book Of Demons". Wikipedia. https://en.wikipedia.org/wiki/Book_Of_Demons
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Borderlands 3". Wikipedia. https://en.wikipedia.org/wiki/Borderlands_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Boyfriend Dungeon". Wikipedia. https://en.wikipedia.org/wiki/Boyfriend_Dungeon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Breach & Clear". Wikipedia. https://en.wikipedia.org/wiki/Breach_&_Clear
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Breathedge". Wikipedia. https://en.wikipedia.org/wiki/Breathedge
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bridge Constructor Portal". Wikipedia. https://en.wikipedia.org/wiki/Bridge_Constructor_Portal
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bright Memory". Wikipedia. https://en.wikipedia.org/wiki/Bright_Memory
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Brothers: A Tale Of Two Sons". Wikipedia. https://en.wikipedia.org/wiki/Brothers:_A_Tale_Of_Two_Sons
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bugsnax". Wikipedia. https://en.wikipedia.org/wiki/Bugsnax
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Bulletstorm: Full Clip Edition". Wikipedia. https://en.wikipedia.org/wiki/Bulletstorm:_Full_Clip_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cadence Of Hyrule". Wikipedia. https://en.wikipedia.org/wiki/Cadence_Of_Hyrule
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Advanced Warfare". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Advanced_Warfare
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Black Ops 4". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Black_Ops_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Black Ops Iii". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Black_Ops_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Ghosts". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Ghosts
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Infinite Warfare". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Infinite_Warfare
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Mobile". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Mobile
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Modern Warfare 2 Campaign Remastered". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Modern_Warfare_2_Campaign_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Modern Warfare Remastered". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Modern_Warfare_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Call Of Duty: Warzone". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Warzone
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Calvino Noir". Wikipedia. https://en.wikipedia.org/wiki/Calvino_Noir
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Capcom Arcade Stadium". Wikipedia. https://en.wikipedia.org/wiki/Capcom_Arcade_Stadium
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Captain Tsubasa: Rise Of New Champions". Wikipedia. https://en.wikipedia.org/wiki/Captain_Tsubasa:_Rise_Of_New_Champions
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Car Mechanic Simulator". Wikipedia. https://en.wikipedia.org/wiki/Car_Mechanic_Simulator
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Card Shark". Wikipedia. https://en.wikipedia.org/wiki/Card_Shark
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Carmageddon: Max Damage". Wikipedia. https://en.wikipedia.org/wiki/Carmageddon:_Max_Damage
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Castlevania: Lords Of Shadow - Mirror Of Fate". Wikipedia. https://en.wikipedia.org/wiki/Castlevania:_Lords_Of_Shadow_-_Mirror_Of_Fate
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Castlevania: Lords Of Shadow 2". Wikipedia. https://en.wikipedia.org/wiki/Castlevania:_Lords_Of_Shadow_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cat Quest". Wikipedia. https://en.wikipedia.org/wiki/Cat_Quest
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cat Quest Ii". Wikipedia. https://en.wikipedia.org/wiki/Cat_Quest_Ii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Catherine: Full Body". Wikipedia. https://en.wikipedia.org/wiki/Catherine:_Full_Body
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Chicory: A Colorful Tale". Wikipedia. https://en.wikipedia.org/wiki/Chicory:_A_Colorful_Tale
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Child Of Light". Wikipedia. https://en.wikipedia.org/wiki/Child_Of_Light
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Children Of Morta". Wikipedia. https://en.wikipedia.org/wiki/Children_Of_Morta
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Chivalry 2". Wikipedia. https://en.wikipedia.org/wiki/Chivalry_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Chroma Squad". Wikipedia. https://en.wikipedia.org/wiki/Chroma_Squad
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Chuchel". Wikipedia. https://en.wikipedia.org/wiki/Chuchel
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cities: Skylines". Wikipedia. https://en.wikipedia.org/wiki/Cities:_Skylines
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Citizen Sleeper". Wikipedia. https://en.wikipedia.org/wiki/Citizen_Sleeper
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Citizens Of Earth". Wikipedia. https://en.wikipedia.org/wiki/Citizens_Of_Earth
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Clash Royale". Wikipedia. https://en.wikipedia.org/wiki/Clash_Royale
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Command & Conquer Remastered Collection". Wikipedia. https://en.wikipedia.org/wiki/Command_&_Conquer_Remastered_Collection
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Company Of Heroes 2". Wikipedia. https://en.wikipedia.org/wiki/Company_Of_Heroes_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Conan Exiles". Wikipedia. https://en.wikipedia.org/wiki/Conan_Exiles
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Concrete Genie". Wikipedia. https://en.wikipedia.org/wiki/Concrete_Genie
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cosmic Star Heroine". Wikipedia. https://en.wikipedia.org/wiki/Cosmic_Star_Heroine
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cossacks 3". Wikipedia. https://en.wikipedia.org/wiki/Cossacks_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Costume Quest 2". Wikipedia. https://en.wikipedia.org/wiki/Costume_Quest_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crackdown 3". Wikipedia. https://en.wikipedia.org/wiki/Crackdown_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crash Bandicoot 4: It’S About Time". Wikipedia. https://en.wikipedia.org/wiki/Crash_Bandicoot_4:_It’S_About_Time
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crash Bandicoot N. Sane Trilogy". Wikipedia. https://en.wikipedia.org/wiki/Crash_Bandicoot_N._Sane_Trilogy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Creaks". Wikipedia. https://en.wikipedia.org/wiki/Creaks
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cris Tales". Wikipedia. https://en.wikipedia.org/wiki/Cris_Tales
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crisis Core: Final Fantasy Vii Reunion". Wikipedia. https://en.wikipedia.org/wiki/Crisis_Core:_Final_Fantasy_Vii_Reunion
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crossing Souls". Wikipedia. https://en.wikipedia.org/wiki/Crossing_Souls
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crossout". Wikipedia. https://en.wikipedia.org/wiki/Crossout
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crypt Of The Necrodancer". Wikipedia. https://en.wikipedia.org/wiki/Crypt_Of_The_Necrodancer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cryptark". Wikipedia. https://en.wikipedia.org/wiki/Cryptark
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crysis 3". Wikipedia. https://en.wikipedia.org/wiki/Crysis_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Crysis Remastered". Wikipedia. https://en.wikipedia.org/wiki/Crysis_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cultist Simulator". Wikipedia. https://en.wikipedia.org/wiki/Cultist_Simulator
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Cyberpunk 2077". Wikipedia. https://en.wikipedia.org/wiki/Cyberpunk_2077
Accessed on July 3, 2023.

Wikipedia. (n.d.). "D4: Dark Dreams Don'T Die". Wikipedia. https://en.wikipedia.org/wiki/D4:_Dark_Dreams_Don'T_Die
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Danganronpa Another Episode: Ultra Despair Girls". Wikipedia. https://en.wikipedia.org/wiki/Danganronpa_Another_Episode:_Ultra_Despair_Girls
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dark Souls Ii". Wikipedia. https://en.wikipedia.org/wiki/Dark_Souls_Ii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dark Souls Ii: Scholar Of The First Sin". Wikipedia. https://en.wikipedia.org/wiki/Dark_Souls_Ii:_Scholar_Of_The_First_Sin
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dark Souls Iii". Wikipedia. https://en.wikipedia.org/wiki/Dark_Souls_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Darkest Dungeon". Wikipedia. https://en.wikipedia.org/wiki/Darkest_Dungeon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Darksiders Iii". Wikipedia. https://en.wikipedia.org/wiki/Darksiders_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Darkwood". Wikipedia. https://en.wikipedia.org/wiki/Darkwood
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Day Of The Tentacle Remastered". Wikipedia. https://en.wikipedia.org/wiki/Day_Of_The_Tentacle_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Daymare: 1998". Wikipedia. https://en.wikipedia.org/wiki/Daymare:_1998
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Days Gone". Wikipedia. https://en.wikipedia.org/wiki/Days_Gone
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Cells". Wikipedia. https://en.wikipedia.org/wiki/Dead_Cells
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Effect". Wikipedia. https://en.wikipedia.org/wiki/Dead_Effect
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Island 2". Wikipedia. https://en.wikipedia.org/wiki/Dead_Island_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Island Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Dead_Island_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Island Riptide". Wikipedia. https://en.wikipedia.org/wiki/Dead_Island_Riptide
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Rising 3". Wikipedia. https://en.wikipedia.org/wiki/Dead_Rising_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Rising 4". Wikipedia. https://en.wikipedia.org/wiki/Dead_Rising_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dead Space 3". Wikipedia. https://en.wikipedia.org/wiki/Dead_Space_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Deadfall Adventures". Wikipedia. https://en.wikipedia.org/wiki/Deadfall_Adventures
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Death Stranding". Wikipedia. https://en.wikipedia.org/wiki/Death_Stranding
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Death Stranding Director'S Cut". Wikipedia. https://en.wikipedia.org/wiki/Death_Stranding_Director'S_Cut
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Deathloop". Wikipedia. https://en.wikipedia.org/wiki/Deathloop
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Deep Rock Galactic". Wikipedia. https://en.wikipedia.org/wiki/Deep_Rock_Galactic
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Defense Grid 2". Wikipedia. https://en.wikipedia.org/wiki/Defense_Grid_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Deliver Us The Moon". Wikipedia. https://en.wikipedia.org/wiki/Deliver_Us_The_Moon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Democracy 3". Wikipedia. https://en.wikipedia.org/wiki/Democracy_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Demon'S Souls". Wikipedia. https://en.wikipedia.org/wiki/Demon'S_Souls
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Deponia Doomsday". Wikipedia. https://en.wikipedia.org/wiki/Deponia_Doomsday
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Descenders". Wikipedia. https://en.wikipedia.org/wiki/Descenders
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Desperados Iii". Wikipedia. https://en.wikipedia.org/wiki/Desperados_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Destiny 2". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Destiny 2: Beyond Light". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2:_Beyond_Light
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Destiny 2: Curse Of Osiris". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2:_Curse_Of_Osiris
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Destiny 2: Forsaken". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2:_Forsaken
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Destiny: House Of Wolves". Wikipedia. https://en.wikipedia.org/wiki/Destiny:_House_Of_Wolves
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Destiny: Rise Of Iron". Wikipedia. https://en.wikipedia.org/wiki/Destiny:_Rise_Of_Iron
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Detroit: Become Human". Wikipedia. https://en.wikipedia.org/wiki/Detroit:_Become_Human
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Deus Ex: Human Revolution - Director'S Cut". Wikipedia. https://en.wikipedia.org/wiki/Deus_Ex:_Human_Revolution_-_Director'S_Cut
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Deus Ex: Mankind Divided". Wikipedia. https://en.wikipedia.org/wiki/Deus_Ex:_Mankind_Divided
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Devil May Cry 5". Wikipedia. https://en.wikipedia.org/wiki/Devil_May_Cry_5
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Devilian". Wikipedia. https://en.wikipedia.org/wiki/Devilian
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Diablo Ii: Resurrected". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Ii:_Resurrected
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Diablo Iii: Eternal Collection". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Iii:_Eternal_Collection
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Diablo Iii: Reaper Of Souls". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Iii:_Reaper_Of_Souls
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Diablo Iv". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Iv
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dicey Dungeons". Wikipedia. https://en.wikipedia.org/wiki/Dicey_Dungeons
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Digimon Story Cyber Sleuth". Wikipedia. https://en.wikipedia.org/wiki/Digimon_Story_Cyber_Sleuth
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Disco Elysium". Wikipedia. https://en.wikipedia.org/wiki/Disco_Elysium
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Disgaea 5: Alliance Of Vengeance". Wikipedia. https://en.wikipedia.org/wiki/Disgaea_5:_Alliance_Of_Vengeance
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dishonored 2". Wikipedia. https://en.wikipedia.org/wiki/Dishonored_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dishonored: Death Of The Outsider". Wikipedia. https://en.wikipedia.org/wiki/Dishonored:_Death_Of_The_Outsider
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Disneyland Adventures". Wikipedia. https://en.wikipedia.org/wiki/Disneyland_Adventures
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Divekick". Wikipedia. https://en.wikipedia.org/wiki/Divekick
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Divinity: Dragon Commander". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Dragon_Commander
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Divinity: Original Sin". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Divinity: Original Sin - Enhanced Edition". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin_-_Enhanced_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Divinity: Original Sin 2". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Divinity: Original Sin 2 - Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin_2_-_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Doki Doki Literature Club Plus!". Wikipedia. https://en.wikipedia.org/wiki/Doki_Doki_Literature_Club_Plus!
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Doom 3". Wikipedia. https://en.wikipedia.org/wiki/Doom_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Doom Eternal". Wikipedia. https://en.wikipedia.org/wiki/Doom_Eternal
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Door Kickers". Wikipedia. https://en.wikipedia.org/wiki/Door_Kickers
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon Age: Inquisition". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Age:_Inquisition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon Ball Xenoverse". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Ball_Xenoverse
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon Ball Xenoverse 2". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Ball_Xenoverse_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon Ball Z: Kakarot". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Ball_Z:_Kakarot
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon Quest Builders". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Quest_Builders
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon Quest Builders 2". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Quest_Builders_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon Quest Heroes Ii". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Quest_Heroes_Ii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dragon'S Dogma: Dark Arisen". Wikipedia. https://en.wikipedia.org/wiki/Dragon'S_Dogma:_Dark_Arisen
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Drakengard 3". Wikipedia. https://en.wikipedia.org/wiki/Drakengard_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dreadout". Wikipedia. https://en.wikipedia.org/wiki/Dreadout
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dream Daddy: A Dad Dating Simulator". Wikipedia. https://en.wikipedia.org/wiki/Dream_Daddy:_A_Dad_Dating_Simulator
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dreamfall Chapters". Wikipedia. https://en.wikipedia.org/wiki/Dreamfall_Chapters
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dungeon Of The Endless". Wikipedia. https://en.wikipedia.org/wiki/Dungeon_Of_The_Endless
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dungeon Souls". Wikipedia. https://en.wikipedia.org/wiki/Dungeon_Souls
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dungeons & Dragons: Dark Alliance". Wikipedia. https://en.wikipedia.org/wiki/Dungeons_&_Dragons:_Dark_Alliance
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dungeons 2". Wikipedia. https://en.wikipedia.org/wiki/Dungeons_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dungeons 3". Wikipedia. https://en.wikipedia.org/wiki/Dungeons_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dust 514". Wikipedia. https://en.wikipedia.org/wiki/Dust_514
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dying Light". Wikipedia. https://en.wikipedia.org/wiki/Dying_Light
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Dynasty Warriors 9". Wikipedia. https://en.wikipedia.org/wiki/Dynasty_Warriors_9
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Eador. Masters Of The Broken World". Wikipedia. https://en.wikipedia.org/wiki/Eador._Masters_Of_The_Broken_World
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Eagle Flight". Wikipedia. https://en.wikipedia.org/wiki/Eagle_Flight
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Earth Defense Force: Iron Rain". Wikipedia. https://en.wikipedia.org/wiki/Earth_Defense_Force:_Iron_Rain
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Elden Ring". Wikipedia. https://en.wikipedia.org/wiki/Elden_Ring
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Electronic Super Joy". Wikipedia. https://en.wikipedia.org/wiki/Electronic_Super_Joy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Elex". Wikipedia. https://en.wikipedia.org/wiki/Elex
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Elite Dangerous". Wikipedia. https://en.wikipedia.org/wiki/Elite_Dangerous
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Enter The Gungeon". Wikipedia. https://en.wikipedia.org/wiki/Enter_The_Gungeon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ether One". Wikipedia. https://en.wikipedia.org/wiki/Ether_One
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Everspace". Wikipedia. https://en.wikipedia.org/wiki/Everspace
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Evil West". Wikipedia. https://en.wikipedia.org/wiki/Evil_West
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Evoland 2". Wikipedia. https://en.wikipedia.org/wiki/Evoland_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Evoland Legendary Edition". Wikipedia. https://en.wikipedia.org/wiki/Evoland_Legendary_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Evolve Stage 2". Wikipedia. https://en.wikipedia.org/wiki/Evolve_Stage_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "F1 Manager 2022". Wikipedia. https://en.wikipedia.org/wiki/F1_Manager_2022
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fable Anniversary". Wikipedia. https://en.wikipedia.org/wiki/Fable_Anniversary
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Faeria". Wikipedia. https://en.wikipedia.org/wiki/Faeria
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fahrenheit: Indigo Prophecy Remastered". Wikipedia. https://en.wikipedia.org/wiki/Fahrenheit:_Indigo_Prophecy_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fall Guys: Ultimate Knockout". Wikipedia. https://en.wikipedia.org/wiki/Fall_Guys:_Ultimate_Knockout
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fallout 4". Wikipedia. https://en.wikipedia.org/wiki/Fallout_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fallout 4 - Far Harbor". Wikipedia. https://en.wikipedia.org/wiki/Fallout_4_-_Far_Harbor
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fallout 76". Wikipedia. https://en.wikipedia.org/wiki/Fallout_76
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fallout Shelter". Wikipedia. https://en.wikipedia.org/wiki/Fallout_Shelter
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Far Cry 3: Blood Dragon". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_3:_Blood_Dragon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Far Cry 4". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Far Cry 5". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_5
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Far Cry New Dawn". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_New_Dawn
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Far Cry Primal". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_Primal
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fat Princess Adventures". Wikipedia. https://en.wikipedia.org/wiki/Fat_Princess_Adventures
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fifa 22". Wikipedia. https://en.wikipedia.org/wiki/Fifa_22
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Final Fantasy Vii". Wikipedia. https://en.wikipedia.org/wiki/Final_Fantasy_Vii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Final Fantasy Vii Remake Intergrade". Wikipedia. https://en.wikipedia.org/wiki/Final_Fantasy_Vii_Remake_Intergrade
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Final Fantasy Viii Remastered". Wikipedia. https://en.wikipedia.org/wiki/Final_Fantasy_Viii_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fire Emblem Echoes: Shadows Of Valentia". Wikipedia. https://en.wikipedia.org/wiki/Fire_Emblem_Echoes:_Shadows_Of_Valentia
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fire Emblem Fates: Birthright". Wikipedia. https://en.wikipedia.org/wiki/Fire_Emblem_Fates:_Birthright
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fire Emblem: Three Houses". Wikipedia. https://en.wikipedia.org/wiki/Fire_Emblem:_Three_Houses
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fire Pro Wrestling World". Wikipedia. https://en.wikipedia.org/wiki/Fire_Pro_Wrestling_World
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Firewatch". Wikipedia. https://en.wikipedia.org/wiki/Firewatch
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Football Manager 2020". Wikipedia. https://en.wikipedia.org/wiki/Football_Manager_2020
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Football Manager 2021". Wikipedia. https://en.wikipedia.org/wiki/Football_Manager_2021
Accessed on July 3, 2023.

Wikipedia. (n.d.). "For Honor". Wikipedia. https://en.wikipedia.org/wiki/For_Honor
Accessed on July 3, 2023.

Wikipedia. (n.d.). "For The King". Wikipedia. https://en.wikipedia.org/wiki/For_The_King
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Forgotton Anne". Wikipedia. https://en.wikipedia.org/wiki/Forgotton_Anne
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Forspoken". Wikipedia. https://en.wikipedia.org/wiki/Forspoken
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Fortnite Battle Royale". Wikipedia. https://en.wikipedia.org/wiki/Fortnite_Battle_Royale
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Forza Motorsport 5". Wikipedia. https://en.wikipedia.org/wiki/Forza_Motorsport_5
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Freedom Planet". Wikipedia. https://en.wikipedia.org/wiki/Freedom_Planet
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Freedom Wars". Wikipedia. https://en.wikipedia.org/wiki/Freedom_Wars
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Frostpunk". Wikipedia. https://en.wikipedia.org/wiki/Frostpunk
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Full Throttle Remastered". Wikipedia. https://en.wikipedia.org/wiki/Full_Throttle_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Furi". Wikipedia. https://en.wikipedia.org/wiki/Furi
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Game Of Thrones - A Telltale Games Series". Wikipedia. https://en.wikipedia.org/wiki/Game_Of_Thrones_-_A_Telltale_Games_Series
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gears 5: Hivebusters". Wikipedia. https://en.wikipedia.org/wiki/Gears_5:_Hivebusters
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gears Of War 4". Wikipedia. https://en.wikipedia.org/wiki/Gears_Of_War_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gears Of War: Judgment". Wikipedia. https://en.wikipedia.org/wiki/Gears_Of_War:_Judgment
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gears Of War: Ultimate Edition". Wikipedia. https://en.wikipedia.org/wiki/Gears_Of_War:_Ultimate_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gears Tactics". Wikipedia. https://en.wikipedia.org/wiki/Gears_Tactics
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Genkai Tokki: Moero Chronicle". Wikipedia. https://en.wikipedia.org/wiki/Genkai_Tokki:_Moero_Chronicle
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Genshin Impact". Wikipedia. https://en.wikipedia.org/wiki/Genshin_Impact
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ghost Of Tsushima". Wikipedia. https://en.wikipedia.org/wiki/Ghost_Of_Tsushima
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ghost Of Tsushima Director'S Cut". Wikipedia. https://en.wikipedia.org/wiki/Ghost_Of_Tsushima_Director'S_Cut
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ghostrunner". Wikipedia. https://en.wikipedia.org/wiki/Ghostrunner
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ghostwire: Tokyo". Wikipedia. https://en.wikipedia.org/wiki/Ghostwire:_Tokyo
Accessed on July 3, 2023.

Wikipedia. (n.d.). "God Eater 2: Rage Burst". Wikipedia. https://en.wikipedia.org/wiki/God_Eater_2:_Rage_Burst
Accessed on July 3, 2023.

Wikipedia. (n.d.). "God Eater Resurrection". Wikipedia. https://en.wikipedia.org/wiki/God_Eater_Resurrection
Accessed on July 3, 2023.

Wikipedia. (n.d.). "God Of War Iii Remastered". Wikipedia. https://en.wikipedia.org/wiki/God_Of_War_Iii_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "God Of War: Ascension". Wikipedia. https://en.wikipedia.org/wiki/God_Of_War:_Ascension
Accessed on July 3, 2023.

Wikipedia. (n.d.). "God Of War: Ragnarök". Wikipedia. https://en.wikipedia.org/wiki/God_Of_War:_Ragnarök
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gone Home". Wikipedia. https://en.wikipedia.org/wiki/Gone_Home
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gonner". Wikipedia. https://en.wikipedia.org/wiki/Gonner
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Goodbye Deponia". Wikipedia. https://en.wikipedia.org/wiki/Goodbye_Deponia
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Grand Kingdom". Wikipedia. https://en.wikipedia.org/wiki/Grand_Kingdom
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Grand Theft Auto Online". Wikipedia. https://en.wikipedia.org/wiki/Grand_Theft_Auto_Online
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Grand Theft Auto V". Wikipedia. https://en.wikipedia.org/wiki/Grand_Theft_Auto_V
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Graveyard Keeper". Wikipedia. https://en.wikipedia.org/wiki/Graveyard_Keeper
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gravity Rush 2". Wikipedia. https://en.wikipedia.org/wiki/Gravity_Rush_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gravity Rush Remastered". Wikipedia. https://en.wikipedia.org/wiki/Gravity_Rush_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Greedfall". Wikipedia. https://en.wikipedia.org/wiki/Greedfall
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Griftlands". Wikipedia. https://en.wikipedia.org/wiki/Griftlands
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Grim Fandango Remastered". Wikipedia. https://en.wikipedia.org/wiki/Grim_Fandango_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Grip: Combat Racing". Wikipedia. https://en.wikipedia.org/wiki/Grip:_Combat_Racing
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Gris". Wikipedia. https://en.wikipedia.org/wiki/Gris
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Guacamelee!". Wikipedia. https://en.wikipedia.org/wiki/Guacamelee!
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Guacamelee! 2". Wikipedia. https://en.wikipedia.org/wiki/Guacamelee!_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Guacamelee! Super Turbo Championship Edition". Wikipedia. https://en.wikipedia.org/wiki/Guacamelee!_Super_Turbo_Championship_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hacknet". Wikipedia. https://en.wikipedia.org/wiki/Hacknet
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Halcyon 6: Starbase Commander". Wikipedia. https://en.wikipedia.org/wiki/Halcyon_6:_Starbase_Commander
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Halo 5: Guardians". Wikipedia. https://en.wikipedia.org/wiki/Halo_5:_Guardians
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Halo Infinite". Wikipedia. https://en.wikipedia.org/wiki/Halo_Infinite
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Halo Wars 2". Wikipedia. https://en.wikipedia.org/wiki/Halo_Wars_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hard West". Wikipedia. https://en.wikipedia.org/wiki/Hard_West
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hatoful Boyfriend". Wikipedia. https://en.wikipedia.org/wiki/Hatoful_Boyfriend
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hatoful Boyfriend: Holiday Star". Wikipedia. https://en.wikipedia.org/wiki/Hatoful_Boyfriend:_Holiday_Star
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hearthstone". Wikipedia. https://en.wikipedia.org/wiki/Hearthstone
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hellblade: Senua'S Sacrifice". Wikipedia. https://en.wikipedia.org/wiki/Hellblade:_Senua'S_Sacrifice
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Helldivers". Wikipedia. https://en.wikipedia.org/wiki/Helldivers
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hello Neighbor". Wikipedia. https://en.wikipedia.org/wiki/Hello_Neighbor
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Heroes Of The Storm". Wikipedia. https://en.wikipedia.org/wiki/Heroes_Of_The_Storm
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hitman Go: Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Hitman_Go:_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hogwarts Legacy". Wikipedia. https://en.wikipedia.org/wiki/Hogwarts_Legacy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hohokum". Wikipedia. https://en.wikipedia.org/wiki/Hohokum
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hokko Life". Wikipedia. https://en.wikipedia.org/wiki/Hokko_Life
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hollow Knight". Wikipedia. https://en.wikipedia.org/wiki/Hollow_Knight
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Homeworld Remastered Collection". Wikipedia. https://en.wikipedia.org/wiki/Homeworld_Remastered_Collection
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Horizon Forbidden West". Wikipedia. https://en.wikipedia.org/wiki/Horizon_Forbidden_West
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Horizon Zero Dawn". Wikipedia. https://en.wikipedia.org/wiki/Horizon_Zero_Dawn
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hot Shots Golf". Wikipedia. https://en.wikipedia.org/wiki/Hot_Shots_Golf
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hotline Miami 2: Wrong Number". Wikipedia. https://en.wikipedia.org/wiki/Hotline_Miami_2:_Wrong_Number
Accessed on July 3, 2023.

Wikipedia. (n.d.). "House Flipper". Wikipedia. https://en.wikipedia.org/wiki/House_Flipper
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Human Resource Machine". Wikipedia. https://en.wikipedia.org/wiki/Human_Resource_Machine
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Human: Fall Flat". Wikipedia. https://en.wikipedia.org/wiki/Human:_Fall_Flat
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hunt: Showdown". Wikipedia. https://en.wikipedia.org/wiki/Hunt:_Showdown
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Hyper Scape". Wikipedia. https://en.wikipedia.org/wiki/Hyper_Scape
Accessed on July 3, 2023.

Wikipedia. (n.d.). "I Am Bread". Wikipedia. https://en.wikipedia.org/wiki/I_Am_Bread
Accessed on July 3, 2023.

Wikipedia. (n.d.). "I Am Setsuna". Wikipedia. https://en.wikipedia.org/wiki/I_Am_Setsuna
Accessed on July 3, 2023.

Wikipedia. (n.d.). "If Found...". Wikipedia. https://en.wikipedia.org/wiki/If_Found...
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Immortal: Unchained". Wikipedia. https://en.wikipedia.org/wiki/Immortal:_Unchained
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Infamous First Light". Wikipedia. https://en.wikipedia.org/wiki/Infamous_First_Light
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Infamous Second Son". Wikipedia. https://en.wikipedia.org/wiki/Infamous_Second_Son
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Infernax". Wikipedia. https://en.wikipedia.org/wiki/Infernax
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Infested Planet". Wikipedia. https://en.wikipedia.org/wiki/Infested_Planet
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Injustice: Gods Among Us Ultimate Edition". Wikipedia. https://en.wikipedia.org/wiki/Injustice:_Gods_Among_Us_Ultimate_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Into The Breach". Wikipedia. https://en.wikipedia.org/wiki/Into_The_Breach
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ironcast". Wikipedia. https://en.wikipedia.org/wiki/Ironcast
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ironclad Tactics". Wikipedia. https://en.wikipedia.org/wiki/Ironclad_Tactics
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Job Simulator". Wikipedia. https://en.wikipedia.org/wiki/Job_Simulator
Accessed on July 3, 2023.

Wikipedia. (n.d.). "John Wick Hex". Wikipedia. https://en.wikipedia.org/wiki/John_Wick_Hex
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Jotun: Valhalla Edition". Wikipedia. https://en.wikipedia.org/wiki/Jotun:_Valhalla_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Jurassic World Evolution". Wikipedia. https://en.wikipedia.org/wiki/Jurassic_World_Evolution
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Jurassic World Evolution 2". Wikipedia. https://en.wikipedia.org/wiki/Jurassic_World_Evolution_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Just Cause 3". Wikipedia. https://en.wikipedia.org/wiki/Just_Cause_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Just Cause 4". Wikipedia. https://en.wikipedia.org/wiki/Just_Cause_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Keep Talking And Nobody Explodes". Wikipedia. https://en.wikipedia.org/wiki/Keep_Talking_And_Nobody_Explodes
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Kena: Bridge Of Spirits". Wikipedia. https://en.wikipedia.org/wiki/Kena:_Bridge_Of_Spirits
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Kentucky Route Zero". Wikipedia. https://en.wikipedia.org/wiki/Kentucky_Route_Zero
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Kerbal Space Program". Wikipedia. https://en.wikipedia.org/wiki/Kerbal_Space_Program
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Killzone Shadow Fall". Wikipedia. https://en.wikipedia.org/wiki/Killzone_Shadow_Fall
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Killzone: Mercenary". Wikipedia. https://en.wikipedia.org/wiki/Killzone:_Mercenary
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Kingdom Come: Deliverance". Wikipedia. https://en.wikipedia.org/wiki/Kingdom_Come:_Deliverance
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Kingdom Hearts Iii". Wikipedia. https://en.wikipedia.org/wiki/Kingdom_Hearts_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Kingdom: New Lands". Wikipedia. https://en.wikipedia.org/wiki/Kingdom:_New_Lands
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Kingdom: Two Crowns". Wikipedia. https://en.wikipedia.org/wiki/Kingdom:_Two_Crowns
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Knockout City". Wikipedia. https://en.wikipedia.org/wiki/Knockout_City
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lara Croft Go". Wikipedia. https://en.wikipedia.org/wiki/Lara_Croft_Go
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Last Day Of June". Wikipedia. https://en.wikipedia.org/wiki/Last_Day_Of_June
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Layers Of Fear". Wikipedia. https://en.wikipedia.org/wiki/Layers_Of_Fear
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Layers Of Fear 2". Wikipedia. https://en.wikipedia.org/wiki/Layers_Of_Fear_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Legends Of Runeterra". Wikipedia. https://en.wikipedia.org/wiki/Legends_Of_Runeterra
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lego Batman 3: Beyond Gotham". Wikipedia. https://en.wikipedia.org/wiki/Lego_Batman_3:_Beyond_Gotham
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lego Bricktales". Wikipedia. https://en.wikipedia.org/wiki/Lego_Bricktales
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lego City Undercover". Wikipedia. https://en.wikipedia.org/wiki/Lego_City_Undercover
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lego Jurassic World". Wikipedia. https://en.wikipedia.org/wiki/Lego_Jurassic_World
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lego Marvel'S Avengers". Wikipedia. https://en.wikipedia.org/wiki/Lego_Marvel'S_Avengers
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lego Worlds". Wikipedia. https://en.wikipedia.org/wiki/Lego_Worlds
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lethal League". Wikipedia. https://en.wikipedia.org/wiki/Lethal_League
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lethal League Blaze". Wikipedia. https://en.wikipedia.org/wiki/Lethal_League_Blaze
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Life Is Strange 2". Wikipedia. https://en.wikipedia.org/wiki/Life_Is_Strange_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Life Is Strange: Before The Storm". Wikipedia. https://en.wikipedia.org/wiki/Life_Is_Strange:_Before_The_Storm
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Life Is Strange: True Colors". Wikipedia. https://en.wikipedia.org/wiki/Life_Is_Strange:_True_Colors
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Little Big Workshop". Wikipedia. https://en.wikipedia.org/wiki/Little_Big_Workshop
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Little Nightmares". Wikipedia. https://en.wikipedia.org/wiki/Little_Nightmares
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Little Nightmares Ii". Wikipedia. https://en.wikipedia.org/wiki/Little_Nightmares_Ii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Loadout". Wikipedia. https://en.wikipedia.org/wiki/Loadout
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Loop Hero". Wikipedia. https://en.wikipedia.org/wiki/Loop_Hero
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Loot Rascals". Wikipedia. https://en.wikipedia.org/wiki/Loot_Rascals
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lords Of The Fallen". Wikipedia. https://en.wikipedia.org/wiki/Lords_Of_The_Fallen
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lords Of Xulima". Wikipedia. https://en.wikipedia.org/wiki/Lords_Of_Xulima
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lost Ember". Wikipedia. https://en.wikipedia.org/wiki/Lost_Ember
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lost In Random". Wikipedia. https://en.wikipedia.org/wiki/Lost_In_Random
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lost Planet 3". Wikipedia. https://en.wikipedia.org/wiki/Lost_Planet_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lovely Planet". Wikipedia. https://en.wikipedia.org/wiki/Lovely_Planet
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Luftrausers". Wikipedia. https://en.wikipedia.org/wiki/Luftrausers
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Luigi'S Mansion 3". Wikipedia. https://en.wikipedia.org/wiki/Luigi'S_Mansion_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Lumino City". Wikipedia. https://en.wikipedia.org/wiki/Lumino_City
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mafia Iii". Wikipedia. https://en.wikipedia.org/wiki/Mafia_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mafia: Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Mafia:_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Magicka 2". Wikipedia. https://en.wikipedia.org/wiki/Magicka_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mainlining". Wikipedia. https://en.wikipedia.org/wiki/Mainlining
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mario + Rabbids Kingdom Battle". Wikipedia. https://en.wikipedia.org/wiki/Mario_+_Rabbids_Kingdom_Battle
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mark Of The Ninja: Remastered". Wikipedia. https://en.wikipedia.org/wiki/Mark_Of_The_Ninja:_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Marvel Snap". Wikipedia. https://en.wikipedia.org/wiki/Marvel_Snap
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Marvel'S Guardians Of The Galaxy". Wikipedia. https://en.wikipedia.org/wiki/Marvel'S_Guardians_Of_The_Galaxy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Marvel'S Midnight Suns". Wikipedia. https://en.wikipedia.org/wiki/Marvel'S_Midnight_Suns
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mass Effect 3: Citadel". Wikipedia. https://en.wikipedia.org/wiki/Mass_Effect_3:_Citadel
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mass Effect: Andromeda". Wikipedia. https://en.wikipedia.org/wiki/Mass_Effect:_Andromeda
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mass Effect: Legendary Edition". Wikipedia. https://en.wikipedia.org/wiki/Mass_Effect:_Legendary_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Massive Chalice". Wikipedia. https://en.wikipedia.org/wiki/Massive_Chalice
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Masters Of Anima". Wikipedia. https://en.wikipedia.org/wiki/Masters_Of_Anima
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Matterfall". Wikipedia. https://en.wikipedia.org/wiki/Matterfall
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mercenary Kings". Wikipedia. https://en.wikipedia.org/wiki/Mercenary_Kings
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Metal Gear Rising: Revengeance". Wikipedia. https://en.wikipedia.org/wiki/Metal_Gear_Rising:_Revengeance
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Metrico+". Wikipedia. https://en.wikipedia.org/wiki/Metrico+
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Metro 2033 Redux". Wikipedia. https://en.wikipedia.org/wiki/Metro_2033_Redux
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Metro Exodus". Wikipedia. https://en.wikipedia.org/wiki/Metro_Exodus
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Metro: Last Light". Wikipedia. https://en.wikipedia.org/wiki/Metro:_Last_Light
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Metroid Prime Remastered". Wikipedia. https://en.wikipedia.org/wiki/Metroid_Prime_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Microsoft Flight Simulator 2020". Wikipedia. https://en.wikipedia.org/wiki/Microsoft_Flight_Simulator_2020
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Middle-Earth: Shadow Of Mordor". Wikipedia. https://en.wikipedia.org/wiki/Middle-Earth:_Shadow_Of_Mordor
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Middle-Earth: Shadow Of War". Wikipedia. https://en.wikipedia.org/wiki/Middle-Earth:_Shadow_Of_War
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mighty No. 9". Wikipedia. https://en.wikipedia.org/wiki/Mighty_No._9
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Minecraft: Dungeons". Wikipedia. https://en.wikipedia.org/wiki/Minecraft:_Dungeons
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mirror'S Edge Catalyst". Wikipedia. https://en.wikipedia.org/wiki/Mirror'S_Edge_Catalyst
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Monaco: What'S Yours Is Mine". Wikipedia. https://en.wikipedia.org/wiki/Monaco:_What'S_Yours_Is_Mine
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Monster Hunter Stories 2: Wings Of Ruin". Wikipedia. https://en.wikipedia.org/wiki/Monster_Hunter_Stories_2:_Wings_Of_Ruin
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Monster Hunter World: Iceborne". Wikipedia. https://en.wikipedia.org/wiki/Monster_Hunter_World:_Iceborne
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Monster Hunter: World". Wikipedia. https://en.wikipedia.org/wiki/Monster_Hunter:_World
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Monster Prom". Wikipedia. https://en.wikipedia.org/wiki/Monster_Prom
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Monument Valley 2". Wikipedia. https://en.wikipedia.org/wiki/Monument_Valley_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mortal Kombat 11". Wikipedia. https://en.wikipedia.org/wiki/Mortal_Kombat_11
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mortal Kombat X". Wikipedia. https://en.wikipedia.org/wiki/Mortal_Kombat_X
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mortal Shell". Wikipedia. https://en.wikipedia.org/wiki/Mortal_Shell
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mothergunship". Wikipedia. https://en.wikipedia.org/wiki/Mothergunship
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Motorsport Manager". Wikipedia. https://en.wikipedia.org/wiki/Motorsport_Manager
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mount & Blade Ii: Bannerlord". Wikipedia. https://en.wikipedia.org/wiki/Mount_&_Blade_Ii:_Bannerlord
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Mudrunner". Wikipedia. https://en.wikipedia.org/wiki/Mudrunner
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Murdered: Soul Suspect". Wikipedia. https://en.wikipedia.org/wiki/Murdered:_Soul_Suspect
Accessed on July 3, 2023.

Wikipedia. (n.d.). "My Friend Pedro". Wikipedia. https://en.wikipedia.org/wiki/My_Friend_Pedro
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Naruto Shippuden: Ultimate Ninja Storm Revolution". Wikipedia. https://en.wikipedia.org/wiki/Naruto_Shippuden:_Ultimate_Ninja_Storm_Revolution
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Necromunda: Hired Gun". Wikipedia. https://en.wikipedia.org/wiki/Necromunda:_Hired_Gun
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Neon White". Wikipedia. https://en.wikipedia.org/wiki/Neon_White
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Neverending Nightmares". Wikipedia. https://en.wikipedia.org/wiki/Neverending_Nightmares
Accessed on July 3, 2023.

Wikipedia. (n.d.). "New Pokémon Snap". Wikipedia. https://en.wikipedia.org/wiki/New_Pokémon_Snap
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Night In The Woods". Wikipedia. https://en.wikipedia.org/wiki/Night_In_The_Woods
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Nights Of Azure". Wikipedia. https://en.wikipedia.org/wiki/Nights_Of_Azure
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Nioh". Wikipedia. https://en.wikipedia.org/wiki/Nioh
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Nioh 2". Wikipedia. https://en.wikipedia.org/wiki/Nioh_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Nioh: Complete Edition". Wikipedia. https://en.wikipedia.org/wiki/Nioh:_Complete_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "No Man'S Sky". Wikipedia. https://en.wikipedia.org/wiki/No_Man'S_Sky
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Nobody Saves The World". Wikipedia. https://en.wikipedia.org/wiki/Nobody_Saves_The_World
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Nova-111". Wikipedia. https://en.wikipedia.org/wiki/Nova-111
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Observer: System Redux". Wikipedia. https://en.wikipedia.org/wiki/Observer:_System_Redux
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Oddworld: New 'N' Tasty". Wikipedia. https://en.wikipedia.org/wiki/Oddworld:_New_'N'_Tasty
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Oddworld: Soulstorm". Wikipedia. https://en.wikipedia.org/wiki/Oddworld:_Soulstorm
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Odin Sphere Leifthrasir". Wikipedia. https://en.wikipedia.org/wiki/Odin_Sphere_Leifthrasir
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Omensight". Wikipedia. https://en.wikipedia.org/wiki/Omensight
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Omerta - City Of Gangsters". Wikipedia. https://en.wikipedia.org/wiki/Omerta_-_City_Of_Gangsters
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Oninaki". Wikipedia. https://en.wikipedia.org/wiki/Oninaki
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Only If". Wikipedia. https://en.wikipedia.org/wiki/Only_If
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Orcs Must Die! Unchained". Wikipedia. https://en.wikipedia.org/wiki/Orcs_Must_Die!_Unchained
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Outer Wilds". Wikipedia. https://en.wikipedia.org/wiki/Outer_Wilds
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Outlast". Wikipedia. https://en.wikipedia.org/wiki/Outlast
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Outlast 2". Wikipedia. https://en.wikipedia.org/wiki/Outlast_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Outriders Worldslayer". Wikipedia. https://en.wikipedia.org/wiki/Outriders_Worldslayer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Outward". Wikipedia. https://en.wikipedia.org/wiki/Outward
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Overcooked". Wikipedia. https://en.wikipedia.org/wiki/Overcooked
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Overcooked! 2". Wikipedia. https://en.wikipedia.org/wiki/Overcooked!_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Overcooked! All You Can Eat". Wikipedia. https://en.wikipedia.org/wiki/Overcooked!_All_You_Can_Eat
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Overlord: Fellowship Of Evil". Wikipedia. https://en.wikipedia.org/wiki/Overlord:_Fellowship_Of_Evil
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Override: Mech City Brawl". Wikipedia. https://en.wikipedia.org/wiki/Override:_Mech_City_Brawl
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Overwatch 2". Wikipedia. https://en.wikipedia.org/wiki/Overwatch_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Oxenfree". Wikipedia. https://en.wikipedia.org/wiki/Oxenfree
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Panzer Dragoon: Remake". Wikipedia. https://en.wikipedia.org/wiki/Panzer_Dragoon:_Remake
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Paper Beast". Wikipedia. https://en.wikipedia.org/wiki/Paper_Beast
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Papers, Please". Wikipedia. https://en.wikipedia.org/wiki/Papers,_Please
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Paradise Killer". Wikipedia. https://en.wikipedia.org/wiki/Paradise_Killer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Parappa The Rapper 2". Wikipedia. https://en.wikipedia.org/wiki/Parappa_The_Rapper_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pathfinder: Kingmaker". Wikipedia. https://en.wikipedia.org/wiki/Pathfinder:_Kingmaker
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pathologic 2". Wikipedia. https://en.wikipedia.org/wiki/Pathologic_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Payday 2". Wikipedia. https://en.wikipedia.org/wiki/Payday_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Persona 5". Wikipedia. https://en.wikipedia.org/wiki/Persona_5
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Persona 5 Royal". Wikipedia. https://en.wikipedia.org/wiki/Persona_5_Royal
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Persona 5 Strikers". Wikipedia. https://en.wikipedia.org/wiki/Persona_5_Strikers
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Phantom Doctrine". Wikipedia. https://en.wikipedia.org/wiki/Phantom_Doctrine
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Phoenix Wright: Ace Attorney - Dual Destinies". Wikipedia. https://en.wikipedia.org/wiki/Phoenix_Wright:_Ace_Attorney_-_Dual_Destinies
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Phoenix Wright: Ace Attorney Trilogy". Wikipedia. https://en.wikipedia.org/wiki/Phoenix_Wright:_Ace_Attorney_Trilogy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pikmin 3". Wikipedia. https://en.wikipedia.org/wiki/Pikmin_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pillars Of Eternity Ii: Deadfire". Wikipedia. https://en.wikipedia.org/wiki/Pillars_Of_Eternity_Ii:_Deadfire
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pit People". Wikipedia. https://en.wikipedia.org/wiki/Pit_People
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pix The Cat". Wikipedia. https://en.wikipedia.org/wiki/Pix_The_Cat
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pixel Piracy". Wikipedia. https://en.wikipedia.org/wiki/Pixel_Piracy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Plague Inc: Evolved". Wikipedia. https://en.wikipedia.org/wiki/Plague_Inc:_Evolved
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Planar Conquest". Wikipedia. https://en.wikipedia.org/wiki/Planar_Conquest
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Planescape: Torment: Enhanced Edition". Wikipedia. https://en.wikipedia.org/wiki/Planescape:_Torment:_Enhanced_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Planet Coaster". Wikipedia. https://en.wikipedia.org/wiki/Planet_Coaster
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Planet Zoo". Wikipedia. https://en.wikipedia.org/wiki/Planet_Zoo
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Planetbase". Wikipedia. https://en.wikipedia.org/wiki/Planetbase
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Poison Control". Wikipedia. https://en.wikipedia.org/wiki/Poison_Control
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Portal Knights". Wikipedia. https://en.wikipedia.org/wiki/Portal_Knights
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Prime World: Defenders". Wikipedia. https://en.wikipedia.org/wiki/Prime_World:_Defenders
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Prison Architect". Wikipedia. https://en.wikipedia.org/wiki/Prison_Architect
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pro Evolution Soccer 2017". Wikipedia. https://en.wikipedia.org/wiki/Pro_Evolution_Soccer_2017
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pro Evolution Soccer 2019". Wikipedia. https://en.wikipedia.org/wiki/Pro_Evolution_Soccer_2019
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Prodeus". Wikipedia. https://en.wikipedia.org/wiki/Prodeus
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Project Cars 2". Wikipedia. https://en.wikipedia.org/wiki/Project_Cars_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Psychonauts 2". Wikipedia. https://en.wikipedia.org/wiki/Psychonauts_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pubg Mobile". Wikipedia. https://en.wikipedia.org/wiki/Pubg_Mobile
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Punch Club". Wikipedia. https://en.wikipedia.org/wiki/Punch_Club
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Pure Pool". Wikipedia. https://en.wikipedia.org/wiki/Pure_Pool
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Quantum Break". Wikipedia. https://en.wikipedia.org/wiki/Quantum_Break
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rage 2". Wikipedia. https://en.wikipedia.org/wiki/Rage_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Raiden V: Director'S Cut". Wikipedia. https://en.wikipedia.org/wiki/Raiden_V:_Director'S_Cut
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rain World". Wikipedia. https://en.wikipedia.org/wiki/Rain_World
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ratchet & Clank: Rift Apart". Wikipedia. https://en.wikipedia.org/wiki/Ratchet_&_Clank:_Rift_Apart
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rebel Galaxy". Wikipedia. https://en.wikipedia.org/wiki/Rebel_Galaxy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Recore". Wikipedia. https://en.wikipedia.org/wiki/Recore
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Red Dead Redemption 2". Wikipedia. https://en.wikipedia.org/wiki/Red_Dead_Redemption_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Redfall". Wikipedia. https://en.wikipedia.org/wiki/Redfall
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Remnant: From The Ashes". Wikipedia. https://en.wikipedia.org/wiki/Remnant:_From_The_Ashes
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Remothered: Broken Porcelain". Wikipedia. https://en.wikipedia.org/wiki/Remothered:_Broken_Porcelain
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Remothered: Tormented Fathers". Wikipedia. https://en.wikipedia.org/wiki/Remothered:_Tormented_Fathers
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Resident Evil 2". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Resident Evil 3". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Resident Evil 4". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Resident Evil 7: Biohazard". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_7:_Biohazard
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Resident Evil: Resistance". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil:_Resistance
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Reventure". Wikipedia. https://en.wikipedia.org/wiki/Reventure
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ride 2". Wikipedia. https://en.wikipedia.org/wiki/Ride_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ride 4". Wikipedia. https://en.wikipedia.org/wiki/Ride_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ring Fit Adventure". Wikipedia. https://en.wikipedia.org/wiki/Ring_Fit_Adventure
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rise Of The Triad". Wikipedia. https://en.wikipedia.org/wiki/Rise_Of_The_Triad
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Risen 3: Titan Lords". Wikipedia. https://en.wikipedia.org/wiki/Risen_3:_Titan_Lords
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Risk Of Rain". Wikipedia. https://en.wikipedia.org/wiki/Risk_Of_Rain
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Road 96". Wikipedia. https://en.wikipedia.org/wiki/Road_96
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Road Redemption". Wikipedia. https://en.wikipedia.org/wiki/Road_Redemption
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Robonauts". Wikipedia. https://en.wikipedia.org/wiki/Robonauts
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rock Of Ages 3: Make & Break". Wikipedia. https://en.wikipedia.org/wiki/Rock_Of_Ages_3:_Make_&_Break
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rocket Arena". Wikipedia. https://en.wikipedia.org/wiki/Rocket_Arena
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rogue Company". Wikipedia. https://en.wikipedia.org/wiki/Rogue_Company
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rogue Legacy". Wikipedia. https://en.wikipedia.org/wiki/Rogue_Legacy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rogue Trooper Redux". Wikipedia. https://en.wikipedia.org/wiki/Rogue_Trooper_Redux
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Rollerdrome". Wikipedia. https://en.wikipedia.org/wiki/Rollerdrome
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ruined King: A League Of Legends Story". Wikipedia. https://en.wikipedia.org/wiki/Ruined_King:_A_League_Of_Legends_Story
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ryse: Son Of Rome". Wikipedia. https://en.wikipedia.org/wiki/Ryse:_Son_Of_Rome
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sacred Citadel". Wikipedia. https://en.wikipedia.org/wiki/Sacred_Citadel
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Saints Row Iv". Wikipedia. https://en.wikipedia.org/wiki/Saints_Row_Iv
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Saints Row: Gat Out Of Hell". Wikipedia. https://en.wikipedia.org/wiki/Saints_Row:_Gat_Out_Of_Hell
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Samorost 3". Wikipedia. https://en.wikipedia.org/wiki/Samorost_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sanctum 2". Wikipedia. https://en.wikipedia.org/wiki/Sanctum_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sayonara Wild Hearts". Wikipedia. https://en.wikipedia.org/wiki/Sayonara_Wild_Hearts
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Scarlet Nexus". Wikipedia. https://en.wikipedia.org/wiki/Scarlet_Nexus
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Scourge: Outbreak". Wikipedia. https://en.wikipedia.org/wiki/Scourge:_Outbreak
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Screencheat". Wikipedia. https://en.wikipedia.org/wiki/Screencheat
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sea Of Solitude". Wikipedia. https://en.wikipedia.org/wiki/Sea_Of_Solitude
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sea Of Thieves". Wikipedia. https://en.wikipedia.org/wiki/Sea_Of_Thieves
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Secret World Legends". Wikipedia. https://en.wikipedia.org/wiki/Secret_World_Legends
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sekiro: Shadows Die Twice". Wikipedia. https://en.wikipedia.org/wiki/Sekiro:_Shadows_Die_Twice
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Serial Cleaner". Wikipedia. https://en.wikipedia.org/wiki/Serial_Cleaner
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shadow Of The Colossus". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Of_The_Colossus
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shadow Of The Tomb Raider". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Of_The_Tomb_Raider
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shadow Warrior 2". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Warrior_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shadow Warrior 3". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Warrior_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shadwen". Wikipedia. https://en.wikipedia.org/wiki/Shadwen
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shardlight". Wikipedia. https://en.wikipedia.org/wiki/Shardlight
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shenmue Iii". Wikipedia. https://en.wikipedia.org/wiki/Shenmue_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shin Megami Tensei Iv". Wikipedia. https://en.wikipedia.org/wiki/Shin_Megami_Tensei_Iv
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shin Megami Tensei V". Wikipedia. https://en.wikipedia.org/wiki/Shin_Megami_Tensei_V
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shining Resonance Refrain". Wikipedia. https://en.wikipedia.org/wiki/Shining_Resonance_Refrain
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shovel Knight". Wikipedia. https://en.wikipedia.org/wiki/Shovel_Knight
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Shovel Knight: Treasure Trove". Wikipedia. https://en.wikipedia.org/wiki/Shovel_Knight:_Treasure_Trove
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Skatebird". Wikipedia. https://en.wikipedia.org/wiki/Skatebird
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Skulls Of The Shogun". Wikipedia. https://en.wikipedia.org/wiki/Skulls_Of_The_Shogun
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sleeping Dogs: Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Sleeping_Dogs:_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Slime Rancher". Wikipedia. https://en.wikipedia.org/wiki/Slime_Rancher
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sniper Elite 4". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Elite_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sniper Elite 5". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Elite_5
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sniper Elite V2 Remastered". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Elite_V2_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sniper Ghost Warrior Contracts". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Ghost_Warrior_Contracts
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sniper: Ghost Warrior 2". Wikipedia. https://en.wikipedia.org/wiki/Sniper:_Ghost_Warrior_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sniper: Ghost Warrior 3". Wikipedia. https://en.wikipedia.org/wiki/Sniper:_Ghost_Warrior_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sol Cresta". Wikipedia. https://en.wikipedia.org/wiki/Sol_Cresta
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Song Of The Deep". Wikipedia. https://en.wikipedia.org/wiki/Song_Of_The_Deep
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sonic Forces". Wikipedia. https://en.wikipedia.org/wiki/Sonic_Forces
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sonic Lost World". Wikipedia. https://en.wikipedia.org/wiki/Sonic_Lost_World
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sonic Mania". Wikipedia. https://en.wikipedia.org/wiki/Sonic_Mania
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Soul Hackers 2". Wikipedia. https://en.wikipedia.org/wiki/Soul_Hackers_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Soul Sacrifice Delta". Wikipedia. https://en.wikipedia.org/wiki/Soul_Sacrifice_Delta
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Soulcalibur Vi". Wikipedia. https://en.wikipedia.org/wiki/Soulcalibur_Vi
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Space Engineers". Wikipedia. https://en.wikipedia.org/wiki/Space_Engineers
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Space Hulk: Deathwing". Wikipedia. https://en.wikipedia.org/wiki/Space_Hulk:_Deathwing
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Space Hulk: Tactics". Wikipedia. https://en.wikipedia.org/wiki/Space_Hulk:_Tactics
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Space Run". Wikipedia. https://en.wikipedia.org/wiki/Space_Run
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Spellbreak". Wikipedia. https://en.wikipedia.org/wiki/Spellbreak
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Spiritfarer". Wikipedia. https://en.wikipedia.org/wiki/Spiritfarer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Splatoon 2". Wikipedia. https://en.wikipedia.org/wiki/Splatoon_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Spyro Reignited Trilogy". Wikipedia. https://en.wikipedia.org/wiki/Spyro_Reignited_Trilogy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Star Fox Zero". Wikipedia. https://en.wikipedia.org/wiki/Star_Fox_Zero
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Star Trek: Bridge Crew". Wikipedia. https://en.wikipedia.org/wiki/Star_Trek:_Bridge_Crew
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Star Wars Jedi: Fallen Order". Wikipedia. https://en.wikipedia.org/wiki/Star_Wars_Jedi:_Fallen_Order
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Star Wars Jedi: Survivor". Wikipedia. https://en.wikipedia.org/wiki/Star_Wars_Jedi:_Survivor
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Star Wars: Squadrons". Wikipedia. https://en.wikipedia.org/wiki/Star_Wars:_Squadrons
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Stardew Valley". Wikipedia. https://en.wikipedia.org/wiki/Stardew_Valley
Accessed on July 3, 2023.

Wikipedia. (n.d.). "State Of Decay 2". Wikipedia. https://en.wikipedia.org/wiki/State_Of_Decay_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Steamworld Dig". Wikipedia. https://en.wikipedia.org/wiki/Steamworld_Dig
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Steamworld Dig 2". Wikipedia. https://en.wikipedia.org/wiki/Steamworld_Dig_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Steelrising". Wikipedia. https://en.wikipedia.org/wiki/Steelrising
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Stranded Deep". Wikipedia. https://en.wikipedia.org/wiki/Stranded_Deep
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Strange Brigade". Wikipedia. https://en.wikipedia.org/wiki/Strange_Brigade
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Stranger Of Paradise: Final Fantasy Origin". Wikipedia. https://en.wikipedia.org/wiki/Stranger_Of_Paradise:_Final_Fantasy_Origin
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Street Fighter V". Wikipedia. https://en.wikipedia.org/wiki/Street_Fighter_V
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Streets Of Rage 4". Wikipedia. https://en.wikipedia.org/wiki/Streets_Of_Rage_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Stronghold Crusader 2". Wikipedia. https://en.wikipedia.org/wiki/Stronghold_Crusader_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Styx: Master Of Shadows". Wikipedia. https://en.wikipedia.org/wiki/Styx:_Master_Of_Shadows
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Styx: Shards Of Darkness". Wikipedia. https://en.wikipedia.org/wiki/Styx:_Shards_Of_Darkness
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Subnautica". Wikipedia. https://en.wikipedia.org/wiki/Subnautica
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Subnautica: Below Zero". Wikipedia. https://en.wikipedia.org/wiki/Subnautica:_Below_Zero
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sudden Strike 4". Wikipedia. https://en.wikipedia.org/wiki/Sudden_Strike_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sundered". Wikipedia. https://en.wikipedia.org/wiki/Sundered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sunless Sea". Wikipedia. https://en.wikipedia.org/wiki/Sunless_Sea
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sunset Overdrive". Wikipedia. https://en.wikipedia.org/wiki/Sunset_Overdrive
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Super Time Force Ultra". Wikipedia. https://en.wikipedia.org/wiki/Super_Time_Force_Ultra
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Superhot". Wikipedia. https://en.wikipedia.org/wiki/Superhot
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Surgeon Simulator". Wikipedia. https://en.wikipedia.org/wiki/Surgeon_Simulator
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Surviving Mars". Wikipedia. https://en.wikipedia.org/wiki/Surviving_Mars
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sword Art Online Re: Hollow Fragment". Wikipedia. https://en.wikipedia.org/wiki/Sword_Art_Online_Re:_Hollow_Fragment
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sword Art Online: Fatal Bullet". Wikipedia. https://en.wikipedia.org/wiki/Sword_Art_Online:_Fatal_Bullet
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sword Art Online: Lost Song". Wikipedia. https://en.wikipedia.org/wiki/Sword_Art_Online:_Lost_Song
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sword Coast Legends". Wikipedia. https://en.wikipedia.org/wiki/Sword_Coast_Legends
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Syberia 3". Wikipedia. https://en.wikipedia.org/wiki/Syberia_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Sébastien Loeb Rally Evo". Wikipedia. https://en.wikipedia.org/wiki/Sébastien_Loeb_Rally_Evo
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tactics Ogre: Reborn". Wikipedia. https://en.wikipedia.org/wiki/Tactics_Ogre:_Reborn
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tales Of Arise". Wikipedia. https://en.wikipedia.org/wiki/Tales_Of_Arise
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tales Of Vesperia: Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Tales_Of_Vesperia:_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tearaway Unfolded". Wikipedia. https://en.wikipedia.org/wiki/Tearaway_Unfolded
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Technobabylon". Wikipedia. https://en.wikipedia.org/wiki/Technobabylon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Teenage Mutant Ninja Turtles: Shredder'S Revenge". Wikipedia. https://en.wikipedia.org/wiki/Teenage_Mutant_Ninja_Turtles:_Shredder'S_Revenge
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tekken 7". Wikipedia. https://en.wikipedia.org/wiki/Tekken_7
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Temtem". Wikipedia. https://en.wikipedia.org/wiki/Temtem
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tennis World Tour 2". Wikipedia. https://en.wikipedia.org/wiki/Tennis_World_Tour_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Terra Nil". Wikipedia. https://en.wikipedia.org/wiki/Terra_Nil
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Teslagrad". Wikipedia. https://en.wikipedia.org/wiki/Teslagrad
Accessed on July 3, 2023.

Wikipedia. (n.d.). "That Dragon, Cancer". Wikipedia. https://en.wikipedia.org/wiki/That_Dragon,_Cancer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Artful Escape". Wikipedia. https://en.wikipedia.org/wiki/The_Artful_Escape
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Banner Saga: Factions". Wikipedia. https://en.wikipedia.org/wiki/The_Banner_Saga:_Factions
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Binding Of Isaac: Rebirth". Wikipedia. https://en.wikipedia.org/wiki/The_Binding_Of_Isaac:_Rebirth
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Book Of Unwritten Tales 2". Wikipedia. https://en.wikipedia.org/wiki/The_Book_Of_Unwritten_Tales_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Callisto Protocol". Wikipedia. https://en.wikipedia.org/wiki/The_Callisto_Protocol
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Crew 2". Wikipedia. https://en.wikipedia.org/wiki/The_Crew_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Dark Pictures Anthology: Little Hope". Wikipedia. https://en.wikipedia.org/wiki/The_Dark_Pictures_Anthology:_Little_Hope
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Dark Pictures Anthology: Man Of Medan". Wikipedia. https://en.wikipedia.org/wiki/The_Dark_Pictures_Anthology:_Man_Of_Medan
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Deadly Tower Of Monsters". Wikipedia. https://en.wikipedia.org/wiki/The_Deadly_Tower_Of_Monsters
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Elder Scrolls Online". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls_Online
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Elder Scrolls Online: Tamriel Unlimited". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls_Online:_Tamriel_Unlimited
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Elder Scrolls V: Skyrim Special Edition". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls_V:_Skyrim_Special_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Elder Scrolls: Legends". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls:_Legends
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Evil Within". Wikipedia. https://en.wikipedia.org/wiki/The_Evil_Within
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Evil Within 2". Wikipedia. https://en.wikipedia.org/wiki/The_Evil_Within_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Falconeer". Wikipedia. https://en.wikipedia.org/wiki/The_Falconeer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Flame In The Flood". Wikipedia. https://en.wikipedia.org/wiki/The_Flame_In_The_Flood
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Forgotten City". Wikipedia. https://en.wikipedia.org/wiki/The_Forgotten_City
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Gardens Between". Wikipedia. https://en.wikipedia.org/wiki/The_Gardens_Between
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Golf Club". Wikipedia. https://en.wikipedia.org/wiki/The_Golf_Club
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Hong Kong Massacre". Wikipedia. https://en.wikipedia.org/wiki/The_Hong_Kong_Massacre
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Incredible Adventures Of Van Helsing". Wikipedia. https://en.wikipedia.org/wiki/The_Incredible_Adventures_Of_Van_Helsing
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Incredible Adventures Of Van Helsing Ii". Wikipedia. https://en.wikipedia.org/wiki/The_Incredible_Adventures_Of_Van_Helsing_Ii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Incredible Adventures Of Van Helsing Iii". Wikipedia. https://en.wikipedia.org/wiki/The_Incredible_Adventures_Of_Van_Helsing_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Infectious Madness Of Doctor Dekker". Wikipedia. https://en.wikipedia.org/wiki/The_Infectious_Madness_Of_Doctor_Dekker
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Journey Down: Chapter Three". Wikipedia. https://en.wikipedia.org/wiki/The_Journey_Down:_Chapter_Three
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Last Guardian". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Guardian
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Last Of Us". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Last Of Us Part I". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us_Part_I
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Last Of Us Part Ii". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us_Part_Ii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Last Of Us Remastered". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us_Remastered
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Last Tinker: City Of Colors". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Tinker:_City_Of_Colors
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Legend Of Heroes: Trails Of Cold Steel". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Heroes:_Trails_Of_Cold_Steel
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Legend Of Heroes: Trails Of Cold Steel Iii". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Heroes:_Trails_Of_Cold_Steel_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Legend Of Zelda: A Link Between Worlds". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_A_Link_Between_Worlds
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Legend Of Zelda: Breath Of The Wild". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_Breath_Of_The_Wild
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Legend Of Zelda: Link'S Awakening". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_Link'S_Awakening
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Legend Of Zelda: Tears Of The Kingdom". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_Tears_Of_The_Kingdom
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Lego Ninjago Movie Video Game". Wikipedia. https://en.wikipedia.org/wiki/The_Lego_Ninjago_Movie_Video_Game
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Long Dark". Wikipedia. https://en.wikipedia.org/wiki/The_Long_Dark
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Lord Of The Rings: Gollum". Wikipedia. https://en.wikipedia.org/wiki/The_Lord_Of_The_Rings:_Gollum
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Occupation". Wikipedia. https://en.wikipedia.org/wiki/The_Occupation
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Order: 1886". Wikipedia. https://en.wikipedia.org/wiki/The_Order:_1886
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Pathless". Wikipedia. https://en.wikipedia.org/wiki/The_Pathless
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Showdown Effect". Wikipedia. https://en.wikipedia.org/wiki/The_Showdown_Effect
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Silver Case". Wikipedia. https://en.wikipedia.org/wiki/The_Silver_Case
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Sims 4". Wikipedia. https://en.wikipedia.org/wiki/The_Sims_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Sinking City". Wikipedia. https://en.wikipedia.org/wiki/The_Sinking_City
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Suicide Of Rachel Foster". Wikipedia. https://en.wikipedia.org/wiki/The_Suicide_Of_Rachel_Foster
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Surge". Wikipedia. https://en.wikipedia.org/wiki/The_Surge
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Surge 2". Wikipedia. https://en.wikipedia.org/wiki/The_Surge_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Swapper". Wikipedia. https://en.wikipedia.org/wiki/The_Swapper
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Swords Of Ditto". Wikipedia. https://en.wikipedia.org/wiki/The_Swords_Of_Ditto
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Talos Principle". Wikipedia. https://en.wikipedia.org/wiki/The_Talos_Principle
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Technomancer". Wikipedia. https://en.wikipedia.org/wiki/The_Technomancer
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Touryst". Wikipedia. https://en.wikipedia.org/wiki/The_Touryst
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Vanishing Of Ethan Carter". Wikipedia. https://en.wikipedia.org/wiki/The_Vanishing_Of_Ethan_Carter
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Vanishing Of Ethan Carter Redux". Wikipedia. https://en.wikipedia.org/wiki/The_Vanishing_Of_Ethan_Carter_Redux
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Walking Dead: A New Frontier". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_A_New_Frontier
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Walking Dead: Michonne". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Michonne
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Walking Dead: Saints & Sinners". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Saints_&_Sinners
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Walking Dead: Season 2". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Season_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Walking Dead: Survival Instinct". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Survival_Instinct
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Witcher 3: Wild Hunt". Wikipedia. https://en.wikipedia.org/wiki/The_Witcher_3:_Wild_Hunt
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Witcher 3: Wild Hunt – Hearts Of Stone". Wikipedia. https://en.wikipedia.org/wiki/The_Witcher_3:_Wild_Hunt_–_Hearts_Of_Stone
Accessed on July 3, 2023.

Wikipedia. (n.d.). "The Wolf Among Us". Wikipedia. https://en.wikipedia.org/wiki/The_Wolf_Among_Us
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Thimbleweed Park". Wikipedia. https://en.wikipedia.org/wiki/Thimbleweed_Park
Accessed on July 3, 2023.

Wikipedia. (n.d.). "This Is The Police". Wikipedia. https://en.wikipedia.org/wiki/This_Is_The_Police
Accessed on July 3, 2023.

Wikipedia. (n.d.). "This Is The Police 2". Wikipedia. https://en.wikipedia.org/wiki/This_Is_The_Police_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "This War Of Mine". Wikipedia. https://en.wikipedia.org/wiki/This_War_Of_Mine
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Timespinner". Wikipedia. https://en.wikipedia.org/wiki/Timespinner
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tiny Tina'S Wonderlands". Wikipedia. https://en.wikipedia.org/wiki/Tiny_Tina'S_Wonderlands
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Titanfall 2". Wikipedia. https://en.wikipedia.org/wiki/Titanfall_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Toejam & Earl: Back In The Groove". Wikipedia. https://en.wikipedia.org/wiki/Toejam_&_Earl:_Back_In_The_Groove
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tokyo 42". Wikipedia. https://en.wikipedia.org/wiki/Tokyo_42
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tom Clancy'S Ghost Recon Wildlands". Wikipedia. https://en.wikipedia.org/wiki/Tom_Clancy'S_Ghost_Recon_Wildlands
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tom Clancy'S Rainbow Six Siege". Wikipedia. https://en.wikipedia.org/wiki/Tom_Clancy'S_Rainbow_Six_Siege
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tomb Raider: Definitive Edition". Wikipedia. https://en.wikipedia.org/wiki/Tomb_Raider:_Definitive_Edition
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Torchlight Iii". Wikipedia. https://en.wikipedia.org/wiki/Torchlight_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Total War Saga: Troy". Wikipedia. https://en.wikipedia.org/wiki/Total_War_Saga:_Troy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Total War: Three Kingdoms". Wikipedia. https://en.wikipedia.org/wiki/Total_War:_Three_Kingdoms
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Total War: Warhammer Iii". Wikipedia. https://en.wikipedia.org/wiki/Total_War:_Warhammer_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Toukiden: Kiwami". Wikipedia. https://en.wikipedia.org/wiki/Toukiden:_Kiwami
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Train Fever". Wikipedia. https://en.wikipedia.org/wiki/Train_Fever
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Transformers: Devastation". Wikipedia. https://en.wikipedia.org/wiki/Transformers:_Devastation
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Transformers: Rise Of The Dark Spark". Wikipedia. https://en.wikipedia.org/wiki/Transformers:_Rise_Of_The_Dark_Spark
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Trials Of Mana". Wikipedia. https://en.wikipedia.org/wiki/Trials_Of_Mana
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tropico 5". Wikipedia. https://en.wikipedia.org/wiki/Tropico_5
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tropico 6". Wikipedia. https://en.wikipedia.org/wiki/Tropico_6
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Trover Saves The Universe". Wikipedia. https://en.wikipedia.org/wiki/Trover_Saves_The_Universe
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Tumblestone". Wikipedia. https://en.wikipedia.org/wiki/Tumblestone
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Two Point Campus". Wikipedia. https://en.wikipedia.org/wiki/Two_Point_Campus
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ultra Street Fighter Iv". Wikipedia. https://en.wikipedia.org/wiki/Ultra_Street_Fighter_Iv
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Umurangi Generation". Wikipedia. https://en.wikipedia.org/wiki/Umurangi_Generation
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Undertale". Wikipedia. https://en.wikipedia.org/wiki/Undertale
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Until Dawn". Wikipedia. https://en.wikipedia.org/wiki/Until_Dawn
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Until Dawn: Rush Of Blood". Wikipedia. https://en.wikipedia.org/wiki/Until_Dawn:_Rush_Of_Blood
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Valfaris". Wikipedia. https://en.wikipedia.org/wiki/Valfaris
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Valkyria Chronicles 4". Wikipedia. https://en.wikipedia.org/wiki/Valkyria_Chronicles_4
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Valorant". Wikipedia. https://en.wikipedia.org/wiki/Valorant
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Victor Vran". Wikipedia. https://en.wikipedia.org/wiki/Victor_Vran
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Victoria 3". Wikipedia. https://en.wikipedia.org/wiki/Victoria_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Void Bastards". Wikipedia. https://en.wikipedia.org/wiki/Void_Bastards
Accessed on July 3, 2023.

Wikipedia. (n.d.). "War Thunder". Wikipedia. https://en.wikipedia.org/wiki/War_Thunder
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warcraft Iii: Reforged". Wikipedia. https://en.wikipedia.org/wiki/Warcraft_Iii:_Reforged
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warframe". Wikipedia. https://en.wikipedia.org/wiki/Warframe
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Wargroove". Wikipedia. https://en.wikipedia.org/wiki/Wargroove
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warhammer 40,000: Chaos Gate - Daemonhunters". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Chaos_Gate_-_Daemonhunters
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warhammer 40,000: Dawn Of War Iii". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Dawn_Of_War_Iii
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warhammer 40,000: Inquisitor - Martyr". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Inquisitor_-_Martyr
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warhammer 40,000: Mechanicus". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Mechanicus
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warhammer 40,000: Space Wolf". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Space_Wolf
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warhammer: Chaosbane". Wikipedia. https://en.wikipedia.org/wiki/Warhammer:_Chaosbane
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Warhammer: Vermintide 2". Wikipedia. https://en.wikipedia.org/wiki/Warhammer:_Vermintide_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Wasteland 2: Director'S Cut". Wikipedia. https://en.wikipedia.org/wiki/Wasteland_2:_Director'S_Cut
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Wasteland 3". Wikipedia. https://en.wikipedia.org/wiki/Wasteland_3
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Watch Dogs 2". Wikipedia. https://en.wikipedia.org/wiki/Watch_Dogs_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Watch Dogs: Legion". Wikipedia. https://en.wikipedia.org/wiki/Watch_Dogs:_Legion
Accessed on July 3, 2023.

Wikipedia. (n.d.). "We Happy Few". Wikipedia. https://en.wikipedia.org/wiki/We_Happy_Few
Accessed on July 3, 2023.

Wikipedia. (n.d.). "What Remains Of Edith Finch". Wikipedia. https://en.wikipedia.org/wiki/What_Remains_Of_Edith_Finch
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Wheels Of Aurelia". Wikipedia. https://en.wikipedia.org/wiki/Wheels_Of_Aurelia
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Whispering Willows". Wikipedia. https://en.wikipedia.org/wiki/Whispering_Willows
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Wizard Of Legend". Wikipedia. https://en.wikipedia.org/wiki/Wizard_Of_Legend
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Wolfenstein: Youngblood". Wikipedia. https://en.wikipedia.org/wiki/Wolfenstein:_Youngblood
Accessed on July 3, 2023.

Wikipedia. (n.d.). "World Of Final Fantasy". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Final_Fantasy
Accessed on July 3, 2023.

Wikipedia. (n.d.). "World Of Tanks Blitz". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Tanks_Blitz
Accessed on July 3, 2023.

Wikipedia. (n.d.). "World Of Warcraft: Legion". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Warcraft:_Legion
Accessed on July 3, 2023.

Wikipedia. (n.d.). "World Of Warcraft: Warlords Of Draenor". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Warcraft:_Warlords_Of_Draenor
Accessed on July 3, 2023.

Wikipedia. (n.d.). "World Of Warships". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Warships
Accessed on July 3, 2023.

Wikipedia. (n.d.). "World War Ii Online". Wikipedia. https://en.wikipedia.org/wiki/World_War_Ii_Online
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Worms Battlegrounds". Wikipedia. https://en.wikipedia.org/wiki/Worms_Battlegrounds
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Wytchwood". Wikipedia. https://en.wikipedia.org/wiki/Wytchwood
Accessed on July 3, 2023.

Wikipedia. (n.d.). "X Rebirth". Wikipedia. https://en.wikipedia.org/wiki/X_Rebirth
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Xcom 2". Wikipedia. https://en.wikipedia.org/wiki/Xcom_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Xenoblade Chronicles 2". Wikipedia. https://en.wikipedia.org/wiki/Xenoblade_Chronicles_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Yakuza 0". Wikipedia. https://en.wikipedia.org/wiki/Yakuza_0
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Yakuza Kiwami". Wikipedia. https://en.wikipedia.org/wiki/Yakuza_Kiwami
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Yakuza Kiwami 2". Wikipedia. https://en.wikipedia.org/wiki/Yakuza_Kiwami_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Yakuza: Like A Dragon". Wikipedia. https://en.wikipedia.org/wiki/Yakuza:_Like_A_Dragon
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Year Walk". Wikipedia. https://en.wikipedia.org/wiki/Year_Walk
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Yesterday Origins". Wikipedia. https://en.wikipedia.org/wiki/Yesterday_Origins
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ys Ix: Monstrum Nox". Wikipedia. https://en.wikipedia.org/wiki/Ys_Ix:_Monstrum_Nox
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Ys Viii: Lacrimosa Of Dana". Wikipedia. https://en.wikipedia.org/wiki/Ys_Viii:_Lacrimosa_Of_Dana
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Zeno Clash 2". Wikipedia. https://en.wikipedia.org/wiki/Zeno_Clash_2
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Zero Escape: Zero Time Dilemma". Wikipedia. https://en.wikipedia.org/wiki/Zero_Escape:_Zero_Time_Dilemma
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Zombie Army 4: Dead War". Wikipedia. https://en.wikipedia.org/wiki/Zombie_Army_4:_Dead_War
Accessed on July 3, 2023.

Wikipedia. (n.d.). "Zombie Army Trilogy". Wikipedia. https://en.wikipedia.org/wiki/Zombie_Army_Trilogy
Accessed on July 3, 2023.

