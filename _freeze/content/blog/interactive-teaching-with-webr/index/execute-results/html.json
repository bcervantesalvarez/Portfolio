{
  "hash": "edc4e9e4b7f5c685fecb049002243801",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interactive Learning with WebR\"\nsubtitle: \"Lab Demonstration\"\nauthor: \"Brian Cervantes Alvarez\"\ndate: \"08-12-2024\"\ndate-modified: today\ndate-format: long\nimage: /assets/images/webR.png\nformat: \n    html:\n        code-tools: true\n        toc: true\n        toc-location: right\n        toc-depth: 5\n        html-math-method: katex\n        page-layout: article\nexecute: \n  echo: true\n  warning: false\nwebr:\n  packages: ['lubridate', 'ggplot2', 'readr', 'dplyr', 'lubridate', 'tidyr'] # Install R packages on document open\n  show-startup-message: false    # Disable displaying status of webR initialization\nfilters:\n  - webr\nai-summary:\n  banner-title: \"Yapper Labs | AI Summary\"\n  model-title: \"Model: ChatGPT o3-mini-high\"\n  model-img: \"/assets/images/OpenAI-white-monoblossom.svg\"\n  summary: \"I built an interactive lab using webR to run R code directly in the browser, streamlining the setup process and providing students with immediate access to real-time data wrangling and visualization tools. I demonstrated key techniques—filtering, selecting, mutating, summarizing, reshaping data, and handling missing values—integrated with dynamic visualizations using ggplot2 to make complex concepts tangible and accessible. This lab showcases how webR transforms the learning experience by offering instant feedback and hands-on exploration, enabling students to master data manipulation skills efficiently.\"\n---\n\n\n\n\n::: {style=\"text-align: center; padding-top: 10px; padding-bottom: 10px;\"}\n<img src=\"/assets/images/webR.png\" style=\"height: 400px;\"/>\n:::\n\n# The Case for `webR`\n\nIntegrating `webR` into your educational tools offers a robust way to elevate interactive learning experiences. This demonstration focuses on how webR enables real-time data wrangling and visualization within a web-based environment, allowing educators to create engaging, hands-on labs for students.\n\n## Why use webR in Education?\n\n`webR` seamlessly brings the power of R to the browser, removing the need for complex local installations. This accessibility is crucial for modern classrooms, where students might be working on different devices and operating systems. By embedding R code directly into educational materials, webR facilitates instant feedback, interactive exercises, and dynamic visualizations, making data science education more intuitive and approachable.\n\n## Key Features of webR\n\n-   **Cross-Platform Compatibility**: Students can run R code on any device with a web browser, ensuring a consistent learning experience.\n\n-   **Immediate Feedback**: webR allows for instant execution of code, enabling students to see the results of their actions right away.\n\n-   **Interactive Visualizations**: By integrating with packages like `ggplot2`, educators can create interactive plots that students can manipulate directly in their browser.\n\n## Implementation in Data Wrangling Labs\n\nFor example, when teaching data wrangling concepts such as filtering, selecting, mutating, and summarizing, webR allows students to experiment with real datasets interactively. They can instantly see the impact of different data manipulation techniques, reinforcing their understanding through practice.\n\n```{webr-r}\n#| autorun: TRUE\n# Sample code block for demonstration\nurl <- \"https://raw.githubusercontent.com/bcervantesalvarez/Portfolio/refs/heads/main/assets/datasets/countries.csv\"\ndownload.file(url, \"countries.csv\")\ncountriesDs <- read_csv(\"countries.csv\", show_col_types = FALSE)\n```\n\n## Benefits for Educators\n\n`webR` enables educators to:\n\n-   **Simplify Setup**: No more lengthy instructions on installing R and its dependencies.\n\n-   **Enhance Engagement**: Interactive content keeps students involved, making complex topics more digestible.\n\n-   **Facilitate Learning**: By allowing students to explore data manipulation and visualization in real time, webR helps solidify their understanding of essential concepts.\n\n### Summary\n\n`webR` transforms how data science is taught, making R's powerful features accessible and interactive in the classroom. Whether you're teaching undergraduates new to R or advanced students refining their skills, `webR` offers a dynamic platform that enhances learning and encourages exploration.\n\n------------------------------------------------------------------------\n\n# Lab Demonstration\n\n## What is Data Wrangling?\n\nData wrangling is the process of converting messy, untidy data into a tidy format, making it suitable for data visualization and analysis.\n\n-   **Data is often messy:** Real-world data is rarely provided in a tidy format.\n\n-   **Industry challenges:** Many industries have poorly designed data structures, requiring data preparation before visualization.\n\n-   **Rarely tidy datasets:** It is uncommon to receive a dataset that is already tidy.\n\n### What is Tidy Data?\n\nTidy data is a structured format that aligns the organization of a dataset with its underlying meaning. In tidy data:\n\n-   **Each variable has its own column:** Every column in the dataset corresponds to a specific variable or attribute.\n\n-   **Each observation has its own row:** Every row captures a single observation or data entry.\n\n-   **Each cell contains a single value:** Each cell holds one distinct piece of information for a particular variable and observation.\n\nIn most cases, data is often imported using SQL to create narrower datasets. While we won't cover SQL in this course, it's a valuable skill to learn in the future. For now, we'll focus on using R to manipulate and create subset datasets from larger datasets for focused analysis.\n\n### What Causes Untidy Data?\n\n-   **Incorrect/Inconsistent Dates:** Dates can be tricky because they might be formatted differently across datasets or have errors like typos or missing parts. For example, some data might use \"MM/DD/YYYY\" while others use \"YYYY-MM-DD,\" leading to confusion and potential errors when analyzing time-based data.\n\n-   **Wide Format Times:** Time data is sometimes presented in a wide format, where each column represents a different time period. This structure can make it difficult to perform certain types of analysis, as many statistical and visualization tools prefer data in a long format, where each row represents a single observation at a specific time.\n\n-   **Void or Misspelled Descriptions:** Descriptions and labels are often incomplete, missing, or contain typos. These errors can make it challenging to interpret the data correctly, especially when variables are not clearly defined or are inconsistent across different parts of the dataset.\n\n-   **Missing Values:** Missing data is common and can occur in any part of a dataset, leading to gaps that can skew analysis or result in errors. Handling these missing values is crucial for ensuring that any conclusions drawn from the data are accurate.\n\n-   **Condensed or Incorrect Headers:** Column names might be too short, unclear, or incorrectly labeled, leading to confusion about what the data actually represents. For example, a column labeled \"Pop\" might be ambiguous—does it refer to population, popularity, or something else?\n\n-   **Row Content Split:** Sometimes, a single column contains data that should be divided into multiple columns, such as when a \"Location\" column includes both city and state. This issue can make it difficult to analyze the data separately or perform operations that rely on more granular details. These common issues contribute to untidy data, which can complicate analysis and lead to inaccurate results.\n\nMastering data wrangling is crucial because you might have to handle datasets with millions of rows and hundreds of columns.\n\n## Getting Started\n\nFirst, ensure you have the necessary packages installed and loaded. We will use the `dplyr`, `lubridate`, `readr`, `ggplot2`, and `tidyr` packages for our examples.\n\n::: callout-important\n## Downloading R-packages\n\nUse `install.packages('Name of Package')` to install an R package. Careful! Package names are case sensitive, so install.packages('GGplot2') will not work, but `install.packages('ggplot2')` will.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(lubridate)\n```\n:::\n\n\n\n\n### Download the Data\n\n::: callout-tip\n## Running Code Block Shortcuts\n\n`Mac users`: Use ⌘ + return to run single or highlighted line(s). Use shift + return to run entire code block\n\n`Windows users`: Use ctrl + enter to run single or highlighted line(s). Use shift + enter to run entire code block\n:::\n\n```{webr-r}\n#| autorun: TRUE\n# Specify the data URL using HTTPS\nurl <- \"https://raw.githubusercontent.com/bcervantesalvarez/Portfolio/main/assets/datasets/countries.csv\"\n\n# Download the data files from the HTTPS URL and save it as\n# countries.csv\ncat(\"Downloading the data ...\\n\")\ndownload.file(url, \"countries.csv\")\n\n# Check for the data.\ncat(\"After downloading the data, we now have:\\n\")\nlist.files()\n\n# Read the countries data into R\ncountriesDs <- read_csv(\"countries.csv\", show_col_types = FALSE)\n```\n\n#### Verify Datasets with `head()`\n\n```{webr-r}\nhead(countriesDs, 5)\n```\n\n#### Description of the Dataset\n\n-   **`country`**: Country name from a predefined list of 10 countries.\n-   **`year`**: Years between 2010 and 2023.\n-   **`population`**: Real-world population size for each country and year.\n-   **`gdp`**: Gross Domestic Product (GDP) in USD millions for each country and year.\n-   **`gdp_per_capita`**: GDP per capita, calculated as GDP divided by population.\n-   **`life_expectancy`**: Life expectancy of citzens\n-   **`birth_rate`**: Birth rate for each country and year\n-   **`temperature`**: Average temperature in celsius per country\n-   **`region`**: Geographical region corresponding to each country.\n-   **`category`**: Classification of the country as \"First World,\" \"Second World,\" or \"Third World.\"\n\n## Tidy Data Wrangling\n\n**Important Concepts**\n\n-   `Filtering`: Filter data based on conditions such as year, country, or region.\n-   `Selecting`: Select specific columns for focused analysis.\n-   `Mutating`: Create new columns, such as cases per 100,000 population.\n-   `Summarizing`: Aggregate data by country, year, or region to find totals and averages.\n\n### Filtering\n\nFiltering is essential for narrowing down datasets to the most relevant information, making patterns easier to identify.\n\n#### Example 1\n\nYou are tasked with visualizing trends in life expectancy in Asian countries between 2010 and 2020.\n\n##### Filtering Process\n\n```{webr-r}\nfilteredData <- countriesDs %>%\n  filter(year >= 2010 & year <= 2020 & region == \"Asia\")\n\nhead(filteredData, 5)\n```\n\n##### Visualization\n\n```{webr-r}\nggplot(filteredData, aes(x = factor(year), y = life_expectancy, color = country)) +\n  geom_point(size = 2) +\n  labs(title = \"Life Expectancy Trends in Asia (2010-2020)\",\n       x = \"Year\", y = \"Life Expectancy\") +\n  theme_minimal()\n```\n\n##### What did we do here?\n\nBy focusing on specific countries and years, filtering allows for more targeted and relevant visualizations, making it easier to analyze trends and patterns specific to the context.\n\n#### Example 2\n\nAnalyze the relationship between GDP per capita and life expectancy in European countries with a GDP per capita above \\$30,000 for the years 2015-2020.\n\n##### Filtering Process\n\n```{webr-r}\nfilteredData <- countriesDs %>%\n  filter(year >= 2015 & year <= 2020 & region == \"Europe\" & gdp_per_capita > 30000) \nhead(filteredData, 5)\n```\n\n##### Visualization\n\n```{webr-r}\nggplot(filteredData, aes(x = gdp_per_capita, y = life_expectancy, color = country)) +\n  geom_point(size = 2) +\n  geom_smooth(method = \"lm\") +\n  labs(title = \"GDP per Capita vs. Life Expectancy in Europe (2015-2020)\",\n       x = \"GDP per Capita\", y = \"Life Expectancy\") +\n  theme_minimal()\n```\n\n##### What did we do here?\n\nFiltering based on economic indicators allows for focused analysis on the relationship between wealth and life expectancy, removing noise from countries with different economic conditions.\n\n#### Filtering Challenges\n\n1.  **Population Size in Africa**:\n    -   **Filter**: Only countries from Africa where the population exceeds 50 million.\n    -   **Purpose**: Isolate data for large African nations to analyze trends specific to highly populated areas.\n2.  **Economic Data in Europe**:\n    -   **Filter**: Show data only for the years 2015-2020 for European countries with GDP per capita above \\$30,000.\n    -   **Purpose**: Focus on wealthy European countries during a specific period to study economic outcomes.\n3.  **High Birth Rates in Asia**:\n    -   **Filter**: Data for Asian countries where the birth rate is above 2.5.\n    -   **Purpose**: Analyze regions with high birth rates, possibly indicating population growth trends.\n4.  **Cold Regions in Asia**:\n    -   **Filter**: Asian countries where the average temperature is below 10°C between 2010 and 2020.\n    -   **Purpose**: Focus on colder regions in Asia to study how temperature may correlate with other demographic factors.\n5.  **GDP Data with Missing Values**:\n    -   **Filter**: Remove any entries with missing `gdp_per_capita` values for the years 2010-2020.\n    -   **Purpose**: Ensure clean data for economic analysis, removing incomplete records that could skew results.\n\n### Selecting\n\nSelecting allows you to focus on specific columns relevant to your analysis.\n\n#### Example 1\n\n```{webr-r}\nselectedData <- filteredData %>%\n  select(country, year, gdp_per_capita, life_expectancy)\nhead(selectedData, 5)\n```\n\n##### Visualization\n\n```{webr-r}\nggplot(selectedData, aes(x = factor(year), y = gdp_per_capita, fill = country)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"GDP per Capita Over Time in Selected European Countries\",\n       x = \"Year\", y = \"GDP per Capita\") +\n  theme_minimal()\n```\n\n#### Selecting Challenges\n\n1.  **Select columns** related to economic indicators (e.g., `country`, `gdp_per_capita`, `population`) for further analysis.\n2.  **Create a dataset** with only the `year`, `life_expectancy`, and `temperature` columns for all countries and show the first 5 rows.\n3.  **Choose columns** that exclude any geographical information and check the first 10 rows.\n4.  **Select and rename** the `country` and `population` columns to `nation` and `pop_size`, respectively.\n5.  **Create a new dataset** with only the `year`, `population`, and a newly created column, `population_in_millions` (which should be calculated as `population / 1e6`).\n\n### Mutating\n\nMutating helps create new columns based on existing data.\n\n#### Example 1\n\n```{webr-r}\nmutatedData <- countriesDs %>%\n  mutate(gdp_total = gdp_per_capita * population)\n\nhead(mutatedData, 5)\n```\n\n##### Visualization\n\n```{webr-r}\nggplot(mutatedData, aes(x = population, y = gdp_total, color = region)) +\n  geom_point(size = 2) +\n  labs(title = \"Population vs. Total GDP by Region\",\n       x = \"Population\", y = \"Total GDP\") +\n  theme_minimal()\n```\n\n#### Mutating Challenges\n\n1.  **Create a new column** called `gdp_total` that multiplies `gdp_per_capita` by `population`.\n2.  **Add a new column** that indicates whether a country's GDP per capita is above or below a certain threshold (e.g., \\$20,000).\n3.  **Mutate the `temperature` column** to create a new column, `temperature_f`, that converts Celsius to Fahrenheit.\n4.  **Create a `population_density` column** by dividing `population` by a given area (assuming you have area data).\n5.  **Generate a column** that calculates the ratio of birth rate to life expectancy for each country.\n\n### Summarizing\n\nSummarizing aggregates data by country, year, or region to find totals and averages.\n\n#### Example 1\n\n```{webr-r}\nsummaryData <- countriesDs %>%\n  group_by(country) %>%\n  summarize(\n    avg_life_expectancy = mean(life_expectancy, na.rm = TRUE),\n    total_population = sum(population, na.rm = TRUE)\n  )\n\nhead(summaryData, 5)\n```\n\n##### Visualization\n\n```{webr-r}\nggplot(summaryData, aes(x = total_population, y = avg_life_expectancy, label = country)) +\n  geom_point(size = 2) +\n  geom_text(vjust = -0.5) +\n  labs(title = \"Total Population vs. Average Life Expectancy by Country\",\n       x = \"Total Population\", y = \"Average Life Expectancy\") +\n  theme_minimal()\n```\n\n#### Summarizing Challenges\n\n1.  **Summarize the dataset** by finding the average temperature for each region.\n2.  **Aggregate the data** to find the total population and average life expectancy for each continent.\n3.  **Group the data** by country and summarize to find the maximum and minimum GDP per capita for each country.\n4.  **Summarize by year** to find the total population and average birth rate each year.\n5.  **Create a summary** that calculates the total population and average GDP per capita for countries classified as \"First World.\"\n\n## Untidy Data Wrangling\n\n### Handling Wide vs. Long Formats\n\nUntidy data often comes in a \"wide\" format, where multiple variables are stored across columns rather than in a long format where each observation is a row.\n\n#### Creating an Untidy Version\n\nTo demonstrate this, let's take our dataset and convert it into a wide format, then back to a long format.\n\n```{webr-r}\n# Create a wide format from the existing long format\nwideData <- countriesDs %>%\n  pivot_wider(names_from = year, values_from = c(population, gdp))\n\n# Preview the wide data\nhead(wideData, 5)\n```\n\nNow, let's convert this wide data back to a long format.\n\n```{webr-r}\n# Convert the wide format back to long format\nlongData <- wideData %>%\n  pivot_longer(cols = starts_with(c(\"population\", \"gdp\")),\n               names_to = c(\".value\", \"year\"),\n               names_sep = \"_\")\n\n# Preview the long data\nhead(longData, 5)\n```\n\nThis process shows how data can be reshaped for different analytical needs. Wide format is useful for certain analyses but often needs to be converted to long format for modeling and visualization.\n\n### Handling Misspelled Header Column Names\n\nSometimes datasets come with misspelled or inconsistent column names, which can lead to errors in data manipulation.\n\n#### Creating Misspelled Header Names\n\nLet's create a dataset with intentionally misspelled column names and then fix them.\n\n```{webr-r}\n# Create a dataset with misspelled column names\nmisspelledHeaders <- countriesDs %>%\n  rename(\n    poplation = population,\n    gdp_pper_capita = gdp_per_capita,\n    lif_expectancy = life_expectancy\n  )\n\n# Preview the dataset with misspelled headers\nhead(misspelledHeaders, 5)\n```\n\n#### Fixing the Misspelled Column Names\n\n```{webr-r}\n# Correct the misspelled column names\ncorrectedHeaders <- misspelledHeaders %>%\n  rename(\n    population = poplation,\n    gdp_per_capita = gdp_pper_capita,\n    life_expectancy = lif_expectancy\n  )\n\n# Preview the corrected dataset\nhead(correctedHeaders, 5)\n```\n\nThis illustrates how to identify and correct misspelled column names, which is a crucial step in data cleaning.\n\n### Handling Row Content Split and Reverse\n\nSometimes, data stored in a single column needs to be split into multiple columns or vice versa.\n\n#### Merging Two Columns into One\n\nLet's take the `country` and `year` columns and merge them into a single column.\n\n```{webr-r}\n# Combine 'country' and 'year' into a single column\nmergedData <- countriesDs %>%\n  unite(\"country_year\", country, year, sep = \"_\")\n\n# Preview the merged dataset\nhead(mergedData, 5)\n```\n\n#### Splitting the Merged Column Back into Two\n\n```{webr-r}\n# Split the 'country_year' column back into 'country' and 'year'\nsplitData <- mergedData %>%\n  separate(country_year, into = c(\"country\", \"year\"), sep = \"_\")\n\n# Preview the split dataset\nhead(splitData, 5)\n```\n\nThis demonstrates how to handle situations where data needs to be recombined or separated for different purposes.\n\n### Handling Dates\n\nIn some cases, it might be necessary to convert a `year` column from a numeric format (double) into a proper date format for time series analysis or plotting purposes. Here’s how you can do that in R using the `lubridate` package.\n\n#### Example 1\n\n##### Converting `year` to a Date\n\nLet's convert the `year` column into a date format, setting it as January 1st of that year.\n\n```{webr-r}\n# Ensure the lubridate package is loaded\n# Convert the year column to a date format (January 1st of each year)\ncountriesDs <- countriesDs %>%\n  mutate(year_date = ymd(paste0(year, \"-01-01\")))\n\n# Check the first few rows to see the new column\nhead(countriesDs, 5)\n```\n\n##### What did we do here?\n\n-   **`paste0(year, \"-01-01\")`**: Combines the year with the string \"-01-01\" to create a date string like \"2010-01-01\".\n-   **`ymd()`**: Converts the resulting string into a date object in the \"Year-Month-Day\" format.\n\nThis creates a new column, `year_date`, which is now in the proper date format.\n\n#### Challenges \\[Solutions\\]\n\n1.  **Convert year to end of year date**:\n\n    -   **Task**: Convert the `year` column to a date format, but set it as December 31st of that year.\n    -   **Purpose**: Useful for representing data that summarizes annual results.\n\n    ```{webr-r}\n    countriesDs <- countriesDs %>%\n      mutate(year_end_date = ymd(paste0(year, \"-12-31\")))\n\n    head(countriesDs, 5)\n    ```\n\n2.  **Create a quarterly date**:\n\n    -   **Task**: Convert the `year` column into a date representing the first quarter (e.g., \"2010-03-31\").\n    -   **Purpose**: Useful for quarterly analysis.\n\n    ```{webr-r}\n    countriesDs <- countriesDs %>%\n      mutate(quarter_date = ymd(paste0(year, \"-03-31\")))\n\n    head(countriesDs, 5)\n    ```\n\n3.  **Mid-year date conversion**:\n\n    -   **Task**: Convert the `year` column to a date format, setting it as June 30th of each year.\n    -   **Purpose**: Represents mid-year data points.\n\n    ```{webr-r}\n    countriesDs <- countriesDs %>%\n      mutate(mid_year_date = ymd(paste0(year, \"-06-30\")))\n\n    head(countriesDs, 5)\n    ```\n\n4.  **Use year as a dynamic time period**:\n\n    -   **Task**: Convert the `year` column to represent the last day of a chosen month (e.g., November).\n    -   **Purpose**: Allows for flexibility depending on the analysis context.\n\n    ```{webr-r}\n    chosen_month <- \"11\"\n    countriesDs <- countriesDs %>%\n      mutate(chosen_month_date = ymd(paste0(year, \"-\", chosen_month, \"-30\")))\n\n    head(countriesDs, 5)\n    ```\n\n5.  **Convert year to fiscal year start date**:\n\n    -   **Task**: Convert the `year` column into a date representing the start of the fiscal year (e.g., April 1st).\n    -   **Purpose**: Useful for financial and budgetary analyses.\n\n    ```{webr-r}\n    countriesDs <- countriesDs %>%\n      mutate(fiscal_year_start = ymd(paste0(year, \"-04-01\")))\n\n    head(countriesDs, 5)\n    ```\n\n```{webr-r}\nggplot(countriesDs, aes(x = year_date, y = population, color = country)) +\n  geom_line(linewidth = 1) +\n  labs(title = \"Population Trends Over Time by Country\",\n       x = \"Year\", y = \"Population\") +\n  theme_minimal()\n```\n\n### Handling Missing Data\n\nDealing with missing data is a crucial aspect of data wrangling. Missing data can occur for various reasons, and understanding the nature of these missing values is essential for appropriate handling.\n\n#### Types of Missing Data\n\n-   **MCAR (Missing Completely at Random)**: Data is missing entirely at random, with no relationship between the missing data and any other observed or unobserved data. The analysis remains unbiased if this missing data is ignored.\n\n-   **MAR (Missing at Random)**: The likelihood of missing data on a variable is related to other observed variables but not to the value of the variable itself .\n\n-   **MNAR (Missing Not at Random)**: The missingness is related to the unobserved data itself, meaning the missing values are related to the actual value that is missing.\n\n#### Simulating MAR Data\n\nWe'll create a scenario where `gdp_per_capita` is more likely to be missing if the population is below a certain threshold, making it \"missing at random\" based on population size.\n\n```{webr-r}\nset.seed(10)  # For reproducibility\n# Directly introduce missing values in a random sample of rows\nmar_data <- countriesDs %>%\n  mutate(\n    gdp_per_capita = ifelse(runif(n()) < 0.4, NA, gdp_per_capita)  # 20% chance of being NA\n  )\n# Check for missing values\nsummary(mar_data$gdp_per_capita)  # Provides a summary of the column, including missing values\n```\n\n#### Simulating MNAR Data\n\nWe'll simulate a scenario where the likelihood of `life_expectancy` being missing is higher if life expectancy is lower than 60 years, making it \"missing not at random.\"\n\n```{webr-r}\nset.seed(456)  # For reproducibility\n\nmnar_data <- countriesDs %>%\n  mutate(\n    life_expectancy = ifelse(life_expectancy < 60 & runif(n()) < 0.4, NA, life_expectancy)\n  )\n# Check for missing values\nsummary(mnar_data$life_expectancy)\n```\n\n#### Missing Data \\| Before Wrangling\n\n##### Before Handling Missing Data\n\nLet's visualize the data before handling missing values, focusing on the relationship between GDP per capita and life expectancy.\n\n##### Visualization with MAR Data\n\n```{webr-r}\nggplot(mar_data, aes(x = gdp_per_capita, y = life_expectancy, color = country)) +\n  geom_point(size = 2, alpha = 0.6) +\n  labs(title = \"GDP per Capita vs. Life Expectancy (with MAR)\",\n       x = \"GDP per Capita\", y = \"Life Expectancy\") +\n  theme_minimal()\n```\n\n##### Visualization with MNAR Data\n\n```{webr-r}\nggplot(mnar_data, aes(x = gdp_per_capita, y = life_expectancy, color = country)) +\n  geom_point(size = 2, alpha = 0.6) +\n  labs(title = \"GDP per Capita vs. Life Expectancy (with MNAR)\",\n       x = \"GDP per Capita\", y = \"Life Expectancy\") +\n  theme_minimal()\n```\n\n#### Missing Data \\| How to Wrangle\n\nTo handle the missing data, we'll apply a simple imputation strategy, filling in missing values with the median of the respective variable.\n\n##### Imputing Missing Values for MAR Data\n\n```{webr-r}\nmar_data_imputed <- mar_data %>%\n  mutate(\n    gdp_per_capita = ifelse(is.na(gdp_per_capita), median(gdp_per_capita, na.rm = TRUE), gdp_per_capita)\n  )\n# Check imputation\nsummary(mar_data_imputed$gdp_per_capita)\n```\n\n#### Missing Data \\| After Wrangling\n\nLet's visualize the data again after imputing the missing values.\n\n##### Visualization with MAR Data (Imputed)\n\n```{webr-r}\nggplot(mar_data_imputed, aes(x = gdp_per_capita, y = life_expectancy, color = country)) +\n  geom_point(size = 2, alpha = 0.6) +\n  labs(title = \"GDP per Capita vs. Life Expectancy (after MAR Imputation)\",\n       x = \"GDP per Capita\", y = \"Life Expectancy\") +\n  theme_minimal()\n```\n\n##### Imputing Missing Values for MNAR Data\n\n```{webr-r}\nmnar_data_imputed <- mnar_data %>%\n  mutate(\n    life_expectancy = ifelse(is.na(life_expectancy), median(life_expectancy, na.rm = TRUE), life_expectancy)\n  )\n# Check imputation\nsummary(mnar_data_imputed$life_expectancy)\n```\n\n##### Visualization with MNAR Data (Imputed)\n\n```{webr-r}\nggplot(mnar_data_imputed, aes(x = gdp_per_capita, y = life_expectancy, color = country)) +\n  geom_point(size = 2, alpha = 0.6) +\n  labs(title = \"GDP per Capita vs. Life Expectancy (after MNAR Imputation)\",\n       x = \"GDP per Capita\", y = \"Life Expectancy\") +\n  theme_minimal()\n```\n\n#### Summary\n\nUnderstanding the different types of missing data—MCAR, MAR, and MNAR—is crucial for choosing the right approach to handle them. We explored how to simulate and visualize MAR and MNAR scenarios in our dataset, highlighting the importance of addressing missing data for accurate analysis. By comparing visualizations before and after imputation, students can grasp the significant impact missing data can have on their results and learn effective strategies to mitigate these issues.\n\n## Creating a Pseudo-Publication Ready Visualization\n\nWe’ll combine all the data wrangling techniques you’ve learned—`filtering`, `selecting`, `mutating`, `summarizing`—to perform a detailed analysis and produce a polished, publication-ready visualization.\n\n### Creating a Professional-Quality Visualization\n\nHere’s a step-by-step guide to transform and visualize data from 10 countries in the dataset:\n\n```{webr-r}\n# Step 1: Filter the dataset for Asian and European countries from 2020 to 2023\nfilteredData <- countriesDs %>%\n  filter(year >= 2020 & year <= 2023)\n\n# Step 2: Select relevant columns for analysis\nselectedData <- filteredData %>%\n  select(country, year, population, gdp_per_capita, life_expectancy, birth_rate)\n\n# Step 3: Mutate the data to create new metrics\nmutatedData <- selectedData %>%\n  mutate(\n    gdp_total = gdp_per_capita * population,\n    year_date = ymd(paste0(year, \"-\", ifelse(runif(n()) > 0.5, \"06-30\", \"12-31\")))\n  )\n\n# Step 4: Summarize the data to get average life expectancy, GDP per capita, and total population by country and continent\nsummaryData <- mutatedData %>%\n  group_by(country) %>%\n  summarize(\n    avg_life_expectancy = mean(life_expectancy, na.rm = TRUE),\n    avg_gdp_per_capita = mean(gdp_per_capita, na.rm = TRUE),\n    total_population_millions = sum(population, na.rm = TRUE) / 1e6  # Convert population to millions\n  ) %>%\n  ungroup()\n\n# Step 6: Create a publication-ready visualization\nggplot(summaryData, aes(\n  x = avg_gdp_per_capita, \n  y = avg_life_expectancy, \n  size = total_population_millions,  # Use population in millions for size mapping\n  color = country\n)) +\n  geom_point(alpha = 0.4) +\n  scale_y_continuous(limits = c(min(summaryData$avg_life_expectancy) - 1, 66)) +  # Adjust y-axis scale to go up to 66\n  scale_size_continuous(\n    range = c(5, 15),  # Adjust the bubble size range\n    name = \"Total Population (Millions)\", \n    breaks = c(50, 200, 500, 1000, 1500),  # Adjust based on realistic population ranges in millions\n    labels = c(\"50M\", \"200M\", \"500M\", \"1B\", \"1.5B\")  # Correct labels in millions\n  ) +\n  scale_color_viridis_d(guide = \"none\") +  # Hide the color legend\n  labs(\n    title = \"Relationship Between GDP per Capita and Life Expectancy Across Countries\",\n    subtitle = \"Bubble size represents total population across 2020-2023\",\n    x = \"Average GDP per Capita (USD)\",\n    y = \"Average Life Expectancy (Years)\",\n    caption = \"Data Source: Synthetic Dataset\"\n  ) +\n  geom_text(aes(label = country), hjust = 0.5, size = 3, color = \"black\") + # Labels centered\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"Georgia\"),\n    plot.title = element_text(size = 11, face = \"bold\"), \n    plot.subtitle = element_text(size = 9, face = \"italic\"), \n    axis.title = element_text(size = 8),\n    legend.title = element_text(size = 8), \n    legend.text = element_text(size = 8), \n    legend.position = \"bottom\"\n  )\n```\n\n### Review & Scrutinize\n\n**What is this visualization?**: Write a brief paragraph describing the design, purpose, and key message of the plot. Explain what the visualization is intended to show and how it effectively communicates the data.\n\n**Why is this visualization nearly publication-ready?**: In 2-3 sentences, discuss what makes the plot polished and professional, highlighting any elements that could make it suitable for publication.\n\n------------------------------------------------------------------------\n\n# WebR in Pure Browser Form\n\nAs the package gets support from the community, students could run their entire r scripts on the browser. Of course, learning how to use the IDE is still important.\n\n::: column-screen\n<iframe src=\"https://webr.r-wasm.org/latest/\" width=\"100%\" height=\"700\" allowfullscreen>\n\n</iframe>\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}