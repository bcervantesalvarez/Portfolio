{
  "hash": "beca12c39a008c91742837bb54c2c16b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Parameterized Reports\"\nauthor: \"Brian Cervantes Alvarez\"\ndate: \"4-03-2023\"\nimage: /assets/images/report.jpeg\ndescription: \"Achieving peak productivity in data analysis with automated R Markdown reports, minimizing effort and errors.\"\nbibliography: \"bibliography.bib\"\nnocite: |\n     @*\nparams:\n  printcode: true\n  year: 2019\nformat:\n  html:\n    toc: true\n    toc-location: right\n    html-math-method: katex\n    page-layout: article\nexecute: \n  warning: false\n  message: false\ncategories: [R, Plotly, Reports, Time Series, Data Visualization]\n---\n\n\n\n![](/assets/images/report.jpeg)\n\n## Objective\n\nThis project was aimed at streamlining the report generation process by employing parameterized R Markdown. The core idea was to automate the update of report parameters, thus eliminating the manual task of adjusting values for daily or periodic reports. This innovation is designed to significantly reduce time and effort for data scientists, analysts, and engineers, facilitating the production of consistent and timely reports. The automation feature introduced through parameterized R Markdown enhances both productivity and accuracy, offering considerable benefits to business operations.\n\n## Approach\n\nThe process involved the following key steps:\n\n1.  **Library Utilization:**\n    -   Essential R libraries were loaded, including `tidyverse` for data manipulation, `plotly` and `ggplotly` for interactive visualizations, and `rmarkdown` for rendering parameterized reports.\n2.  **Data Preparation:**\n    -   The dataset was loaded and processed. This included renaming columns, converting dates, and filtering data based on the year specified through parameters.\n3.  **Custom Theme Development:**\n    -   A custom theme function was created to standardize the appearance of plots across all reports, ensuring a consistent and professional aesthetic.\n4.  **Data Visualization:**\n    -   Interactive visualizations were crafted using `ggplotly` to display monthly sales data, highlighting key trends and insights.\n5.  **Automated Report Generation:**\n    -   A loop was implemented to automate the generation of reports for each year, utilizing a function that leverages parameterized R Markdown to render individual reports dynamically.\n\n### Highlights\n\n-   The project underscores the efficiency and scalability of automated report generation.\n-   The approach allows for the seamless creation of visually appealing and informative reports.\n-   Automation minimizes errors and saves considerable time, enhancing decision-making processes with timely and accurate data insights.\n\n### Technical Notes\n\n-   The script included the loading of required libraries, data wrangling steps, and the use of `ggplotly` for creating dynamic visualizations.\n-   The custom theme function (`myTheme`) ensures a uniform look across all visualizations.\n-   The `renderReport` function and subsequent loop for rendering reports underscore the automation aspect, showcasing the project's capacity to produce multiple reports efficiently.\n\n### Conclusion\n\nThis project exemplifies the power of automation in report generation using parameterized R Markdown. It offers a scalable solution for producing detailed and aesthetically consistent reports, providing valuable time savings and accuracy for businesses and their data teams.\n\n## Required Libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(zoo)\nlibrary(rmarkdown)\nlibrary(purrr)\n```\n:::\n\n\n\n## Load Dataset & Wrangle\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds <- read_csv(\"../../../assets/datasets/retail.csv\")\n\n#head(ds)\n\nds <- ds %>% \n  rename(ID = ...1) %>%\n  mutate(Month = lubridate::floor_date(Date, 'month')) %>%\n  filter(year(Month) == params$year)\n\nglimpse(ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10,042\nColumns: 9\n$ ID         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ DocumentID <dbl> 716, 716, 716, 716, 716, 716, 716, 460, 461, 462, 463, 464,…\n$ Date       <date> 2019-09-23, 2019-09-23, 2019-09-23, 2019-09-23, 2019-09-23…\n$ SKU        <dbl> 1039, 853, 862, 868, 2313, 2355, 2529, 2361, 2723, 655, 254…\n$ Price      <dbl> 381.78, 593.22, 423.73, 201.70, 345.76, 406.78, 542.38, 139…\n$ Discount   <dbl> 67.37254, 0.00034, -0.00119, 35.58814, 61.01966, 101.69458,…\n$ Customer   <dbl> 1, 1, 1, 1, 1, 1, 1, 460, 479, 26, 580, 311, 311, 311, 311,…\n$ Quantity   <dbl> 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 2, 2, 1, 1, 1, 4, 1, 1, 4,…\n$ Month      <date> 2019-09-01, 2019-09-01, 2019-09-01, 2019-09-01, 2019-09-01…\n```\n\n\n:::\n:::\n\n\n\n\n\n## Visualize The Report\n\nI utilized ggplotly, a graphical representation tool, to create an interactive visualization of monthly sales time series data for \"CRM and Invoicing system,\" which is a wholesale company owned by Sadi Evren. The data for this analysis was obtained from the following Kaggle dataset: https://www.kaggle.com/datasets/shedai/retail-data-set?select=file_out.csv.\n\nThe resulting plot provided an insightful representation of the monthly sales data, showcasing trends and patterns in the data that could potentially provide useful information for decision making in the business.\n\nIn addition to the initial plot, I implemented a for loop to automatically generate multiple reports based on the time series data for each year. This approach eliminated the need for manual report generation, thereby saving time and reducing the risk of errors. The loop enabled the automated generation of separate reports for each year, which provided a comprehensive view of the sales trends over time.\n\nOverall, the use of ggplotly for data visualization and automation of report generation using a for loop demonstrated an effective approach for efficiently analyzing and presenting data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ds %>%\n  group_by(Month) %>%\n  summarize(AvgSales = round(mean(Price * Quantity),2) ) %>%\n  ggplot(aes(x = Month, \n             y = AvgSales,\n             group = 1,                 #Necessary or else line plot disappears\n             text = paste0(\"Monthly Sales: $\", (round(AvgSales/1000,2)),\"K\" ))) +\n  geom_line(size = 1) + \n  scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = \"K\")) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B\") + \n  labs(title = paste0(\"CRM and Invoicing System Sales For FY: \", params$year),\n       caption = \"Source: https://www.kaggle.com/datasets/shedai/retail-data-set?select=file_out.csv\",\n       x = NULL,\n       y = NULL) +\n  myTheme()\n\nggplotly(p, tooltip = c(\"text\")) %>% \n  layout(hovermode = \"x unified\") \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-94a0d18786053a64b63e\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-94a0d18786053a64b63e\">{\"x\":{\"data\":[{\"x\":[17897,17928,17956,17987,18017,18048,18078,18109,18140,18170,18201,18231],\"y\":[5445.6199999999999,6221.6000000000004,7009.8999999999996,7054.4799999999996,11329.940000000001,11629.42,10792.469999999999,7329.8400000000001,12539.52,9659.6299999999992,7174.0299999999997,7750.8800000000001],\"text\":[\"Monthly Sales: $5.45K\",\"Monthly Sales: $6.22K\",\"Monthly Sales: $7.01K\",\"Monthly Sales: $7.05K\",\"Monthly Sales: $11.33K\",\"Monthly Sales: $11.63K\",\"Monthly Sales: $10.79K\",\"Monthly Sales: $7.33K\",\"Monthly Sales: $12.54K\",\"Monthly Sales: $9.66K\",\"Monthly Sales: $7.17K\",\"Monthly Sales: $7.75K\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.7795275590551185,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":90.167018039307962,\"r\":18.897637795275585,\"b\":45.83212553361259,\"l\":46.460942070908629},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"<b> CRM and Invoicing System Sales For FY: 2019 <\\/b>\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":21.253632212536321},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[17880.299999999999,18247.700000000001],\"tickmode\":\"array\",\"ticktext\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"tickvals\":[17897,17928,17956,17987,18017,18048,18078,18109,18140,18170,18201,18231],\"categoryorder\":\"array\",\"categoryarray\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":11.955168119551683},\"tickangle\":-45,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":13.283520132835198}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[5090.9250000000002,12894.215],\"tickmode\":\"array\",\"ticktext\":[\"$7K\",\"$9K\",\"$11K\"],\"tickvals\":[7000,9000,11000],\"categoryorder\":\"array\",\"categoryarray\":[\"$7K\",\"$9K\",\"$11K\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":11.955168119551683},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":13.283520132835198}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"x unified\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"53946f605d84\":{\"x\":{},\"y\":{},\"text\":{},\"type\":\"scatter\"}},\"cur_data\":\"53946f605d84\",\"visdat\":{\"53946f605d84\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## Function To Run Parameterized Reports\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenderReport <- function(year) {\n  quarto::quarto_render(\n    input = \"index.qmd\",\n    output_file = paste0(year, '.html'),\n    execute_params = list(year = year)\n  )\n}\n```\n:::\n\n\n\n## Render All Reports\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Renders all 4 Reports (dates range from 2019-2022)\nfor (year in 2019:2022) {\n    renderReport(year)\n}\n```\n:::\n\n\n\n## Data References\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}