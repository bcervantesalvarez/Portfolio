{
  "hash": "8d4e7a42f284ae8c56e31e1ba8ef82eb",
  "result": {
    "markdown": "---\ntitle: \"Predicting Customer Returns\"\nauthor: Brian Cervantes Alvarez\ndate: \"3-11-2023\"\nimage: return.jpeg\nformat:\n  html:\n    toc: true\n    toc-location: right\n    html-math-method: katex\n    page-layout: full\nexecute: \n  warning: false\n  message: false\ncategories: [R, machine learning, logistical model, data visualization]\n---\n\n\n![](return.jpeg)\n\n## Approach and Methodology\n\nTo ensure proper analysis, I began by loading the necessary libraries and examining the train and test datasets to identify the variables available for analysis. Exploration of the data revealed trends in the number of returns across various variables such as ProductDepartment, ProductSize, and Returns Per State. Given the project objective of predicting the probability of item returns, I selected logistic regression, a well-suited model for binary dependent variables. To prepare the data, I developed a function to transform both the train and test data, ensuring dimensionality was kept in check by removing unnecessary columns such as dates and IDs. Additionally, I updated character data types to factors. Further exploration of the data led to the inclusion of additional features, such as \"Season\", \"CustomerAge\", \"MSRP\", and \"PriceRange\", that may play a significant role in predicting a customer's probability of returning their product. I then ran the logistic model and examined the coefficients, noting the highest ratios for ProductDepartment, with a significant influence from men's and women's products. Noting that for future exploration, I concluded my model and wrote the submssion file.\n\nNote: I had explored the idea of using rpart, rf and gbm, however I was not accustomed to using those models. There was much more refinement to be done, but the 3 hour constraint kept me focused on building a draft of the model. Would this go into production? No, but it would be a step in the right direction.\n\n## Load the required packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(caret)\nlibrary(glmnet)\n```\n:::\n\n\n## Load the training and test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain <- read_csv(\"train.csv\") \ntest <- read_csv(\"test.csv\") \n\nglimpse(train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 64,912\nColumns: 12\n$ ID                <chr> \"58334388-e72d-40d3-afcf-59561c262e86\", \"fb73c186-ca…\n$ OrderID           <chr> \"4fc2f4ea-7098-4e9d-87b1-52b6a9ee21fd\", \"4fc2f4ea-70…\n$ CustomerID        <chr> \"c401d50e-37b7-45ea-801a-d71c13ea6387\", \"c401d50e-37…\n$ CustomerState     <chr> \"Kentucky\", \"Kentucky\", \"Kentucky\", \"Kentucky\", \"Ind…\n$ CustomerBirthDate <date> 1967-01-06, 1967-01-06, 1967-01-06, 1967-01-06, 197…\n$ OrderDate         <date> 2016-01-06, 2016-01-06, 2016-01-06, 2016-01-06, 201…\n$ ProductDepartment <chr> \"Youth\", \"Mens\", \"Mens\", \"Mens\", \"Womens\", \"Womens\",…\n$ ProductSize       <chr> \"M\", \"L\", \"XL\", \"L\", \"XS\", \"M\", \"XS\", \"M\", \"M\", \"M\",…\n$ ProductCost       <dbl> 9, 17, 20, 17, 42, 39, 13, 3, 12, 27, 20, 23, 49, 16…\n$ DiscountPct       <dbl> 0.0356, 0.1192, 0.1698, 0.1973, 0.0663, 0.0501, 0.08…\n$ PurchasePrice     <dbl> 28.93, 44.92, 48.98, 51.37, 113.91, 121.59, 41.40, 1…\n$ Returned          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1…\n```\n:::\n:::\n\n\n## Data Exploration\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at Product Department\ntrain %>% \n  filter(Returned == 1) %>%\n  ggplot(aes(x = ProductDepartment)) +\n  geom_bar(fill = \"#e67838\") +\n  labs(title = \"Number of Returns Per Department\") + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Look at Product Size\ntrain %>% \n  filter(Returned == 1) %>%\n  ggplot(aes(x = ProductSize)) +\n  geom_bar(fill = \"#e67838\") +\n  labs(title = \"Number of Returns Per Product Size\") + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#This won't be that valuable\ntrain %>% \n  mutate(CustomerState = factor(CustomerState)) %>%\n  filter(Returned == 1) %>%\n  ggplot(aes(x = CustomerState)) +\n  coord_flip() +\n  geom_bar(fill = \"#e67838\") +\n  labs(title = \"Number of Returns Per State\") + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n:::\n\n\n## Feature Engineering\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creates the features\nbuildFeatures <- function(ds){\n  CurrentDate <- Sys.Date()\n  ds %>%\n  mutate(Returned = factor(Returned, levels = c(0, 1), labels = c(\"No\",\"Yes\")),\n         Season = factor(case_when(months(OrderDate) %in% month.name[1:3] ~ \"Winter\",\n                            months(OrderDate) %in% month.name[4:6] ~ \"Spring\",\n                            months(OrderDate) %in% month.name[7:9] ~ \"Summer\",\n                            months(OrderDate) %in% month.name[10:12] ~ \"Fall\")), \n         CustomerAge = year(as.period(interval(CustomerBirthDate,CurrentDate))),\n         MSRP = round(PurchasePrice / (1 - DiscountPct)),\n         PriceRange = factor(case_when(MSRP >= 13 & MSRP <= 30 ~ \"$13-$30\",\n                             MSRP > 30 & MSRP <= 60 ~ \"$31-$60\",\n                             MSRP > 60 & MSRP <= 100 ~ \"$61-$100\",\n                             MSRP > 100 ~ \">$100\")),\n         ProductDepartment = as.factor(ProductDepartment),\n         ProductSize = as.factor(ProductSize),\n         CustomerState = as.factor(CustomerState)\n  ) %>%\n  select(-OrderDate, \n         -CustomerBirthDate, \n         -ID, \n         -OrderID, \n         -CustomerID)\n}\n\nIDCols <- test$ID\n\n#Removes and adds columns for train and test sets\ntrain <- buildFeatures(train)\ntest <- buildFeatures(test)\n\n\n#Inspect the dataset before training the model\nglimpse(train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 64,912\nColumns: 11\n$ CustomerState     <fct> Kentucky, Kentucky, Kentucky, Kentucky, Indiana, Ind…\n$ ProductDepartment <fct> Youth, Mens, Mens, Mens, Womens, Womens, Youth, Yout…\n$ ProductSize       <fct> M, L, XL, L, XS, M, XS, M, M, M, L, L, XL, M, XXL, M…\n$ ProductCost       <dbl> 9, 17, 20, 17, 42, 39, 13, 3, 12, 27, 20, 23, 49, 16…\n$ DiscountPct       <dbl> 0.0356, 0.1192, 0.1698, 0.1973, 0.0663, 0.0501, 0.08…\n$ PurchasePrice     <dbl> 28.93, 44.92, 48.98, 51.37, 113.91, 121.59, 41.40, 1…\n$ Returned          <fct> No, No, No, No, No, No, No, No, No, Yes, No, No, No,…\n$ Season            <fct> Winter, Winter, Winter, Winter, Winter, Winter, Wint…\n$ CustomerAge       <dbl> 56, 56, 56, 56, 44, 44, 44, 56, 56, 56, 58, 58, 39, …\n$ MSRP              <dbl> 30, 51, 59, 64, 122, 128, 45, 17, 55, 82, 91, 108, 9…\n$ PriceRange        <fct> $13-$30, $31-$60, $31-$60, $61-$100, >$100, >$100, $…\n```\n:::\n\n```{.r .cell-code}\nsummary(train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      CustomerState     ProductDepartment ProductSize  ProductCost   \n California  : 7612   Accessories: 3952   ~  : 3952   Min.   : 3.00  \n Texas       : 5455   Mens       :27695   L  :16588   1st Qu.:18.00  \n New York    : 4002   Womens     :26922   M  :16223   Median :25.00  \n Florida     : 3875   Youth      : 6343   S  : 9674   Mean   :26.01  \n Illinois    : 2686                       XL : 8874   3rd Qu.:33.00  \n Pennsylvania: 2547                       XS : 5235   Max.   :59.00  \n (Other)     :38735                       XXL: 4366                  \n  DiscountPct     PurchasePrice    Returned       Season       CustomerAge   \n Min.   :0.0019   Min.   :  8.73   No :42035   Fall  :23194   Min.   :26.00  \n 1st Qu.:0.0882   1st Qu.: 44.79   Yes:22877   Spring:12576   1st Qu.:36.00  \n Median :0.1717   Median : 62.54               Summer:16620   Median :47.00  \n Mean   :0.1689   Mean   : 65.42               Winter:12522   Mean   :48.26  \n 3rd Qu.:0.2541   3rd Qu.: 84.84                              3rd Qu.:60.00  \n Max.   :0.3329   Max.   :132.72                              Max.   :77.00  \n                                                                             \n      MSRP           PriceRange   \n Min.   : 13.00   >$100   :17087  \n 1st Qu.: 55.00   $13-$30 : 2720  \n Median : 77.00   $31-$60 :18193  \n Mean   : 78.51   $61-$100:26912  \n 3rd Qu.:102.00                   \n Max.   :133.00                   \n                                  \n```\n:::\n\n```{.r .cell-code}\ntable(train$Returned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   No   Yes \n42035 22877 \n```\n:::\n:::\n\n\n## Fit a Logistical Regression Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(345)\n\n#Model using Logistical Regression\nlogModel <- glm(Returned ~ .,\n                data = train,\n                family = \"binomial\")\nsummary(logModel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = Returned ~ ., family = \"binomial\", data = train)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-1.2617  -0.9725  -0.8697   1.3508   2.2074  \n\nCoefficients: (1 not defined because of singularities)\n                              Estimate Std. Error z value Pr(>|z|)    \n(Intercept)                 -1.5204170  0.1444030 -10.529  < 2e-16 ***\nCustomerStateAlaska         -0.3745168  0.2706629  -1.384  0.16645    \nCustomerStateArizona        -0.1559535  0.0865001  -1.803  0.07140 .  \nCustomerStateArkansas       -0.1680269  0.1086315  -1.547  0.12192    \nCustomerStateCalifornia     -0.1757649  0.0719039  -2.444  0.01451 *  \nCustomerStateColorado       -0.1682868  0.0931554  -1.807  0.07084 .  \nCustomerStateConnecticut    -0.1087649  0.1043767  -1.042  0.29739    \nCustomerStateDC             -0.1803593  0.2203419  -0.819  0.41305    \nCustomerStateDelaware        0.1134396  0.1748311   0.649  0.51643    \nCustomerStateFlorida        -0.1420662  0.0757237  -1.876  0.06064 .  \nCustomerStateGeorgia        -0.0615201  0.0818030  -0.752  0.45202    \nCustomerStateHawaii         -0.1545264  0.1520539  -1.016  0.30951    \nCustomerStateIdaho          -0.1194081  0.1236664  -0.966  0.33426    \nCustomerStateIllinois       -0.1515665  0.0790256  -1.918  0.05512 .  \nCustomerStateIndiana        -0.0053376  0.0872975  -0.061  0.95125    \nCustomerStateIowa           -0.1039855  0.1103701  -0.942  0.34611    \nCustomerStateKansas         -0.2496458  0.1112347  -2.244  0.02481 *  \nCustomerStateKentucky       -0.3531264  0.1073438  -3.290  0.00100 ** \nCustomerStateLouisiana      -0.2381560  0.0915155  -2.602  0.00926 ** \nCustomerStateMaine          -0.2986534  0.1477344  -2.022  0.04322 *  \nCustomerStateMaryland       -0.1224028  0.0910360  -1.345  0.17877    \nCustomerStateMassachusetts  -0.1545115  0.0849803  -1.818  0.06903 .  \nCustomerStateMichigan       -0.2591744  0.0849511  -3.051  0.00228 ** \nCustomerStateMinnesota      -0.1422575  0.0912242  -1.559  0.11890    \nCustomerStateMississippi    -0.0312455  0.1186160  -0.263  0.79223    \nCustomerStateMissouri       -0.2411922  0.0950728  -2.537  0.01118 *  \nCustomerStateMontana        -0.1814644  0.1471433  -1.233  0.21748    \nCustomerStateNebraska       -0.2027473  0.1442761  -1.405  0.15994    \nCustomerStateNevada         -0.0743860  0.1120681  -0.664  0.50685    \nCustomerStateNew Hampshire  -0.0996571  0.1588999  -0.627  0.53055    \nCustomerStateNew Jersey     -0.1238822  0.0855308  -1.448  0.14751    \nCustomerStateNew Mexico     -0.3891323  0.1352394  -2.877  0.00401 ** \nCustomerStateNew York       -0.1653762  0.0755573  -2.189  0.02862 *  \nCustomerStateNorth Carolina -0.0281690  0.0820686  -0.343  0.73142    \nCustomerStateNorth Dakota   -0.1843492  0.1735505  -1.062  0.28813    \nCustomerStateOhio           -0.1949632  0.0798819  -2.441  0.01466 *  \nCustomerStateOklahoma       -0.2468512  0.1055238  -2.339  0.01932 *  \nCustomerStateOregon         -0.0733648  0.0871922  -0.841  0.40012    \nCustomerStatePennsylvania   -0.1311007  0.0795873  -1.647  0.09951 .  \nCustomerStateRhode Island   -0.1558779  0.1663353  -0.937  0.34869    \nCustomerStateSouth Carolina -0.2159403  0.0967242  -2.233  0.02558 *  \nCustomerStateSouth Dakota   -0.1269469  0.1633225  -0.777  0.43699    \nCustomerStateTennessee      -0.0368559  0.0889942  -0.414  0.67877    \nCustomerStateTexas          -0.0777116  0.0733482  -1.059  0.28938    \nCustomerStateUtah           -0.1711151  0.1082903  -1.580  0.11407    \nCustomerStateVermont        -0.0439923  0.2076074  -0.212  0.83218    \nCustomerStateVirginia       -0.1540969  0.0840292  -1.834  0.06668 .  \nCustomerStateWashington     -0.1241350  0.0861621  -1.441  0.14967    \nCustomerStateWest Virginia  -0.1091140  0.1396389  -0.781  0.43457    \nCustomerStateWisconsin      -0.0821141  0.0921258  -0.891  0.37275    \nCustomerStateWyoming        -0.3274862  0.2007843  -1.631  0.10288    \nProductDepartmentMens        1.4347920  0.0631408  22.724  < 2e-16 ***\nProductDepartmentWomens      1.4951526  0.0638800  23.406  < 2e-16 ***\nProductDepartmentYouth       0.9448759  0.0657464  14.372  < 2e-16 ***\nProductSizeL                -0.0385464  0.0353477  -1.090  0.27550    \nProductSizeM                -0.0780394  0.0354060  -2.204  0.02752 *  \nProductSizeS                -0.0406230  0.0378432  -1.073  0.28307    \nProductSizeXL               -0.0377867  0.0381043  -0.992  0.32136    \nProductSizeXS               -0.0753978  0.0426810  -1.767  0.07730 .  \nProductSizeXXL                      NA         NA      NA       NA    \nProductCost                 -0.0041875  0.0012801  -3.271  0.00107 ** \nDiscountPct                 -0.3452542  0.2723834  -1.268  0.20497    \nPurchasePrice               -0.0036330  0.0030623  -1.186  0.23549    \nSeasonSpring                -0.2631769  0.0236683 -11.119  < 2e-16 ***\nSeasonSummer                -0.1764066  0.0215047  -8.203 2.34e-16 ***\nSeasonWinter                -0.1910545  0.0235449  -8.114 4.88e-16 ***\nCustomerAge                  0.0068431  0.0005897  11.604  < 2e-16 ***\nMSRP                         0.0016353  0.0026851   0.609  0.54251    \nPriceRange$13-$30           -0.4153545  0.0984400  -4.219 2.45e-05 ***\nPriceRange$31-$60           -0.2517772  0.0628835  -4.004 6.23e-05 ***\nPriceRange$61-$100          -0.2086855  0.0375943  -5.551 2.84e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 84248  on 64911  degrees of freedom\nResidual deviance: 82399  on 64842  degrees of freedom\nAIC: 82539\n\nNumber of Fisher Scoring iterations: 4\n```\n:::\n\n```{.r .cell-code}\nodds_ratio <- exp(logModel$coefficients)\ndata.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%  \n  arrange(desc(odds_ratio)) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                           name odds_ratio\nProductDepartmentWomens ProductDepartmentWomens   4.460017\nProductDepartmentMens     ProductDepartmentMens   4.198772\nProductDepartmentYouth   ProductDepartmentYouth   2.572494\nCustomerStateDelaware     CustomerStateDelaware   1.120124\nCustomerAge                         CustomerAge   1.006867\nMSRP                                       MSRP   1.001637\n```\n:::\n:::\n\n\n## Make prediction on the test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntestPredictions <- predict(logModel, newdata = test, type = \"response\")\n```\n:::\n\n\n## Writing the Submission File\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission <- data.frame(ID = IDCols, Prediction = testPredictions)\nwrite.csv(submission, \"submission.csv\", row.names = FALSE)\n```\n:::\n\n\n## Leftout Features that were considered\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#odds_ratio <- exp(coef(fit$finalModel))\n#data.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%  \n#  arrange(desc(odds_ratio)) %>% \n#  head()\n\n#Sampling\n#train_index <- createDataPartition(returns_train$Returned, times = 1, p = 0.7, list = FALSE)\n#train <- returns_train[train_index, ]\n#test <- returns_train[-train_index, ]\n\n\n#Returned = factor(Returned, levels = c(0, 1), labels = c(\"No\",\"Yes\"))\n#AgeGroup = factor(case_when(CustomerAge >= 18 & CustomerAge <= 30 ~ \"18-30\",\n#                              CustomerAge > 30 & CustomerAge <= 45 ~ \"31-45\",\n#                              CustomerAge > 45 & CustomerAge <= 60 ~ \"46-60\",\n#                              CustomerAge > 60 ~ \">61\"),\n#                           levels = c(\"18-30\", \"31-45\", \"46-60\", \">61\"))\n\n\n#select(-OrderDate, \n#         -CustomerBirthDate, \n#         -ID, \n#         -OrderID, \n#         -CustomerID,\n#         -PurchasePrice,\n#         -DiscountPct,\n#         -MSRP,\n#         -ProductCost,\n#         -CustomerState)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}