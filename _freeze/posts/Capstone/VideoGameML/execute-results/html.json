{
  "hash": "c6d7062f84f1ffbfd8a99bab7fc156cf",
  "result": {
    "markdown": "---\ntitle: 'Innovating Game Production: Anticipating Success through Pre-Production Insights'\nauthor:\n  - Brian Cervantes Alvarez\n  - John Bergstrom\n  - Oliver Anderson\n  - Heather Terada\n  - Willa Van Liew\ndate: 08-08-2023\ndraft: true\ndescription: 'Create mature games designed for inexperienced players. Avoid the saturated market of winter game releases. Game developers, pay attention to this!'\nimage: Developer.png\nformat:\n  html:\n    smooth-scroll: true\n    toc: true\n    toc-location: right\n    html-math-method: katex\n    page-layout: full\nexecute:\n  warning: false\n  message: false\ncategories:\n  - Python\n  - R\n  - APIs\n  - Webscraper\n  - Machine Learning\n  - Random Forest\n  - Gradient Boosting Machines\n  - XGBoost\n  - Classification\n---\n\n![](Developer.png)\n\n<div class=\"download-buttons\" style=\"text-align: center;\">\n  <style>\n    .download-buttons a.button {\n      display: inline-block;\n      padding-right: 10px;\n      padding-left: 35px;\n      padding-top: 10px;\n      padding-bottom: 10px;\n      margin-right: 25px;\n      margin-bottom: 20px;\n      background-color: #343a40;\n      color: #fff;\n      text-decoration: none;\n      border-radius: 15px;\n      position: relative;\n    }\n\n    .download-buttons a.button:last-child {\n      margin-right: 0;\n    }\n\n    .download-buttons a.button:hover {\n      background-color: #55595c;\n    }\n\n    .download-buttons a.button:after {\n      content: \"\\2193\";\n      font-size: 20px;\n      position: absolute;\n      top: 50%;\n      left: 12px; /* Added margin from the text */\n      transform: translateY(-50%);\n      border-bottom: 2px solid #fff;\n      padding: 1px; /* Padding for the mini border block */\n    }\n  </style>\n\n  <script>\n    function createDynamicButton(href, text) {\n      var button = document.createElement(\"a\");\n      button.href = href;\n      button.className = \"button\";\n      button.appendChild(document.createTextNode(text));\n      return button;\n    }\n\n    var downloadButtonsDiv = document.querySelector(\".download-buttons\");\n\n    var documentButton = createDynamicButton(\n      \"https://github.com/bcervantesalvarez/Portfolio/blob/main/posts/Capstone2023/VideoGameML.qmd\",\n      \"Download .qmd\"\n    );\n    downloadButtonsDiv.appendChild(documentButton);\n    downloadButtonsDiv.appendChild(csvButton);\n  </script>\n</div>\n\n# Abstract\n\nIn the fiercely competitive landscape of the gaming industry, game sales are heavily influenced by marketing strategies and platform exclusivity. Yet, in this dynamic environment, pinpointing the next groundbreaking success while gauging market demand remains a formidable challenge. To tackle this challenge, we've pioneered a robust machine learning algorithm designed to predict a game's potential for success during the pre-production phase. This algorithm draws insights from crucial indicators such as critical reception and key features encompassing genres, release years, platform types, and more. Our model has demonstrated exceptional performance, boasting an accuracy rate of 86.72%, a ROC AUC score of 97.50%, and a Kappa score of 84.03%. Unearthing the elements that underlie triumph, we've identified pivotal determinants that sway the tide of success. These encompass judicious platform selection, optimal game duration, strategic release timing, and the esteemed reputation of the developers. Continuing on this trajectory, the integration of comprehensive sales data and an exploration of supplementary factors—ranging from marketing campaigns, user reviews, to regional influences—holds the promise of further elevating the model's precision. By harnessing these augmentations, we envision guiding developers in the intricate process of crafting games that stand poised for triumph in an ever-evolving industry.\n\n\n# Introduction\n\nIn the dynamic realm of the gaming industry, studios are ceaselessly endeavoring to forge the next monumental success, driven by factors such as creativity, gamer preferences, historical sales data, and feedback garnered from their previous hits. However, the majority of game concepts remain confined to the prototype phase, entailing a drain on both time and resources, ultimately culminating in products that never reach the market. Navigating the transition from pre-production to full-scale production constitutes a protracted and financially demanding journey for game developers (Stefyn, 2022).\n\nUpon entering the production phase, companies channel substantial investments—often in the thousands of dollars—into marketing endeavors that precede a game's release (Flynn, 2023). During the pre-alpha and alpha stages, games are in a state of semi-completion, frequently harboring bugs, limited functionalities, and a dearth of refinement. This stage witnesses their exposure to a select cohort of testers and critics, whose feedback and reviews furnish developers with a crucial compass for gauging the final product's projected demand and its prospects for success among the wider audience.\n\nGiven the staggering production cost range spanning from $100 thousand to $100 million (Rocket Brush, 2022), the insights gleaned from playtesters assume a greater significance when channeled earlier into the production lifecycle. Establishing a robust and efficient production pipeline becomes imperative to avert the squandering of time and resources on games that may not yield sales substantial enough to offset production outlays. Envision the potential savings that could be harnessed if one possessed the capability to accurately prognosticate a game's triumph prior to embarking on an advertising crusade.\n\nEmpowered with deeper insights into the potential demand for diverse game genres and an understanding of how specific features correlate with historical successes, developers can forge decisions rooted in wisdom before committing substantial resources to a game. Delving into the optimal platforms for a specific game and deciphering the potent combinations of themes and genres would profoundly elevate the likelihood of conceiving games with broad market appeal.\n\nPresenting a pioneering approach, we have crafted a robust machine learning algorithm that forecasts a game's prospective popularity during the pre-production juncture, utilizing critical reception as a proxy metric. This algorithm hinges on pivotal features encompassing genres, release year, platform types, number of players, and more. Armed with this algorithm, developers are empowered to dissect consumer demand and anticipate their game's potential success, all before substantial investments of time and capital are channeled into its development. The algorithm's prowess lies in its ability to assist developers in identifying ideal production or development collaborators who have previously crafted successful games within the same genre, thereby streamlining selection processes and pinpointing features that resonate with fans of a particular genre.\n\n# Methodology\n\nWe utilized web scraping techniques to gather data on AAA game titles from the primary dataset of RAWG’s API (RAWG, n.d.), which represents high-budget, top-quality games developed by major studios, encompassing advanced graphics, intricate gameplay, and broad appeal over four decades. The data includes genres, game descriptions, producers, developers, usage, Metacritic ratings, and supported platforms, to name a few variables. Also, due to more granular information about publishers and developers not being available on the RAWG API, another dataset - containing publishers, developers, and sub-genres - were scraped from Wikipedia (Wikipedia contributors, 2023).\n\nUsing a Random Forest Classifier and Principal Component Analysis (PCA) machine learning (ML) techniques from scikit-learn 1.3.0 in Python (Pedregosa et al., 2011), we developed a predictive model based on the top 25 features of our PCA to identify the types of games that are likely to be the most successful in the broad gaming space as well as specific markets. We tested Support Vector Classifier (SVC), Random Forest Classifier, Gradient Boosting Classifier, and Logistic Regression to see which had the most significant impact and best results. Cleaning, preprocessing, featured engineering, feature selection, hyperparameter tuning, and multiple feature importance methods were crucial in determining the final model.\n\nThe key performance metrics used to evaluate the model were AUC (Area Under the Curve), Kappa, accuracy, precision, recall, and confusion matrix. \n\nOur model has demonstrated a level of accuracy that will effectively predict the potential success of games before production. The best outcome for our model is to provide actionable insights that guide game developers, publishers, and investors in making informed decisions about resource allocation, marketing strategies, and game development directions.\n\n## Data Collection\n\nIn this section, we delve into the methodology behind the acquisition of our dataset, which forms the foundation of our analysis. Our aim was to gather comprehensive and meaningful information about AAA game titles to facilitate a thorough exploration of their characteristics and trends.\n\n## Game Data Structure Scraper\n\nThis script is designed to fetch the overall structure of game data from the [RAWG Video Games Database API](https://rawg.io/apidocs). It focuses on genres like Action, Adventure, RPG, Strategy, Shooter, and Simulation to retrieve essential information such as game IDs, names, platforms, genres, and more. The gathered data forms the foundation for further analysis and insights in the gaming industry.\n\n### Prerequisites\n\nBefore running the script, ensure that you have the necessary libraries and an API key from the RAWG API. The script uses libraries such as `requests`, `os`, `dotenv`, `csv`, `BeautifulSoup`, and `time`.\n\n### How It Works\n\n1. The script loads environment variables from a `.env` file and fetches the API key.\n2. It defines parameters like the number of pages, page size, CSV file paths, field names, and genres to scrape.\n3. The script fetches game data for each genre and page, storing relevant information in CSV files.\n4. It extracts information like game names, descriptions, Metacritic scores, ratings, and more.\n5. The data gathered by this scraper forms the basis for more detailed data extraction using subsequent scripts.\n\n### Usage\n\n1. Make sure to set up your environment variables in a `.env` file.\n2. Install the required libraries using `pip install -r requirements.txt`.\n3. Run the script and monitor the console for progress updates.\n\n**Note:** The script follows API usage guidelines and includes time delays to avoid exceeding request limits.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport json\nimport pandas as pd\nimport requests\nimport os\nfrom dotenv import load_dotenv\nimport csv\nfrom bs4 import BeautifulSoup\nimport time\n\n# Load the environment variables from .env file\nload_dotenv()\n\n# Get the API key from the environment variable\napi_key = os.getenv(\"API_KEY\")\n\n# Specify the number of pages and page size\ntotal_pages = 50\npage_size = 40\n\n# Define the CSV file paths\nfull_csv_file = \"game_data_full.csv\"\nsummary_csv_file = \"game_data_summary.csv\"\ncombined_csv_file = \"combined_data.csv\"\n\n# Define the field names for the CSV files\nfull_fieldnames = [\n    \"id\",\n    \"name\",\n    \"released\",\n    \"background_image\",\n    \"metacritic\",\n    \"playtime\",\n    \"esrb_rating_name\",\n    \"platform_name\",\n    \"genre\"\n]\n\nsummary_fieldnames = [\n    \"id\",\n    \"name\"\n]\n\ncombined_fieldnames = [\n    \"id\",\n    \"name\",\n    \"description\"\n]\n\n# Define the genres to scrape\ngenres = [\n    {\"name\": \"Action\", \"slug\": \"action\"},\n    {\"name\": \"Adventure\", \"slug\": \"adventure\"},\n    {\"name\": \"RPG\", \"slug\": \"role-playing-games-rpg\"},\n    {\"name\": \"Strategy\", \"slug\": \"strategy\"},\n    {\"name\": \"Shooter\", \"slug\": \"shooter\"},\n    {\"name\": \"Simulation\", \"slug\": \"simulation\"}\n]\n\n# Open the full CSV file in write mode and write the header row\nwith open(full_csv_file, mode=\"w\", newline=\"\", encoding=\"utf-8\") as full_file:\n    full_writer = csv.DictWriter(full_file, fieldnames=full_fieldnames)\n    full_writer.writeheader()\n\n    # Loop over the desired genres\n    for genre in genres:\n        genre_name = genre[\"name\"]\n        genre_slug = genre[\"slug\"]\n\n        game_count = 0\n\n        # Loop over the desired number of pages\n        for page in range(1, total_pages + 1):\n            # Construct the URL with the appropriate page number, genre, and other parameters\n            url = f\"https://api.rawg.io/api/games?key={api_key}&page={page}&page_size={page_size}&genres={genre_slug}\"\n\n            # Send a GET request to the URL and retrieve the JSON data\n            response = requests.get(url)\n            status_code = response.status_code\n            data = response.json()\n\n            # Check if the response was successful\n            if status_code == 200:\n                results = data[\"results\"]\n                game_count += len(results)\n                print(f\"The request was successful, Main JSON Structure: {genre_name}, [{game_count}]\")\n                # Extract the relevant information from the JSON structure\n                results = data[\"results\"]\n\n                # Iterate over the results and write each row to the full CSV file\n                for result in results:\n                    platforms = result.get(\"platforms\")\n                    if platforms is not None:  # Check if platforms is not None\n                        for platform_data in platforms:\n                            platform = platform_data.get(\"platform\", {})\n                            requirements = platform_data.get(\"requirements\", {})\n                            esrb_rating = result.get(\"esrb_rating\")\n                            esrb_rating_name = esrb_rating.get(\"name\") if esrb_rating is not None else \"\"\n                            row = {\n                                \"id\": result[\"id\"],\n                                \"name\": result[\"name\"],\n                                \"released\": result[\"released\"],\n                                \"background_image\": result[\"background_image\"],\n                                \"metacritic\": result.get(\"metacritic\", 0),\n                                \"playtime\": result.get(\"playtime\", 0),\n                                \"esrb_rating_name\": esrb_rating_name,\n                                \"platform_name\": platform.get(\"name\", \"\"),\n                                \"genre\": genre_name\n                            }\n                            full_writer.writerow(row)\n            else:\n                print(f\"Failed to retrieve data for genre: {genre_name}\")\n\n        # Sleep for 1 minute after processing each genre\n        print(\"Wait for 60 seconds...\")\n        time.sleep(60)\n        print(\"GO!\")\n\n# Create a set to store unique IDs\nunique_ids = set()\n\n# Open the summary CSV file in write mode and write the header row\nwith open(summary_csv_file, mode=\"w\", newline=\"\", encoding=\"utf-8\") as summary_file:\n    summary_writer = csv.DictWriter(summary_file, fieldnames=summary_fieldnames)\n    summary_writer.writeheader()\n\n    # Open the full CSV file in read mode\n    with open(full_csv_file, mode=\"r\", encoding=\"utf-8\") as full_file:\n        full_reader = csv.DictReader(full_file)\n\n        # Iterate over the rows in the full CSV file\n        for row in full_reader:\n            game_id = row[\"id\"]\n\n            # Check if the ID is already in the set of unique IDs\n            if game_id not in unique_ids:\n                # Add the ID to the set of unique IDs\n                unique_ids.add(game_id)\n\n                # Write the 'id' and 'name' columns to the summary CSV file\n                summary_row = {\n                    \"id\": game_id,\n                    \"name\": row[\"name\"]\n                }\n                summary_writer.writerow(summary_row)\n\n\n# Counter for keeping track of requests\nrequest_counter = 0\n\n# Open the combined CSV file in write mode and write the header row\nwith open(combined_csv_file, mode=\"w\", newline=\"\", encoding=\"utf-8\") as combined_file:\n    combined_writer = csv.DictWriter(combined_file, fieldnames=combined_fieldnames)\n    combined_writer.writeheader()\n\n    # Open the summary CSV file in read mode\n    with open(summary_csv_file, mode=\"r\", encoding=\"utf-8\") as summary_file:\n        summary_reader = csv.DictReader(summary_file)\n\n        # Iterate over the rows in the summary CSV file\n        for row in summary_reader:\n            game_id = row[\"id\"]\n            game_name = row[\"name\"]\n\n            # Construct the URL for the game details using the game ID\n            game_details_url = f\"https://api.rawg.io/api/games/{game_id}?key={api_key}\"\n\n            # Send a GET request to the game details URL and retrieve the JSON data\n            game_details_response = requests.get(game_details_url)\n            status_code = game_details_response.status_code\n            \n            try:\n                game_details_data = game_details_response.json()\n            except json.decoder.JSONDecodeError:\n                print(f\"Failed to parse JSON for game: {game_name}\")\n                continue\n            # Check if the response was successful\n            if status_code == 200:\n                print(f\"Request was successful, Second JSON Structure: {game_name}\")\n                # Extract the 'description' from the JSON structure\n                game_description_html = game_details_data[\"description\"]\n\n                # Remove HTML tags from the description\n                soup = BeautifulSoup(game_description_html, \"html.parser\")\n                game_description = soup.get_text()\n\n                # Write the 'id', 'name', and 'description' columns to the combined CSV file\n                combined_row = {\n                    \"id\": game_id,\n                    \"name\": game_name,\n                    \"description\": game_description\n                }\n                combined_writer.writerow(combined_row)\n            else:\n                print(f\"Failed to retrieve description for game: {game_name}\")\n            # Increment the request counter\n            request_counter += 1\n\n            # Check if 100 requests have been made\n            if request_counter % 100 == 0:\n                # Wait for 30 seconds\n                print(\"Wait for 30 seconds...\")\n                time.sleep(30)\n                print(\"GO!\")\n\nprint(f\"Data has been scraped and saved to {full_csv_file}, {summary_csv_file}, and {combined_csv_file}.\")\n\n\n# Read the combined CSV file into a pandas DataFrame\ncombined_df = pd.read_csv(combined_csv_file)\n\n# Read the full CSV file into a pandas DataFrame\nfull_df = pd.read_csv(full_csv_file)\n\n# Merge the DataFrames based on the 'id' column\nmerged_df = full_df.merge(combined_df[['id', 'description']], on='id', how='left')\n\n# Save the merged DataFrame to a new CSV file\nmerged_df.to_csv(\"gamesMetacritic.csv\", index=False)\n\nprint(\"The final merged CSV file 'gamesMetacritic.csv' has been created.\")\n```\n:::\n\n\n## Game Data Details Scraper\n\nThis script serves to gather specific details for each game identified using their unique IDs, obtained from the initial data structure scraping. It interacts with the [RAWG Video Games Database API](https://rawg.io/apidocs) to fetch in-depth information such as game descriptions, Metacritic scores, ratings, playtime, platform availability, and more. The collected data enriches the overall dataset, providing comprehensive insights into individual games.\n\n### Prerequisites\n\nBefore running the script, make sure you have the required libraries (`requests`, `os`, `dotenv`, `csv`, `BeautifulSoup`) installed. Additionally, set up your environment variables in a `.env` file with your RAWG API key.\n\n### How It Works\n\n1. The script loads environment variables from a `.env` file and fetches the API key.\n2. It defines functions to unnest platform data and scrape specific game data using API calls.\n3. The script reads a list of unique game IDs from a CSV file (\"metacriticML.csv\").\n4. It interacts with the API to fetch detailed information for each game ID, including descriptions, ratings, and more.\n5. The extracted data is cleaned, processed, and saved into a CSV file (\"game_data.csv\") for further analysis.\n\n### Usage\n\n1. Set up your environment variables in a `.env` file.\n2. Install the required libraries using `pip install -r requirements.txt`.\n3. Prepare a CSV file (\"metacriticML.csv\") containing a column of unique game IDs.\n4. Run the script and monitor the console for progress updates.\n\n**Note:** This script follows API usage guidelines and includes error handling and data cleaning for robust scraping.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport requests\nimport os\nfrom dotenv import load_dotenv\nimport csv\nfrom bs4 import BeautifulSoup\n\n# Load the environment variables from .env file\nload_dotenv()\n\n# Get the API key from the environment variable\napi_key = os.getenv(\"API_KEY\")\n\ndef unnest_platforms(platforms):\n    platform_names = []\n    for platform in platforms:\n        platform_name = platform[\"platform\"][\"name\"]\n        platform_names.append(platform_name)\n    return platform_names\n\ndef scrape_api_data(game_id):\n    url = f\"https://api.rawg.io/api/games/{game_id}?key={api_key}\"\n\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            json_data = response.json()\n\n            # Extracting specific fields from JSON\n            name = json_data[\"name\"]\n            description = json_data[\"description\"]\n            metacritic = json_data[\"metacritic\"]\n            rating = json_data[\"rating\"]\n            rating_top = json_data[\"rating_top\"]\n            playtime = json_data[\"playtime\"]\n            screenshots_count = json_data[\"screenshots_count\"]\n            movies_count = json_data[\"movies_count\"]\n            creators_count = json_data[\"creators_count\"]\n            twitch_count = json_data[\"twitch_count\"]\n            reviews_text_count = json_data[\"reviews_text_count\"]\n            ratings_count = json_data[\"ratings_count\"]\n            game_series_count = json_data[\"game_series_count\"]\n            esrb_rating = json_data[\"esrb_rating\"][\"name\"] if json_data.get(\"esrb_rating\") else \"Not Rated\"\n            platforms = json_data.get(\"platforms\", [])  # Unnested platforms\n\n            # Remove HTML tags from the description\n            soup = BeautifulSoup(description, \"html.parser\")\n            description_cleaned = soup.get_text()\n\n            # Unnest platforms and extract platform names\n            platform_names = unnest_platforms(platforms)\n\n            # Create a list of the extracted data\n            data = [name, description_cleaned, metacritic, rating, rating_top, playtime,\n                    screenshots_count, movies_count, creators_count, twitch_count,\n                    reviews_text_count, ratings_count, game_series_count, esrb_rating]\n\n            # Create separate rows for each platform\n            rows = []\n            for platform_name in platform_names:\n                row = data.copy()\n                row.append(platform_name)\n                rows.append(row)\n\n            return rows\n\n        else:\n            print(f\"Error: API request failed with status code {response.status_code}\")\n            return None\n\n    except requests.exceptions.RequestException as e:\n        print(\"Error: Failed to connect to the API:\", str(e))\n        return None\n\n\n# Read the game IDs from the \"metacriticML.csv\" file\ncsv_file = \"metacriticML.csv\"\ngame_ids = set()\n\nwith open(csv_file, \"r\") as file:\n    reader = csv.reader(file)\n    next(reader)  # Skip the header row\n    for row in reader:\n        game_id = row[0]\n        game_ids.add(game_id)\n\n# Define the CSV file path and filename to store the scraped data\noutput_csv_file = \"game_data.csv\"\n\n# Scrape data for each unique game ID and write it to the output CSV file\nwith open(output_csv_file, \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n    writer.writerow(['Name', 'Description', 'Metacritic', 'Rating', 'Top Rating',\n                     'Playtime', 'Screenshots Count', 'Movies Count', 'Creators Count',\n                     'Twitch Count', 'Reviews Text Count', 'Ratings Count',\n                     'Game Series Count', 'ESRB Rating', 'Platforms'])\n\n    for game_id in game_ids:\n        data = scrape_api_data(game_id)\n        if data:\n            for row in data:\n                writer.writerow(row)\n\nprint(\"Data scraping completed and saved to game_data.csv\")\n```\n:::\n\n\n## Game Details Scraper from Wikipedia\n\nThis script focuses on extracting specific game details such as developers, publishers, game modes, and genres from Wikipedia pages. It utilizes a list of unique game names obtained from previous data scraping steps, aiming to enrich the dataset with comprehensive information. The scraped data is then saved into a CSV file for further analysis.\n\n### Prerequisites\n\nBefore running the script, ensure that you have the required libraries (`csv`, `time`, `requests`, `BeautifulSoup`) installed.\n\n### How It Works\n\n1. The script defines a function `scrape_wikipedia_page(game_name)` to fetch details from a Wikipedia page related to a specific game name.\n2. It constructs the URL for the Wikipedia page and sends a GET request to retrieve the HTML content.\n3. The script uses BeautifulSoup to parse the HTML content and locate the infobox table containing relevant information.\n4. Developers, publishers, game modes, and genres are extracted from the infobox table based on specific labels.\n5. The script also includes a function `capitalize_special_cases(word)` to handle special cases in word capitalization.\n6. It reads unique game names from a CSV file (\"gamesMetacritic.csv\") and processes them for Wikipedia page access.\n7. The extracted data is written to a new CSV file (\"game_info.csv\") with columns for game names, developers, publishers, game modes, and genres.\n\n### Usage\n\n1. Install the required libraries using `pip install -r requirements.txt`.\n2. Prepare a CSV file (\"gamesMetacritic.csv\") containing unique game names.\n3. Run the script and monitor the console for progress updates.\n\n**Note:** The script follows API usage guidelines, includes error handling, and manages request delays to ensure robust scraping.\n\n\n```{r}\n#| eval: false\n\nimport csv\nimport time\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_wikipedia_page(game_name):\n    # Construct the URL for the Wikipedia page\n    url = f\"https://en.wikipedia.org/wiki/{game_name}\"\n\n    # Send a GET request to retrieve the HTML content\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        # Parse the HTML content using BeautifulSoup\n        soup = BeautifulSoup(response.content, 'html.parser')\n\n        # Find the developer, publisher, game mode, and genre information in the infobox table\n        infobox_table = soup.find('table', {'class': 'infobox'})\n        if infobox_table:\n            rows = infobox_table.find_all('tr')\n            developers = None\n            publishers = None\n            game_modes = None\n            genres = None\n            for row in rows:\n                label = row.find('th', {'scope': 'row', 'class': 'infobox-label'})\n                if label:\n                    label_text = label.text.strip()\n                    if label_text == 'Developer(s)':\n                        data = row.find('td', {'class': 'infobox-data'})\n                        if data:\n                            developers = data.text.strip()\n                    elif label_text == 'Publisher(s)':\n                        data = row.find('td', {'class': 'infobox-data'})\n                        if data:\n                            publishers = data.text.strip()\n                    elif label_text == 'Mode(s)':\n                        data = row.find('td', {'class': 'infobox-data'})\n                        if data:\n                            game_modes = data.text.strip()\n                    elif label_text == 'Genre(s)':\n                        data = row.find('td', {'class': 'infobox-data'})\n                        if data:\n                            genres = data.text.strip()\n                if developers is not None and publishers is not None and game_modes is not None and genres is not None:\n                    break\n\n            if developers is not None and publishers is not None and game_modes is not None and genres is not None:\n                return developers, publishers, game_modes, genres\n\n        print(f\"Failed to find complete developer, publisher, game mode, and genre information for '{game_name}'.\")\n    else:\n        print(f\"Request for '{game_name}' failed with status code {response.status_code}.\")\n\n    return None\n\n\ndef capitalize_special_cases(word):\n    # Special cases: Roman numerals and other specific patterns\n    special_cases = {\n        \"ii\": \"II\",\n        \"iii\": \"III\",\n        \"iv\": \"IV\",\n        \"v\": \"V\",\n        \"vi\": \"VI\",\n        \"vii\": \"VII\",\n        \"viii\": \"VIII\",\n        \"ix\": \"IX\"\n    }\n    if word.lower() in special_cases:\n        return special_cases[word.lower()]\n    if \":\" in word:\n        parts = word.split(\":\")\n        return \":\".join(capitalize_special_cases(part) for part in parts)\n    if word.lower() in [\"of\", \"the\", \"in\"]:\n        return word.lower()\n    return word.capitalize()\n\n# Read the unique game names from the \"name\" column of \"gameMetacritic.csv\"\ngame_names = set()\nwith open(\"gamesMetacritic.csv\", \"r\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        game_name = row[\"name\"].replace(\"_\", \" \")\n        # Remove the year from the game name\n        game_name = game_name.split(\"(\")[0].strip()\n        # Remove trailing underscore\n        game_name = game_name.rstrip(\"_\")\n        # Capitalize each word including special cases\n        game_name = \" \".join(capitalize_special_cases(word) for word in game_name.split())\n        # Remove spaces and replace with underscores\n        game_name = game_name.replace(\" \", \"_\")\n        game_names.add(game_name)\n\n# Create a CSV file\nwith open(\"game_info.csv\", \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Game Name\", \"Developers\", \"Publishers\", \"Game Modes\", \"Genres\"])\n\n    count = 0\n    for game_name in game_names:\n        count += 1\n\n        result = scrape_wikipedia_page(game_name)\n        print(result)\n        if result is not None:\n            developers, publishers, game_modes, genres = result\n            writer.writerow([game_name, developers, publishers, game_modes, genres])\n        else:\n            continue\n\n        # Print progress message after every 100 requests\n        if count % 100 == 0:\n            print(f\"Processed {count} requests.\")\n\n        # Add a sleep of 30 seconds after every 1000 requests\n        if count % 1000 == 0:\n            print(\"Sleeping for 30 seconds...\")\n            time.sleep(30)\n\nprint(\"Data saved to game_info.csv.\")\n```\n\n\n## Data Wrangling\n\nIn this section, we embark on the critical journey of data wrangling, where we transform raw and unstructured gaming data into a refined and organized format that serves as the foundation for our analyses. Our focus here is on the meticulous processes of data collection, cleaning, and preparation that ensure the integrity and usability of our dataset\n\n## Game Data Preprocessor\n\nThis script preprocesses game data from a CSV file named 'gamesMetacritic.csv' to enhance the consistency and formatting of the game names. It capitalizes special cases, removes years from game names, replaces spaces with underscores, and updates the dataset with the processed game names.\n\n### How It Works\n\n1. The script defines a function `capitalize_special_cases` to handle capitalization rules for special cases, such as Roman numerals and specific patterns.\n2. It reads the original game data from 'gamesMetacritic.csv' using the `csv.DictReader` class.\n3. The fieldnames (column names) are retrieved from the original file for later use.\n4. For each row in the dataset, the script processes the game name:\n   - Removes underscores and replaces them with spaces.\n   - Removes the year from the game name by splitting at \"(\" and stripping whitespace.\n   - Capitalizes each word using the `capitalize_special_cases` function and joins them with underscores.\n5. The \"Name\" column in each row is updated with the processed game name, and the updated rows are stored in a list.\n6. The script creates a new CSV file named 'gamesMetacriticUpdated.csv' and writes the updated data to it using the `csv.DictWriter` class. The header is written first using `writer.writeheader()`, followed by the updated rows using `writer.writerows(updated_rows)`.\n\n### Usage\n\n1. Ensure you have the 'gamesMetacritic.csv' file containing the game data with the \"name\" column.\n2. Run the script to preprocess the game data.\n3. After execution, the script generates a new CSV file named 'gamesMetacriticUpdated.csv' with the updated and preprocessed game data.\n\n**Note:** This script is designed to improve the formatting and consistency of game names in the dataset, making it easier to work with and analyze the data.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport csv\n\ndef capitalize_special_cases(word):\n    # Special cases: Roman numerals and other specific patterns\n    special_cases = {\n        \"ii\": \"II\",\n        \"iii\": \"III\",\n        \"iv\": \"IV\",\n        \"v\": \"V\",\n        \"vi\": \"VI\",\n        \"vii\": \"VII\",\n        \"viii\": \"VIII\",\n        \"ix\": \"IX\"\n    }\n    if word.lower() in special_cases:\n        return special_cases[word.lower()]\n    if \":\" in word:\n        parts = word.split(\":\")\n        return \":\".join(capitalize_special_cases(part) for part in parts)\n    if word.lower() in [\"of\", \"the\", \"in\"]:\n        return word.lower()\n    return word.capitalize()\n\n# Read the game data from \"gamesMetacritic.csv\" and update the \"Name\" column\nupdated_rows = []\nwith open(\"gamesMetacritic.csv\", \"r\") as file:\n    reader = csv.DictReader(file)\n    fieldnames = reader.fieldnames  # Retrieve the fieldnames from the original file\n    for row in reader:\n        game_name = row[\"name\"].replace(\"_\", \" \")\n        # Remove the year from the game name\n        game_name = game_name.split(\"(\")[0].strip()\n        # Remove trailing underscore\n        game_name = game_name.rstrip(\"_\")\n        # Capitalize each word including special cases\n        game_name = \" \".join(capitalize_special_cases(word) for word in game_name.split())\n        # Remove spaces and replace with underscores\n        game_name = game_name.replace(\" \", \"_\")\n\n        # Update the \"Name\" column in the row\n        row[\"name\"] = game_name\n\n        # Append the updated row to the list\n        updated_rows.append(row)\n\n# Write the updated data to a new CSV file\nwith open(\"gamesMetacriticUpdated.csv\", \"w\", newline=\"\") as file:\n    writer = csv.DictWriter(file, fieldnames=fieldnames)\n    writer.writeheader()  # Write the header\n    writer.writerows(updated_rows)  # Write the updated rows\n```\n:::\n\n\n## Game Information Merger\n\nThis script aims to merge two CSV files containing game information based on shared columns. The primary objective is to combine details from both datasets into a single comprehensive dataset for analysis and visualization.\n\n### Prerequisites\n\nEnsure you have the `pandas` library installed by using the command `pip install pandas`.\n\n### How It Works\n\n1. The script begins by reading two CSV files: 'game_info.csv' and 'gamesMetacriticUpdated.csv'.\n2. Using the `pandas` library, it loads the contents of both CSV files into separate dataframes: `game_info` and `games_metacritic`.\n3. The script proceeds to merge these two dataframes using the 'Game Name' column from the `game_info` dataframe and the 'name' column from the `games_metacritic` dataframe.\n4. The resulting merged dataframe, named `merged_df`, contains combined information from both input dataframes.\n5. To refine the dataset, the script drops the 'Game Name' column, as it is no longer needed.\n6. Finally, the updated `merged_df` is saved to a new CSV file named 'merged_games.csv'.\n\n### Usage\n\n1. Ensure you have the CSV files 'game_info.csv' and 'gamesMetacriticUpdated.csv' with the game information you want to merge.\n2. Run the script and monitor the console for progress updates.\n3. Upon completion, you'll find the merged and refined dataset in the 'merged_games.csv' file.\n\n**Note:** The script enables the consolidation of game information from two separate datasets, producing a unified dataset that incorporates details from both input files.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Read the CSV files\ngame_info = pd.read_csv('game_info.csv')\ngames_metacritic = pd.read_csv('gamesMetacriticUpdated.csv')\n\n# Merge the two dataframes based on the 'Game Name' and 'name' columns\nmerged_df = pd.merge(game_info, games_metacritic, left_on='Game Name', right_on='name')\n\n# Drop the 'Game Name' column from the merged DataFrame\nmerged_df.drop('Game Name', axis=1, inplace=True)\n\n# Write the merged DataFrame to a new CSV file\nmerged_df.to_csv('merged_games.csv', index=False)\n```\n:::\n\n\n## Game Data Refiner\n\nThis script is designed to refine and enhance a merged game dataset by reordering columns, renaming columns, and cleaning up data. It aims to improve data consistency and readability for analysis and further processing.\n\n### Prerequisites\n\nEnsure you have the `pandas` library installed by using the command `pip install pandas`.\n\n### How It Works\n\n1. The script starts by reading a CSV file named 'merged_games.csv' into a dataframe named `df`.\n2. Column names are updated by converting them to lowercase and removing spaces to ensure uniformity and compatibility.\n3. The script defines a desired column order using the `desired_order` list, which arranges columns in a logical and meaningful sequence.\n4. Columns in the dataframe are reordered based on the defined order, while any remaining columns are appended at the end to maintain completeness.\n5. The 'name' column is refined by replacing underscores with spaces and applying title case capitalization.\n6. The updated dataframe, now with improved column names, order, and refined data, is saved to a new CSV file named 'updated_merged_games.csv'.\n\n### Usage\n\n1. Make sure you have the 'merged_games.csv' file containing the merged game dataset.\n2. Run the script and monitor the console for progress updates.\n3. Upon completion, the script generates an enhanced and refined dataset in the 'updated_merged_games.csv' file.\n\n**Note:** This script offers a process to standardize column names, reorganize column order, and clean up data in preparation for analysis, ensuring a more organized and readable dataset.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Read the CSV file\ndf = pd.read_csv('merged_games.csv')\n\n# Update column names\ndf.columns = df.columns.str.lower().str.replace(' ', '')\n\n# Define the desired column order\ndesired_order = ['id', 'name', 'released', 'metacritic', 'playtime', 'platform_name', 'developers', 'publishers', 'esrb_rating_name',  'gamemodes', 'genres', 'genre', 'description', 'background_image']\n\n# Reorder the columns\ndf = df[desired_order + [col for col in df.columns if col not in desired_order]]\n\n# Get the remaining columns\nremaining_columns = [col for col in df.columns if col not in desired_order]\n\n# Append the remaining columns to the end\ndf = df[desired_order + remaining_columns]\n\n# Fix the 'name' column\ndf['name'] = df['name'].str.replace('_', ' ').str.title()\n\n# Save the updated DataFrame to a new CSV file\ndf.to_csv('updated_merged_games.csv', index=False)\n```\n:::\n\n\n## Game Category Refiner\n\nThis script refines and simplifies the game categories listed in a dataset. It replaces complex and varied category descriptions with standardized and simplified categories, making it easier to analyze and categorize games consistently.\n\n### Prerequisites\n\nEnsure you have the `pandas` library installed by using the command `pip install pandas`.\n\n### How It Works\n\n1. The script begins by reading a CSV file named 'updated_merged_games.csv' into a dataframe named `df`.\n2. A `category_mapping` dictionary is defined to map the current categories to their simplified counterparts.\n3. A function `create_rows` is defined to split each row's 'gamemodes' value into a list of categories. It then creates new rows for each simplified category.\n4. The script iterates through each row in the dataset and uses the `create_rows` function to generate new rows with simplified categories.\n5. A new dataframe named `new_df` is created from the generated new rows.\n6. The updated dataframe with simplified categories is saved to a new CSV file named 'simplified_games.csv'.\n\n### Usage\n\n1. Make sure you have the 'updated_merged_games.csv' file containing the merged game dataset.\n2. Run the script and monitor the console for progress updates.\n3. After completion, the script generates a refined dataset with simplified game categories in the 'simplified_games.csv' file.\n\n**Note:** This script is designed to enhance the usability and consistency of game category information, ensuring that all games share standardized categories for more effective analysis.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Read the dataset\ndf = pd.read_csv('updated_merged_games.csv')\n\n# Map the current categories to the simplified categories\ncategory_mapping = {\n    'Single-player': 'Single-player',\n    'Single-player, multiplayer': 'Multiplayer',\n    'Multiplayer': 'Multiplayer',\n    'Single-player, multiplayer (Steam and Nintendo Switch only)': 'Multiplayer',\n    'Single-player, Multiplayer': 'Multiplayer',\n    'Single-playerMultiplayer': 'Multiplayer',\n    'Single player': 'Single-player',\n    'Single-player, online multiplayer': 'Multiplayer',\n    'Single player, multiplayer': 'Multiplayer',\n    'Online multiplayer': 'Multiplayer',\n    'Single player, Multiplayer': 'Multiplayer',\n    'Single-player[3]': 'Single-player',\n    'Single playerMultiplayer': 'Multiplayer',\n    'Single-player, multiplayer[7]': 'Multiplayer',\n    'Single-player\\nCo-op': '2-player co-op',\n    'Single-player, multiplayer[2]': 'Multiplayer',\n    'Single-player. multiplayer': 'Multiplayer',\n    'Multiplayer, single-player': 'Multiplayer',\n    'PvP, PvE': 'Multiplayer',\n    'Single-playerMultiplayer[b]': 'Multiplayer',\n    'Multiplayer, Singleplayer (Only with CD)': 'Multiplayer',\n    'Single-player, online multiplayer[2]': 'Multiplayer',\n    'Single-player, multiplayer (Switch only)': 'Multiplayer',\n    'Single-player, multiplayer[a]': 'Multiplayer',\n    'Online multiplayer, single player, cooperative gameplay': 'Multiplayer',\n    'Single-player, competitive multiplayer': 'Multiplayer',\n    'Single-player2 player Co-op': '2-player co-op',\n    'Multiplayersingle-player': 'Multiplayer',\n    'Single-player, multiplayer (DS)': 'Multiplayer',\n    'single-player, Multiplayer': 'Multiplayer',\n    'multiplayer': 'Multiplayer',\n    'Single-player, multiplayer (remake only)': 'Multiplayer',\n    'Two Player': 'Multiplayer',\n    'Single-player\\nMultiplayer': 'Multiplayer',\n    'Single-Player': 'Single-player',\n    'Single player, co-op multiplayer': 'Multiplayer',\n    'Single-player, local co-op': '2-player co-op',\n    'Single player, multiplayer (online)': 'Multiplayer',\n    'Single player and multiplayer': 'Multiplayer',\n    'Single-player, multiplayer[d]': 'Multiplayer',\n    'Multiplayer online': 'Multiplayer',\n    '1-2 players alternating turns': 'Multiplayer',\n    'Single-player, co-op, multiplayer': 'Multiplayer',\n    'Multiplayer,[1] Co-op': 'Multiplayer',\n    'Single-player, Co-op': '2-player co-op',\n    'Single-player, multiplayer, online': 'Multiplayer',\n    'Single-player, two player cooperative': '2-player co-op',\n    'Multiplayer, Open World': 'Multiplayer',\n    'Single-player (Xbox One, Xbox 360, Windows), multiplayer (Xbox One,[1] Windows)': 'Multiplayer',\n    'Single-player, multi-player': 'Multiplayer',\n    'single-player': 'Single-player',\n    'Single player, cooperative': 'Multiplayer',\n    'Singleplayer and Multiplayer': 'Multiplayer',\n    'Single-player, Local Co-Op': '2-player co-op',\n    'Single-player, multiplayer (PC)': 'Multiplayer',\n    'Single-player, multiplayer (2017 version only)': 'Multiplayer',\n    'Single-player, Offline Co-Op (up to 2 players)': '2-player co-op',\n    'Single-player, Cooperative multiplayer': 'Multiplayer',\n    'Multiplayer, Player versus Environment (AI)': 'Multiplayer',\n    'Single-player, multiplayer (PSP)': 'Multiplayer',\n    'Single-player  2 player cooperative': '2-player co-op',\n    'Single-playerco-op': 'Multiplayer',\n    'Single player, multiplayer (IPX, TCP/IP or Modem)': 'Multiplayer',\n    'Single Player': 'Single-player',\n    'Single-player[1]': 'Single-player',\n    'Single-player, Multi-player': 'Multiplayer',\n    'Single-player, co-op': '2-player co-op',\n    'Single-player video game': 'Single-player',\n    'Single-player video game, multiplayer video game': 'Multiplayer',\n    'Single-player, multiplayer, co-op': 'Multiplayer',\n    'SingleplayerMultiplayer': 'Multiplayer',\n    'Single-player, Cooperative': 'Multiplayer',\n    'Single-player multiplayer': 'Multiplayer',\n    'Single-playerMultiplayer (Vita only)': 'Multiplayer',\n    'Two-player': 'Multiplayer',\n    'Single-player, co-op multiplayer': 'Multiplayer',\n    'Multiplayer[1][2]': 'Multiplayer',\n    'Single-player, online co-op': 'Multiplayer',\n    'MMO': 'Multiplayer',\n    'Single-player, 2-player cooperative': '2-player co-op',\n    'Single-player, multiplayer (Windows and Mac OS X only)': 'Multiplayer',\n    'Single-player, Co-op, Multiplayer': 'Multiplayer',\n    'Single-player, multiplayer[c]': 'Multiplayer',\n    'Up to 2 players simultaneously': 'Multiplayer',\n    'Up to 2 players, alternating turns': 'Multiplayer',\n    '1-2 players alternating': 'Multiplayer',\n    'Single-player, two player': '2-player co-op',\n    'Single player\\nMulti player': 'Multiplayer',\n    'single-playermultiplayer (turn-based)': 'Multiplayer',\n    'Single-player / Co-op / Multiplayer': 'Multiplayer',\n    'online multiplayer': 'Multiplayer',\n    'Single-player, multiplayer (Wii only)': 'Multiplayer',\n    'Single-player, local cooperative': '2-player co-op',\n    'Single-player, multiplayer[6]': 'Multiplayer',\n    'Multiplayer, co-op': 'Multiplayer',\n    'Single-player, two-player co-op': '2-player co-op',\n    'single-player, multiplayer': 'Multiplayer',\n    'Single-player,  Multiplayer': 'Multiplayer',\n    '1 or 2 player co-operative': '2-player co-op',\n    'Single-player, Multiplayer, Multiplayer co-op': 'Multiplayer',\n    'Single-player, multiplayer (PlayStation only)': 'Multiplayer',\n    'Single-player, multiplayer[1]': 'Multiplayer',\n    '1 Player': 'Single-player',\n    'Singleplayer, Multiplayer': 'Multiplayer',\n    'Single-playerMultiplayer (original release only)[4]': 'Multiplayer',\n    'Single-player, 2 player co-op': '2-player co-op',\n    'Single player, 2 player co-op': '2-player co-op',\n    'Singleplayer,  multiplayer': 'Multiplayer',\n    'Single-player, cooperative multiplayer': 'Multiplayer',\n    'Cooperative video gamemultiplayersingle-player': 'Multiplayer',\n    'Single-player  Multiplayer (2-3 players)': 'Multiplayer',\n    'Single-player  multiplayer': 'Multiplayer',\n    'Single-player, local & online multiplayer': 'Multiplayer',\n    'Single-playing': 'Single-player',\n    'Single-player, multiplayer[b]': 'Multiplayer',\n    'Single-player, multiplayer (alternating)': 'Multiplayer',\n    'Single-player, multiplayer (Windows, Mac)': 'Multiplayer',\n    'Single-player, multiplayer[4]': 'Multiplayer',\n    'ArcadeSingle-player, 2–4 player (co-op)Mega Drive/Genesis1–2 player (co-op, versus mode)SNES1–2 player (co-op)PlayStation 4, Switch1-4 player': 'Multiplayer',\n    'Single-player, cooperative': 'Multiplayer',\n    'Single-playermultiplayer': 'Multiplayer',\n    'Single-player, 2 players alternating': '2-player co-op',\n    'Single-player, multiplayer (Switch)': 'Multiplayer',\n    'Single-player, multiplayer (GameCube only)': 'Multiplayer',\n    'Wii:Single-playerMultiplayer': 'Multiplayer',\n    'Single-player, co-op Multiplayer': 'Multiplayer',\n    'Single-player, multiplayer[3]': 'Multiplayer',\n    'Up to 2 players, alternating': 'Multiplayer',\n    'Single player, netplay': 'Multiplayer',\n    'Single and multiplayer': 'Multiplayer',\n    '3rd-person perspective, top-down': 'Multiplayer',\n    'Single-player, two-player': 'Multiplayer'\n}\n\n# Function to create rows for each category in a game\ndef create_rows(row):\n    gamemodes = row['gamemodes'].split(',')  # Split the gamemodes into a list\n    new_rows = []\n    for gamemode in gamemodes:\n        gamemode = gamemode.strip()  # Remove leading/trailing whitespaces\n        simplified_gamemode = category_mapping.get(gamemode)\n        if simplified_gamemode:\n            new_row = row.copy()  # Create a copy of the current row\n            new_row['gamemodes'] = simplified_gamemode  # Update the gamemodes column\n            new_rows.append(new_row)  # Add the new row to the list\n    return new_rows\n\n# Create a list to store the new rows\nnew_rows = []\n\n# Iterate over each row in the dataset\nfor _, row in df.iterrows():\n    new_rows.extend(create_rows(row))\n\n# Create a new dataframe from the new rows\nnew_df = pd.DataFrame(new_rows)\n\n# Save the updated dataframe to a new CSV file\nnew_df.to_csv('simplified_games.csv', index=False)\n```\n:::\n\n\n## Dataset Publisher and Developer Cleaner\n\nThis script cleans and processes the publisher and developer information in a dataset stored in the 'simplified_games.csv' file. It removes unwanted words, years, and extraneous whitespace from the 'publishers' and 'developers' columns and saves the cleaned dataset to a new CSV file named 'cleanPubDev.csv'.\n\n### How It Works\n\n1. The script uses the `pandas` library to load the dataset from the 'simplified_games.csv' file.\n2. It defines a function `remove_unwanted_words` to clean text by:\n   - Removing text within parentheses using regular expressions.\n   - Removing text within square brackets using regular expressions.\n   - Removing standalone years (4 digits) using regular expressions.\n   - Removing extra whitespace and then stripping leading and trailing whitespace.\n3. The script applies the `remove_unwanted_words` function to the 'publishers' and 'developers' columns of the dataset using the `.apply()` method. This step effectively cleans the publisher and developer names.\n4. The cleaned dataset is saved to a new CSV file named 'cleanPubDev.csv' using the `.to_csv()` method with the parameter `index=False`.\n\n### Usage\n\n1. Make sure you have the 'simplified_games.csv' file containing the dataset with 'publishers' and 'developers' columns.\n2. Execute the script to clean the publisher and developer information.\n3. After execution, the script generates a new CSV file named 'cleanPubDev.csv' containing the cleaned dataset with improved publisher and developer information.\n\n**Note:** This script enhances the quality of the publisher and developer information in the dataset by removing unnecessary text, years, and whitespace, making it more suitable for analysis and visualization.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\nimport re\n\n# Load the dataset\nds = pd.read_csv(\"simplified_games.csv\")\n\n# Function to remove unwanted words and publishers/developers containing them\ndef remove_unwanted_words(text):\n    cleaned_text = re.sub(r'\\([^()]*\\)', '', text)  # Remove text within parentheses\n    cleaned_text = re.sub(r'\\[[^\\[\\]]*\\]', '', cleaned_text)  # Remove text within square brackets\n    cleaned_text = re.sub(r'\\b\\d{4}\\b', '', cleaned_text)  # Remove standalone years (4 digits)\n    cleaned_text = re.sub(r'\\s+', ' ', cleaned_text).strip()  # Remove extra whitespace\n    return cleaned_text\n\n# Apply the remove_unwanted_words function to 'publishers' and 'developers' columns\nds['publishers'] = ds['publishers'].apply(remove_unwanted_words)\nds['developers'] = ds['developers'].apply(remove_unwanted_words)\n\n# Write the updated dataset to a new CSV file\nds.to_csv('cleanPubDev.csv', index=False)\n```\n:::\n\n\n## Developer and Publisher Analysis and Enrichment\n\nThis R script focuses on analyzing developer and publisher information from the cleaned dataset 'cleanPubDev.csv' and enriches the data by identifying specific developers and publishers using string detection techniques. The enhanced dataset is then saved as 'Final_dev_pub.csv'.\n\n### Required Libraries\n\nThe script makes use of the following libraries:\n- `tidyverse` for data manipulation and visualization\n- `rio` for importing and exporting data\n- `fastDummies` for creating dummy variables\n\n### Importing and Displaying Data\n\nThe script starts by importing the cleaned dataset 'cleanPubDev.csv' using the `rio` library's `import()` function. The imported dataset is displayed to observe its contents.\n\n### Identifying Distinct Game Information\n\nThe script extracts distinct combinations of game names, developers, and publishers from the dataset to create a new dataframe named 'distinct_games'.\n\n### Analyzing Developers\n\nThe script groups and summarizes the developer information from 'distinct_games'. It then identifies specific developers using string detection techniques. Developers with very few games are flagged as \"other\" developers and removed from the original count column.\n\n### Analyzing Publishers\n\nSimilar to the developer analysis, the script groups and summarizes the publisher information from 'distinct_games'. It identifies specific publishers using string detection techniques. Publishers with very few games are flagged as \"other\" publishers, and special cases are handled. The original count column is then removed.\n\n### Joining and Exporting Enriched Data\n\nThe script joins the cleaned developer and publisher information with the original dataset based on 'developers' and 'publishers'. The enriched dataset is saved as 'Final_dev_pub.csv' using the `rio` library's `export()` function.\n\n### Usage\n\n1. Ensure you have the 'cleanPubDev.csv' file containing cleaned developer and publisher information.\n2. Execute the script to perform developer and publisher analysis and enrichment.\n3. After execution, the script generates the 'Final_dev_pub.csv' file, which contains the enriched dataset with identified developers and publishers.\n\nThis script provides valuable insights into the developer and publisher landscape of the games dataset and creates an enriched dataset for further analysis and visualization.\n\n\n```{r}\n#| eval: false\n#| echo: true\n\n# Load required libraries\nlibrary(tidyverse)  # For data manipulation and visualization\nlibrary(rio)        # For importing and exporting data\nlibrary(fastDummies)  # For creating dummy variables\n\n# Import the dataset\npub_dev <- import(\"../cleanPubDev.csv\")\n\n# Display the imported dataset\npub_dev\n\n# Extract distinct combinations of game name, developers, and publishers\ndistinct_games <- pub_dev %>% select(name, developers, publishers) %>% distinct()\n\n# Group and summarize developer information\ndevelopers <- distinct_games %>% group_by(developers) %>% summarize(n = n())\n\n# Identify specific developers using string detection\ncleaned_developers <- developers %>%\n  mutate(\n    # Commented out: dev_other = ifelse(n < 10, TRUE, FALSE),\n    dev_Atlus = str_detect(developers, \"Atlus\"),\n    dev_BioWare = str_detect(developers, \"BioWare\"),\n    dev_Blizzard = str_detect(developers, \"Blizzard\"),\n    dev_Activision = str_detect(developers, \"Activision\"),\n    dev_Ubisoft = str_detect(developers, \"Ubisoft\"),\n    dev_Rockstar = str_detect(developers, \"Rockstar\"),\n    dev_1C = str_detect(developers, \"1C\"),\n    dev_DICE = str_detect(developers, \"DICE\"),\n    dev_Capcom = str_detect(developers, \"Capcom\"),\n    dev_2K = str_detect(developers, \"2K\"),\n    dev_343Industries = str_detect(developers, \"343 Industries\"),\n    dev_CreativeAssembly = str_detect(developers, \"Creative Assembly\"),\n    dev_FromSoftware = str_detect(developers, \"FromSoftware\"),\n    dev_Vanguard = str_detect(developers, \"Vanguard Games\"),\n    dev_Arkane = str_detect(developers, \"Arkane\"),\n    dev_BandaiNamco = str_detect(developers, \"Bandai Namco\"),\n    dev_Bethesda = str_detect(developers, \"Bethesda\"),\n    dev_Bungie = str_detect(developers, \"Bungie\"),\n    dev_Crytek = str_detect(developers, \"Crytek\"),\n    dev_EA = str_detect(developers, \"EA \"),\n    dev_Nintendo = str_detect(developers, \"Nintendo\"),\n    dev_Ensemble = str_detect(developers, \"Ensemble Studios\"),\n    dev_EpicGames = str_detect(developers, \"Epic Games\"),\n    dev_Frontier = str_detect(developers, \"Frontier Developments\"),\n    dev_Feral = str_detect(developers, \"Feral Interactive\"),\n    dev_InfinityWard = str_detect(developers, \"Infinity Ward\"),\n    dev_Insomniac = str_detect(developers, \"Insomniac Games\"),\n    dev_JapanStudios = str_detect(developers, \"Japan Studio\"),\n    dev_Klei = str_detect(developers, \"Klei Entertainment\"),\n    dev_Konami = str_detect(developers, \"Konami\"),\n    dev_LucasArts = str_detect(developers, \"LucasArts\"),\n    dev_NaughtyDog = str_detect(developers, \"Naughty Dog\"),\n    dev_Namco = str_detect(developers, \"Namco\"),\n    dev_TellTale = str_detect(developers, \"Telltale Games\")) \n  )\n\n# Identify developers with very few games\nother_dev = cleaned_developers[rowSums(cleaned_developers[3:36]) == 0,]\n\n# Flag \"other\" developers and remove the original count column\ncleaned_developers <- cleaned_developers %>%\n  mutate(dev_other = ifelse(developers %in% other_dev$developers, TRUE, FALSE)) %>%\n  select(-n)\n\n# Group and summarize publisher information\npublishers <- distinct_games %>% group_by(publishers) %>% summarize(n = n())\n\n# Identify specific publishers using string detection\nclean_pubs <- publishers %>%\n  mutate(\n    # Commented out: pub_other = ifelse(n < 10, TRUE, FALSE),\n    pub_Eidos = str_detect(publishers, \"Eidos Interactive\"),\n    pub_EA = str_detect(publishers, \"EA Games\"),\n    pub_DeepSilver = str_detect(publishers, \"Deep Silver\"),\n    # ... (other publisher detection lines) ...\n    dev_tinyBuild = str_detect(publishers, \"tinyBuild\")\n  )\n\n# Identify publishers with very few games\nother_pubs <- clean_pubs[rowSums(clean_pubs[3:47]) == 0,]\n\n# Flag \"other\" publishers and handle special cases, then remove the original count column\nclean_pubs <- clean_pubs %>% \n  mutate(\n     pub_Eidos = str_detect(publishers, \"Eidos Interactive\"),\n     pub_EA = str_detect(publishers, \"EA Games\"),\n     pub_DeepSilver = str_detect(publishers, \"Deep Silver\"),\n     pub_ElectronicArts = str_detect(publishers, \"Electronic Arts\"),\n     pub_Ubisoft = str_detect(publishers, \"Ubisoft\"),\n     pub_Sega = str_detect(publishers, \"Sega\"),\n     pub_Activision = str_detect(publishers, \"Activision\"),\n     pub_SquareEnix = str_detect(publishers, \"Square Enix\"),\n     pub_Devolver = str_detect(publishers, \"Devolver Digital\"),\n     pub_Capcom = str_detect(publishers, \"Capcom\"),\n     pub_Konami = str_detect(publishers, \"Konami\"),\n     pub_BandaiNamco = str_detect(publishers, \"Bandai Namco\"),\n     pub_Paradox = str_detect(publishers, \"Paradox Interactive\"),\n     pub_Nintendo = str_detect(publishers, \"Nintendo\"),\n     pub_Sony = str_detect(publishers, \"Sony\"),\n     pub_koei = str_detect(publishers, \"Koei\"),\n     pub_rockstar = str_detect(publishers, \"Rockstar\"),\n     pub_THQ = str_detect(publishers, \"THQ\"),\n     pub_2K = str_detect(publishers, \"2K\"),\n     pub_D3 = str_detect(publishers, \"D3\"),\n     pub_vivendi = str_detect(publishers, \"Vivendi\"),\n     pub_majesco = str_detect(publishers, \"Majesco\"),\n     pub_microsoft = str_detect(publishers, \"Microsoft\"),\n     pub_505 = str_detect(publishers, \"505 Games\"),\n     pub_Atari = str_detect(publishers, \"Atari\"),\n     pub_Spike = str_detect(publishers, \"Spike\"),\n     pub_RisingStar = str_detect(publishers, \"Rising Star\"),\n     pub_Midway = str_detect(publishers, \"Midway\"),\n     pub_Spike = str_detect(publishers, \"LucasArts\"),\n     pub_WarnerBros = str_detect(publishers, \"Warner Bros\"),\n     pub_Atlus = str_detect(publishers, \"Atlus\"),\n     pub_Codemasters = str_detect(publishers, \"Codemasters\"),\n     pub_Disney = str_detect(publishers, \"Disney\"),\n     pub_Blizzard = str_detect(publishers, \"Blizzard\"),\n     pub_Bethesda = str_detect(publishers, \"Bethesda\"),\n     pub_Curve = str_detect(publishers, \"Curve Digital\"),\n     pub_1C = str_detect(publishers, \"1C\"),\n     pub_daedalic = str_detect(publishers, \"Daedalic Entertainment\"),\n     pub_FocusHome = str_detect(publishers, \"Focus Home Interactive\"),\n     dev_HumbleBumble = str_detect(publishers, \"Humble Bumble\"),\n     dev_Kalypso = str_detect(publishers, \"Kalypso Media\"),\n     pub_TellTale = str_detect(publishers, \"Telltale Games\"),\n     dev_Team17 = str_detect(publishers, \"Team17\"),\n     dev_Valve = str_detect(publishers, \"Valve\"),\n     dev_Xbox = str_detect(publishers, \"Xbox Game Studios\"),\n     dev_tinyBuild = str_detect(publishers, \"tinyBuild\"))\n  ) %>%\n  select(-n)\n\n# Join the cleaned developer and publisher information with the original dataset\npub_dev1 <- pub_dev %>%\n  left_join(cleaned_developers, by = \"developers\")\n\ncleaned_pub_dev <- pub_dev1 %>%\n  left_join(clean_pubs, by = \"publishers\")\n\n# Export the cleaned and enriched dataset\nexport(cleaned_pub_dev, \"~/Final_dev_pub.csv\")\n\n```\n\n\n## Machine Learning \n\nIn this section, we delve into the intricacies of our machine learning approach and the techniques we employed to build a predictive model that uncovers valuable insights within the realm of gaming. Leveraging advanced methodologies and tools, we aimed to unearth patterns, trends, and predictive power within our dataset.\n\n## Importing Scikit-Learn Libraries\n\nThis contains import statements for various machine learning models along with other necessary libraries. These models include Support Vector Classifier (SVC), Random Forest Classifier, Gradient Boosting Classifier, and Logistic Regression, which are commonly used for classification tasks. Additionally, the code imports evaluation metrics and data preprocessing tools to facilitate model evaluation and feature scaling.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Importing the pandas library for data manipulation and analysis\nimport pandas as pd\n# Pandas is a powerful library for data manipulation and analysis, providing data structures and functions.\n\n# Importing the NumPy library for numerical operations\nimport numpy as np\n# NumPy is used for numerical computations, providing support for arrays and mathematical functions.      \n\n# Importing the matplotlib library for creating plots and charts\nimport matplotlib.pyplot as plt\n# Matplotlib is a comprehensive library for creating various types of plots and charts.\n\n# Importing machine learning models and utilities from the sklearn module\nfrom sklearn.svm import SVC\n# SVC is a popular classification algorithm for Support Vector Machines.\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n# Ensemble learning methods based on decision trees, commonly used for classification tasks.\nfrom sklearn.linear_model import LogisticRegression\n# LogisticRegression is a popular algorithm for binary and multiclass classification problems.\n\n# Importing utility functions for data splitting and model evaluation\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n# train_test_split is used for splitting the data into training and testing sets.\n# cross_val_score is used for cross-validation during model evaluation.\n# GridSearchCV is used for hyperparameter tuning to find the best model configuration.\n\n # Library for decision tree models\nfrom sklearn import tree     \n\n# Library for label encoding\nfrom sklearn.preprocessing import LabelEncoder      \n\n# Importing evaluation metrics from the sklearn.metrics module\nfrom sklearn.metrics import (\n    cohen_kappa_score,\n    roc_auc_score,\n    accuracy_score,\n    precision_score,\n    recall_score,\n    confusion_matrix,\n)\n# These metrics are used to evaluate the performance of classification models.\n\n# Importing feature selection and preprocessing tools from sklearn\nfrom sklearn.feature_selection import SelectKBest, chi2, SelectFromModel\n# SelectKBest and chi2 are used for feature selection based on statistical tests.\n# SelectFromModel is used for feature selection based on the importance from a supervised model.\n\nfrom sklearn.decomposition import PCA\n# PCA (Principal Component Analysis) is used for dimensionality reduction.\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n# StandardScaler is used for scaling numerical features to have a mean of 0 and standard deviation of 1.\n# LabelEncoder is used for converting categorical labels into numerical values.\n\nimport xgboost as xgb\n# XGBoost is a popular gradient boosting library used for classification and regression tasks.\n```\n:::\n\n\n## Data Preprocessing and Analysis\n\nThis processes data from a CSV file containing information about video games from RAWG's API. It categorizes the games based on their ratings into \"Poor,\" \"Mixed,\" \"Good,\" \"Great,\" \"Excellent,\" or \"Masterpiece.\" Additionally, it adds a \"season\" column to indicate the season when each game was released and a \"playtime_category\" column to group the games based on their playtime, such as \"Novice,\" \"Casual,\" \"Experienced,\" or \"Veteran.\" The code ensures missing values are removed to prepare the data for analysis.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Read the CSV file into a DataFrame\ngames = pd.read_csv(\"Final_dev_pub.csv\")\ngames.dropna(inplace=True)\nprint(games.shape)\n\n\n# Define rating ranges and corresponding labels\nrating_ranges = [(0, 67, \"Poor\"),\n                 (68, 72, \"Mixed\"),\n                 (73, 76, \"Good\"),\n                 (77, 80, \"Great\"),\n                 (81, 84, \"Excellent\"),\n                 (85, 100, \"Masterpiece\")]\n\n# Create a new column for the categorical labels\ngames[\"metacritic_category\"] = pd.cut(\n    games[\"metacritic\"],\n    bins=[r[0] for r in rating_ranges] + [101],\n    labels=[r[2] for r in rating_ranges],\n    right=False\n)\n\n# Convert \"released\" column to datetime type\ngames[\"released\"] = pd.to_datetime(games[\"released\"])\n\ndef get_season(date):\n    if date.month in (3, 4, 5):\n        return \"Spring\"\n    elif date.month in (6, 7, 8):\n        return \"Summer\"\n    elif date.month in (9, 10, 11):\n        return \"Fall\"\n    elif date.month in (12, 1, 2):\n        return \"Winter\"\n    else:\n        return \"Invalid date\"\n\n# Apply the get_season function to the \"released\" column and create the \"season\" column\ngames[\"season\"] = games[\"released\"].apply(get_season)\n\n# Print the first 5 rows with the new \"season\" column\nprint(games.head(5))\nprint(\"Shape:\", games.shape)\n\n# Define the playtime ranges and corresponding categories\nplaytime_ranges = [(0, 10), (11, 50), (51, 100), (101, float('inf'))]\nplaytime_categories = ['Novice', 'Casual', 'Experienced', 'Veteran']\n\n# Create a new column with categorical values based on playtime\ngames['playtime_category'] = pd.cut(\n    games['playtime'],\n    bins=[range[0] - 1 for range in playtime_ranges] + [playtime_ranges[-1][1]],\n    labels=playtime_categories\n)\n\n# Drop the missing values\ngames.dropna(inplace=True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2241, 142)\n      id                                    name   released  metacritic  \\\n2  17788  Sherlock Holmes Versus Jack The Ripper 2009-05-26        73.0   \n3  17788  Sherlock Holmes Versus Jack The Ripper 2009-05-26        73.0   \n7  14422             Condemned: Criminal Origins 2005-11-15        80.0   \n8   5562                               Fallout 3 2008-10-28        91.0   \n9   5562                               Fallout 3 2008-10-28        91.0   \n\n   playtime             developers                       publishers  \\\n2         3       FrogwaresSpiders  FrogwaresFocus Home Interactive   \n3         3       FrogwaresSpiders  FrogwaresFocus Home Interactive   \n7         1   Monolith Productions                             Sega   \n8         4  Bethesda Game Studios               Bethesda Softworks   \n9         4  Bethesda Game Studios               Bethesda Softworks   \n\n  esrb_rating_name                                             genres  \\\n2           Mature                                          Adventure   \n3           Mature                                          Adventure   \n7      Adults Only  Survival horror, action, first-person shooter[...   \n8           Mature                                Action role-playing   \n9           Mature                                Action role-playing   \n\n       genre  ... Atari 8-bit Atari Lynx  Atari 7800  Atari 5200  3DO  \\\n2  Adventure  ...           0          0           0           0    0   \n3        RPG  ...           0          0           0           0    0   \n7     Action  ...           0          0           0           0    0   \n8        RPG  ...           0          0           0           0    0   \n9    Shooter  ...           0          0           0           0    0   \n\n   Single-player  Multiplayer  2-player co-op  metacritic_category  season  \n2              1            0               0                 Good  Spring  \n3              1            0               0                 Good  Spring  \n7              1            0               0                Great    Fall  \n8              1            0               0          Masterpiece    Fall  \n9              1            0               0          Masterpiece    Fall  \n\n[5 rows x 144 columns]\nShape: (2241, 144)\n```\n:::\n:::\n\n\nThis refines and organizes the \"genres\" column in a dataset containing information about video games. It splits the genres into subgenres, capitalizes them, and creates new rows for each subgenre. The code then updates the DataFrame to include the subgenres' information, and it lists all the columns in the final dataset. This process helps in better categorizing and understanding the various subgenres of video games present in the dataset.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Clean up the genres column\ngames['genres'] = games['genres'].str.replace('\\[.*?\\]', '')  # Remove anything within square brackets [...]\ngames['genres'] = games['genres'].str.replace('\\(.*?\\)', '')  # Remove anything within parentheses (...)\ngames['genres'] = games['genres'].str.strip()  # Remove leading/trailing whitespace\n\n# Split the genres and create new rows\nnew_rows = []\nfor index, row in games.iterrows():\n    genres = row[\"genres\"].split(\",\")\n    for genre in genres:\n        genre = genre.strip()\n        if \"-\" in genre:\n            genre_parts = genre.split(\"-\")\n            genre_parts = [part.capitalize() for part in genre_parts]\n            genre = \"-\".join(genre_parts)\n        elif \"\\n\" in genre:\n            genre_parts = genre.split(\"\\n\")\n            genre_parts = [part.capitalize() for part in genre_parts]\n            genre = \" \".join(genre_parts)\n        else:\n            genre = genre.capitalize()\n\n        # Create a dictionary to store the information for each subgenre row\n        new_row = {\"subgenres\": genre}\n\n        # Copy the relevant information from the other columns of the original DataFrame\n        for col in games.columns:\n            if col != \"genres\" and col != \"subgenres\":\n                new_row[col] = row[col]\n\n        new_rows.append(new_row)\n\n# Update the DataFrame from the new rows\ngames = pd.DataFrame(new_rows)\n\n# Capitalize the \"subgenres\" column\ngames['subgenres'] = games['subgenres'].str.title()\n\n# Display the updated dataset with subgenres information\nprint(games)\n\n# List all the columns in the DataFrame 'games'\nprint(list(games.columns))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         subgenres     id  \\\n0                        Adventure  17788   \n1                        Adventure  17788   \n2                  Survival Horror  14422   \n3                           Action  14422   \n4             First-Person Shooter  14422   \n...                            ...    ...   \n3011                      Survival   9840   \n3012              Action-Adventure   9840   \n3013                       Stealth   9840   \n3014                      Survival   9840   \n3015  Sport   First-Person Shooter   4623   \n\n                                        name   released  metacritic  playtime  \\\n0     Sherlock Holmes Versus Jack The Ripper 2009-05-26        73.0         3   \n1     Sherlock Holmes Versus Jack The Ripper 2009-05-26        73.0         3   \n2                Condemned: Criminal Origins 2005-11-15        80.0         1   \n3                Condemned: Criminal Origins 2005-11-15        80.0         1   \n4                Condemned: Criminal Origins 2005-11-15        80.0         1   \n...                                      ...        ...         ...       ...   \n3011                            We Happy Few 2018-08-09        64.0         4   \n3012                            We Happy Few 2018-08-09        64.0         4   \n3013                            We Happy Few 2018-08-09        64.0         4   \n3014                            We Happy Few 2018-08-09        64.0         4   \n3015                     Carnivores: Ice Age 2001-02-03        64.0         0   \n\n                developers                       publishers esrb_rating_name  \\\n0         FrogwaresSpiders  FrogwaresFocus Home Interactive           Mature   \n1         FrogwaresSpiders  FrogwaresFocus Home Interactive           Mature   \n2     Monolith Productions                             Sega      Adults Only   \n3     Monolith Productions                             Sega      Adults Only   \n4     Monolith Productions                             Sega      Adults Only   \n...                    ...                              ...              ...   \n3011      Compulsion Games               Gearbox Publishing           Mature   \n3012      Compulsion Games               Gearbox Publishing           Mature   \n3013      Compulsion Games               Gearbox Publishing           Mature   \n3014      Compulsion Games               Gearbox Publishing           Mature   \n3015          Action Forms          WizardWorks, Infogrames             Teen   \n\n          genre  ... Atari Lynx Atari 7800  Atari 5200  3DO  Single-player  \\\n0     Adventure  ...          0          0           0    0              1   \n1           RPG  ...          0          0           0    0              1   \n2        Action  ...          0          0           0    0              1   \n3        Action  ...          0          0           0    0              1   \n4        Action  ...          0          0           0    0              1   \n...         ...  ...        ...        ...         ...  ...            ...   \n3011     Action  ...          0          0           0    0              1   \n3012  Adventure  ...          0          0           0    0              1   \n3013  Adventure  ...          0          0           0    0              1   \n3014  Adventure  ...          0          0           0    0              1   \n3015    Shooter  ...          0          0           0    0              1   \n\n      Multiplayer  2-player co-op  metacritic_category  season  \\\n0               0               0                 Good  Spring   \n1               0               0                 Good  Spring   \n2               0               0                Great    Fall   \n3               0               0                Great    Fall   \n4               0               0                Great    Fall   \n...           ...             ...                  ...     ...   \n3011            0               0                 Poor  Summer   \n3012            0               0                 Poor  Summer   \n3013            0               0                 Poor  Summer   \n3014            0               0                 Poor  Summer   \n3015            0               0                 Poor  Winter   \n\n      playtime_category  \n0                Novice  \n1                Novice  \n2                Novice  \n3                Novice  \n4                Novice  \n...                 ...  \n3011             Novice  \n3012             Novice  \n3013             Novice  \n3014             Novice  \n3015             Novice  \n\n[3016 rows x 145 columns]\n['subgenres', 'id', 'name', 'released', 'metacritic', 'playtime', 'developers', 'publishers', 'esrb_rating_name', 'genre', 'description', 'background_image', 'dev_Atlus', 'dev_BioWare', 'dev_Blizzard', 'dev_Activision', 'dev_Ubisoft', 'dev_Rockstar', 'dev_1C', 'dev_DICE', 'dev_Capcom', 'dev_2K', 'dev_343Industries', 'dev_CreativeAssembly', 'dev_FromSoftware', 'dev_Vanguard', 'dev_Arkane', 'dev_BandaiNamco', 'dev_Bethesda', 'dev_Bungie', 'dev_Crytek', 'dev_EA', 'dev_Nintendo', 'dev_Ensemble', 'dev_EpicGames', 'dev_Frontier', 'dev_Feral', 'dev_InfinityWard', 'dev_Insomniac', 'dev_JapanStudios', 'dev_Klei', 'dev_Konami', 'dev_LucasArts', 'dev_NaughtyDog', 'dev_Namco', 'dev_TellTale', 'dev_other', 'n', 'pub_Eidos', 'pub_EA', 'pub_DeepSilver', 'pub_ElectronicArts', 'pub_Ubisoft', 'pub_Sega', 'pub_Activision', 'pub_SquareEnix', 'pub_Devolver', 'pub_Capcom', 'pub_Konami', 'pub_BandaiNamco', 'pub_Paradox', 'pub_Nintendo', 'pub_Sony', 'pub_koei', 'pub_rockstar', 'pub_THQ', 'pub_2K', 'pub_D3', 'pub_vivendi', 'pub_majesco', 'pub_microsoft', 'pub_505', 'pub_Atari', 'pub_Spike', 'pub_RisingStar', 'pub_Midway', 'pub_WarnerBros', 'pub_Atlus', 'pub_Codemasters', 'pub_Disney', 'pub_Blizzard', 'pub_Bethesda', 'pub_Curve', 'pub_1C', 'pub_daedalic', 'pub_FocusHome', 'pub_HumbleBumble', 'pub_Kalypso', 'pub_TellTale', 'pub_Team17', 'pub_Valve', 'pub_Xbox', 'pub_tinyBuild', 'NES', 'PC', 'macOS', 'Linux', 'Xbox One', 'PlayStation 4', 'Nintendo Switch', 'iOS', 'Android', 'PS Vita', 'Wii U', 'Xbox 360', 'PlayStation 3', 'Xbox', 'PlayStation 2', 'Web', 'Xbox Series S/X', 'Nintendo 3DS', 'PlayStation 5', 'GameCube', 'Game Boy Advance', 'Nintendo 64', 'Wii', 'Dreamcast', 'SNES', 'Commodore / Amiga', 'Atari ST', 'PlayStation', 'Genesis', 'SEGA Saturn', 'Game Boy', 'Game Gear', 'Nintendo DS', 'PSP', 'Classic Macintosh', 'Neo Geo', 'Game Boy Color', 'Atari 2600', 'SEGA Master System', 'Jaguar', 'Apple II', 'Atari 8-bit', 'Atari Lynx', 'Atari 7800', 'Atari 5200', '3DO', 'Single-player', 'Multiplayer', '2-player co-op', 'metacritic_category', 'season', 'playtime_category']\n```\n:::\n:::\n\n\n## Feature Engineering\n\nThis enhances the video game dataset with several new features. It adds a \"Multiplatform\" column to identify games available on multiple platforms, a \"year\" column to show the release year of each game, a \"metacritic trend line\" column to indicate the score trend over the years, a \"playtime trend line\" column to represent the playtime trend over the years, \"playtime quartiles\" to categorize games based on their playtime distribution, and \"playtime ratios\" to calculate the playtime of each game as a ratio of the maximum playtime in the dataset. The code also filters the dataset to include games released in 2013 or later. These new features provide valuable insights into the video game data and can assist in further analysis and decision-making.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# ADD FEATURE: Multi-Platform, etc.\n\n# List of platform columns to check for multiple true values\nplatform_columns = [\"PC\", \"macOS\", \"Linux\", \"Xbox One\", \"PlayStation 4\", \"Nintendo Switch\",\n                    \"Wii U\", \"Xbox 360\", \"PlayStation 3\", \"Xbox\", \"PlayStation 2\",\n                    \"Xbox Series S/X\", \"Nintendo 3DS\", \"PlayStation 5\", \"GameCube\"]\n\n# Create a new column \"Multiplatform\" where the value is 1 if there are more than one true values in the platform columns\ngames[\"Multiplatform\"] = games[platform_columns].apply(lambda row: sum(row), axis=1).apply(lambda x: 1 if x > 1 else 0)\n\n# Print the updated 'games' to see the new \"Multiplatform\" column\nprint(games)\n\n\n# ADD FEATURE: year\n\n# Step 1: Convert the 'released' column to datetime type\ngames['released'] = pd.to_datetime(games['released'])\n\n# Step 2: Extract the year and create a new column 'year'\ngames['year'] = games['released'].dt.year\n\n# ADD FEATURE: metacritic trend line\n\n# Step 1: Group the data by year and category, calculate the average score\ngrouped = games.groupby(['year', 'metacritic_category']).agg(avg_score=('metacritic', 'mean')).reset_index()\n\n# Step 2: Calculate the year-over-year difference in scores\ngrouped['yoy_diff'] = grouped.groupby('metacritic_category')['avg_score'].diff()\n\n# Step 3: Create the trend line column\ngrouped['trend_line_metacritic_yoy'] = ''\n\n# Step 4: Assign the trend line values based on the year-over-year difference\ngrouped.loc[grouped['yoy_diff'] > 0, 'trend_line_metacritic_yoy'] = 'Positive'\ngrouped.loc[grouped['yoy_diff'] < 0, 'trend_line_metacritic_yoy'] = 'Negative'\ngrouped.loc[grouped['yoy_diff'] == 0, 'trend_line_metacritic_yoy'] = 'Stable'\n\n# Merge the trend line column back\ngames = pd.merge(games, grouped[['year', 'metacritic_category', 'trend_line_metacritic_yoy']], on=['year', 'metacritic_category'], how='left')\n\n# ADD FEATURE: playtime trend line\n\n# Step 1: Group the data by year and calculate the average playtime\ngrouped = games.groupby('year')['playtime'].mean().reset_index()\n\n# Step 2: Calculate the year-over-year difference in playtime\ngrouped['yoy_diff'] = grouped['playtime'].diff()\n\n# Step 3: Create the trend line column\ngrouped['trend_line_playtime_yoy'] = ''\n\n# Step 4: Assign the trend line values based on the year-over-year difference\ngrouped.loc[grouped['yoy_diff'] > 0, 'trend_line_playtime_yoy'] = 'Increasing'\ngrouped.loc[grouped['yoy_diff'] < 0, 'trend_line_playtime_yoy'] = 'Decreasing'\ngrouped.loc[grouped['yoy_diff'] == 0, 'trend_line_playtime_yoy'] = 'Stable'\n\n# Merge the trend line column\ngames = pd.merge(games, grouped[['year', 'trend_line_playtime_yoy']], on='year', how='left')\n\n# ADD FEATURES: playtime quartiles\n\n# Step 1: Calculate the quartiles for playtime\nquartiles = np.linspace(0, 1, num=5)  # Split into quartiles (0%, 25%, 50%, 75%, 100%)\n\n# Step 2: Create the playtime quartile labels\nquartile_labels = ['Q1', 'Q2', 'Q3', 'Q4']\n\n# Step 3: Assign quartile labels to playtime quartiles\ngames['playtime_quartile'] = pd.qcut(games['playtime'], quartiles, labels=quartile_labels, duplicates='drop')\n\n# Fill missing values with a default label if any\ngames['playtime_quartile'] = games['playtime_quartile'].cat.add_categories('N/A').fillna('N/A')\n\n\n# ADD FEATURES: playtime ratios\n\n# Step 1: Calculate the maximum playtime in the dataset\nmax_playtime = games['playtime'].max()\n\n# Step 2: Create the playtime ratio feature\ngames['playtime_ratio'] = games['playtime'] / max_playtime\n\n\n# Filter video game year from 2013 forward\ngames = games[games['year'] >= 2013]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         subgenres     id  \\\n0                        Adventure  17788   \n1                        Adventure  17788   \n2                  Survival Horror  14422   \n3                           Action  14422   \n4             First-Person Shooter  14422   \n...                            ...    ...   \n3011                      Survival   9840   \n3012              Action-Adventure   9840   \n3013                       Stealth   9840   \n3014                      Survival   9840   \n3015  Sport   First-Person Shooter   4623   \n\n                                        name   released  metacritic  playtime  \\\n0     Sherlock Holmes Versus Jack The Ripper 2009-05-26        73.0         3   \n1     Sherlock Holmes Versus Jack The Ripper 2009-05-26        73.0         3   \n2                Condemned: Criminal Origins 2005-11-15        80.0         1   \n3                Condemned: Criminal Origins 2005-11-15        80.0         1   \n4                Condemned: Criminal Origins 2005-11-15        80.0         1   \n...                                      ...        ...         ...       ...   \n3011                            We Happy Few 2018-08-09        64.0         4   \n3012                            We Happy Few 2018-08-09        64.0         4   \n3013                            We Happy Few 2018-08-09        64.0         4   \n3014                            We Happy Few 2018-08-09        64.0         4   \n3015                     Carnivores: Ice Age 2001-02-03        64.0         0   \n\n                developers                       publishers esrb_rating_name  \\\n0         FrogwaresSpiders  FrogwaresFocus Home Interactive           Mature   \n1         FrogwaresSpiders  FrogwaresFocus Home Interactive           Mature   \n2     Monolith Productions                             Sega      Adults Only   \n3     Monolith Productions                             Sega      Adults Only   \n4     Monolith Productions                             Sega      Adults Only   \n...                    ...                              ...              ...   \n3011      Compulsion Games               Gearbox Publishing           Mature   \n3012      Compulsion Games               Gearbox Publishing           Mature   \n3013      Compulsion Games               Gearbox Publishing           Mature   \n3014      Compulsion Games               Gearbox Publishing           Mature   \n3015          Action Forms          WizardWorks, Infogrames             Teen   \n\n          genre  ... Atari 7800 Atari 5200  3DO  Single-player  Multiplayer  \\\n0     Adventure  ...          0          0    0              1            0   \n1           RPG  ...          0          0    0              1            0   \n2        Action  ...          0          0    0              1            0   \n3        Action  ...          0          0    0              1            0   \n4        Action  ...          0          0    0              1            0   \n...         ...  ...        ...        ...  ...            ...          ...   \n3011     Action  ...          0          0    0              1            0   \n3012  Adventure  ...          0          0    0              1            0   \n3013  Adventure  ...          0          0    0              1            0   \n3014  Adventure  ...          0          0    0              1            0   \n3015    Shooter  ...          0          0    0              1            0   \n\n      2-player co-op  metacritic_category  season  playtime_category  \\\n0                  0                 Good  Spring             Novice   \n1                  0                 Good  Spring             Novice   \n2                  0                Great    Fall             Novice   \n3                  0                Great    Fall             Novice   \n4                  0                Great    Fall             Novice   \n...              ...                  ...     ...                ...   \n3011               0                 Poor  Summer             Novice   \n3012               0                 Poor  Summer             Novice   \n3013               0                 Poor  Summer             Novice   \n3014               0                 Poor  Summer             Novice   \n3015               0                 Poor  Winter             Novice   \n\n      Multiplatform  \n0                 0  \n1                 0  \n2                 1  \n3                 1  \n4                 1  \n...             ...  \n3011              1  \n3012              1  \n3013              1  \n3014              1  \n3015              0  \n\n[3016 rows x 146 columns]\n```\n:::\n:::\n\n\nThis removes specific columns from a dataset containing information about video games. The columns that are removed include 'id', 'background_image', 'metacritic', 'name', 'playtime', 'description', 'released', 'developers', 'publishers', and 'n'. After removing these columns, the code prints the new shape of the dataset and lists the remaining columns. This process helps to focus on the most relevant information and simplifies the dataset for further analysis or modeling.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# For be citation \ncitationDs = games[['id', 'name']].copy()\n\n# Remove the specified columns\ncolumns_to_remove = ['id', 'background_image', 'metacritic', 'name', 'playtime', 'description', 'released', 'developers', 'publishers','n']\ngames.drop(columns_to_remove, axis=1, inplace=True)\n\n# Print the new shape of the DataFrame after removing columns\nprint(\"Shape of games DataFrame:\", games.shape)\n\n# Create a new DataFrame 'modelDs' to store the modified data\nmodelDs = games\n\n# Print the list of columns\nprint(\"Columns in modelDs DataFrame:\", list(modelDs.columns))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShape of games DataFrame: (1919, 141)\nColumns in modelDs DataFrame: ['subgenres', 'esrb_rating_name', 'genre', 'dev_Atlus', 'dev_BioWare', 'dev_Blizzard', 'dev_Activision', 'dev_Ubisoft', 'dev_Rockstar', 'dev_1C', 'dev_DICE', 'dev_Capcom', 'dev_2K', 'dev_343Industries', 'dev_CreativeAssembly', 'dev_FromSoftware', 'dev_Vanguard', 'dev_Arkane', 'dev_BandaiNamco', 'dev_Bethesda', 'dev_Bungie', 'dev_Crytek', 'dev_EA', 'dev_Nintendo', 'dev_Ensemble', 'dev_EpicGames', 'dev_Frontier', 'dev_Feral', 'dev_InfinityWard', 'dev_Insomniac', 'dev_JapanStudios', 'dev_Klei', 'dev_Konami', 'dev_LucasArts', 'dev_NaughtyDog', 'dev_Namco', 'dev_TellTale', 'dev_other', 'pub_Eidos', 'pub_EA', 'pub_DeepSilver', 'pub_ElectronicArts', 'pub_Ubisoft', 'pub_Sega', 'pub_Activision', 'pub_SquareEnix', 'pub_Devolver', 'pub_Capcom', 'pub_Konami', 'pub_BandaiNamco', 'pub_Paradox', 'pub_Nintendo', 'pub_Sony', 'pub_koei', 'pub_rockstar', 'pub_THQ', 'pub_2K', 'pub_D3', 'pub_vivendi', 'pub_majesco', 'pub_microsoft', 'pub_505', 'pub_Atari', 'pub_Spike', 'pub_RisingStar', 'pub_Midway', 'pub_WarnerBros', 'pub_Atlus', 'pub_Codemasters', 'pub_Disney', 'pub_Blizzard', 'pub_Bethesda', 'pub_Curve', 'pub_1C', 'pub_daedalic', 'pub_FocusHome', 'pub_HumbleBumble', 'pub_Kalypso', 'pub_TellTale', 'pub_Team17', 'pub_Valve', 'pub_Xbox', 'pub_tinyBuild', 'NES', 'PC', 'macOS', 'Linux', 'Xbox One', 'PlayStation 4', 'Nintendo Switch', 'iOS', 'Android', 'PS Vita', 'Wii U', 'Xbox 360', 'PlayStation 3', 'Xbox', 'PlayStation 2', 'Web', 'Xbox Series S/X', 'Nintendo 3DS', 'PlayStation 5', 'GameCube', 'Game Boy Advance', 'Nintendo 64', 'Wii', 'Dreamcast', 'SNES', 'Commodore / Amiga', 'Atari ST', 'PlayStation', 'Genesis', 'SEGA Saturn', 'Game Boy', 'Game Gear', 'Nintendo DS', 'PSP', 'Classic Macintosh', 'Neo Geo', 'Game Boy Color', 'Atari 2600', 'SEGA Master System', 'Jaguar', 'Apple II', 'Atari 8-bit', 'Atari Lynx', 'Atari 7800', 'Atari 5200', '3DO', 'Single-player', 'Multiplayer', '2-player co-op', 'metacritic_category', 'season', 'playtime_category', 'Multiplatform', 'year', 'trend_line_metacritic_yoy', 'trend_line_playtime_yoy', 'playtime_quartile', 'playtime_ratio']\n```\n:::\n:::\n\n\n### Convert Categorical Columns to Dummy Variables\n\nThis converts categorical columns in the \"modelDs\" DataFrame into dummy variables to represent them as binary indicators. The categorical columns that are converted include 'esrb_rating_name', 'genre', 'season', 'subgenres', 'playtime_category', 'subgenres', 'year', 'trend_line_metacritic_yoy', 'trend_line_playtime_yoy', and 'playtime_quartile'. After creating the dummy variables, the original categorical columns are removed from the DataFrame to prepare the data for machine learning tasks, where numerical data is generally required. This process helps in encoding categorical information into a format that machine learning algorithms can work with.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# List of categorical columns to convert to dummy variables\ncolumns_to_dummy = ['esrb_rating_name', 'genre', 'season', 'subgenres', 'playtime_category', 'subgenres', 'year', 'trend_line_metacritic_yoy', 'trend_line_playtime_yoy', 'playtime_quartile']\n\n# Display the current shape \nprint(\"Shape of modelDs DataFrame:\", modelDs.shape)\n\n# Display the number of columns \nprint(\"Number of columns in modelDs DataFrame:\", modelDs.shape[1])\n\n# Display the expected number of columns after converting categorical columns to dummy variables\nprint(\"Expected number of columns:\", len(columns_to_dummy))\n\n# Display the list of columns that will be converted to dummy variables\nprint(\"Columns to dummy:\", columns_to_dummy)\n\n# Remove the last element from the 'columns_to_dummy' list to create prefixes for dummy variable column names\nprefix = columns_to_dummy[:-1]\n\n# Convert categorical columns to dummy variables, adding prefixes to the column names\ndummy_cols = pd.get_dummies(modelDs[columns_to_dummy], prefix=prefix, drop_first=True)\n\n# Concatenate the dummy variable columns \nmodelDs = pd.concat([modelDs, dummy_cols], axis=1)\n\n# Drop the original categorical columns \nmodelDs.drop(columns_to_dummy, axis=1, inplace=True)\n\n# 'modelDs' DataFrame now contains the data with dummy variables instead of categorical columns\nmodelDs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShape of modelDs DataFrame: (1919, 141)\nNumber of columns in modelDs DataFrame: 141\nExpected number of columns: 10\nColumns to dummy: ['esrb_rating_name', 'genre', 'season', 'subgenres', 'playtime_category', 'subgenres', 'year', 'trend_line_metacritic_yoy', 'trend_line_playtime_yoy', 'playtime_quartile']\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dev_Atlus</th>\n      <th>dev_BioWare</th>\n      <th>dev_Blizzard</th>\n      <th>dev_Activision</th>\n      <th>dev_Ubisoft</th>\n      <th>dev_Rockstar</th>\n      <th>dev_1C</th>\n      <th>dev_DICE</th>\n      <th>dev_Capcom</th>\n      <th>dev_2K</th>\n      <th>...</th>\n      <th>subgenres_Vehicular Combat</th>\n      <th>subgenres_Visual Novel</th>\n      <th>subgenres_Wrestling</th>\n      <th>year_Positive</th>\n      <th>year_Stable</th>\n      <th>trend_line_metacritic_yoy_Increasing</th>\n      <th>trend_line_playtime_yoy_Q2</th>\n      <th>trend_line_playtime_yoy_Q3</th>\n      <th>trend_line_playtime_yoy_Q4</th>\n      <th>trend_line_playtime_yoy_N/A</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3010</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3011</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3012</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3013</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3014</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1919 rows × 459 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Calculate Relative Frequencies of Game Ratings\n\nThis calculates the relative frequencies (weights) for each category in the \"metacritic_category\" column of the video game dataset. These weights represent the proportion of games falling into each rating category (e.g., \"Poor,\" \"Good,\" \"Excellent\") relative to the total number of games in the dataset. Printing the weights allows for understanding the distribution of game ratings and their respective frequencies in the dataset.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Calculate the relative frequencies (weights) for each category\nweights = games['metacritic_category'].value_counts(normalize=True)\n\n# Print the weights\nprint(weights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMasterpiece    0.183429\nGreat          0.176133\nGood           0.169359\nPoor           0.167275\nExcellent      0.164148\nMixed          0.139656\nName: metacritic_category, dtype: float64\n```\n:::\n:::\n\n\n## Train Test Split\n\nThis prepares the data for machine learning by splitting it into features (X) and the target variable (y). The target variable represents game ratings (e.g., 'Masterpiece', 'Great', 'Good', 'Poor', 'Excellent', 'Mixed'), each with an associated weight. The data is further split into training and testing sets while ensuring the same distribution of game ratings in both sets using the 'stratify' parameter. The weights for each category are calculated and printed for the training and testing sets, facilitating the model's training with weighted samples and evaluation on a representative test set.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Split the data into features (X) and target (y)\nX = modelDs.drop('metacritic_category', axis=1)  # Features (input variables)\ny = modelDs['metacritic_category']  # Target variable\n\n# Given weights\nweights = {'Masterpiece': 0.183429, 'Great': 0.176133, 'Good': 0.169359, 'Poor': 0.167275, 'Excellent': 0.164148, 'Mixed': 0.139656}\n\n# Use the 'stratify' parameter to preserve the target variable distribution in the train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=154, stratify=y)\n\n# Now, you can access the weights for each category as follows:\n# Note that `y_train` and `y_test` now have the same distribution of categories as `y`\ny_train_weights = y_train.map(weights)\ny_test_weights = y_test.map(weights)\n\n# Print the weights for the first few rows in the training set\nprint(\"Training set weights:\")\nprint(y_train_weights.head())\n\n# Print the weights for the first few rows in the testing set\nprint(\"Testing set weights:\")\nprint(y_test_weights.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTraining set weights:\n2381    0.176133\n2033    0.169359\n2840    0.176133\n2731    0.164148\n2616    0.167275\nName: metacritic_category, dtype: float64\nTesting set weights:\n1543    0.176133\n25      0.169359\n1207    0.169359\n2018    0.183429\n1652    0.167275\nName: metacritic_category, dtype: float64\n```\n:::\n:::\n\n\n## First Random Forest Model\n\n### Random Forest Model With Hyperparameter Tuning + Metrics\n\nThis creates and trains a machine learning model called the RandomForestClassifier with optimized hyperparameters. The model is trained using the training data, and predictions are made on the test data to evaluate its performance. Metrics such as ROC AUC score, Kappa coefficient, accuracy, precision, recall, and confusion matrix are calculated to assess how well the model predicts the game ratings. These metrics provide insights into the model's overall performance and its ability to correctly classify games into different rating categories.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Create the RandomForestClassifier instance with the best hyperparameters\nrf_classifier_best = RandomForestClassifier(\n    n_estimators=200,\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    criterion='gini',\n    min_impurity_decrease=0.0,\n    random_state=65\n)\n\n# Fit the classifier to the training data with the given weights\nrf_classifier_best.fit(X_train, y_train, sample_weight=y_train_weights)\n\n# Use the trained classifier for predictions on test data\ny_pred = rf_classifier_best.predict(X_test)\ny_pred_prob = rf_classifier_best.predict_proba(X_test)\n```\n:::\n\n\n#### First Model Metrics\n\nThis evaluates the first machine learning model's performance, called the RandomForestClassifier, which was trained to predict game ratings using important features from the video game dataset. The model's performance is assessed using various evaluation metrics. The metrics include ROC AUC score, which measures the model's ability to distinguish between different game ratings, the Kappa coefficient, which indicates the model's agreement with the actual ratings, accuracy, which represents the overall correctness of predictions, precision, which shows the model's ability to predict each rating category accurately, and recall, which measures the model's ability to capture all instances of each rating category. Finally, the code prints the confusion matrix, a table that summarizes the model's predictions against the actual game ratings. These evaluations help understand how well the second model performs in predicting game ratings and provide valuable insights into its effectiveness in classifying games into their respective categories.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# Calculate ROC AUC score for binary classification\nroc_auc = roc_auc_score(y_test, y_pred_prob, multi_class='ovr')\nprint(f\"ROC AUC: {roc_auc}\")\n\n# Calculate Kappa coefficient\nkappa = cohen_kappa_score(y_test, y_pred)\nprint(f\"Kappa: {kappa}\")\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy}\")\n\n# Calculate precision\nprecision = precision_score(y_test, y_pred, average='weighted')\nprint(f\"Precision: {precision}\")\n\n# Calculate recall\nrecall = recall_score(y_test, y_pred, average='weighted')\nprint(f\"Recall: {recall}\")\n\n# Calculate confusion matrix\nconfusion = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(confusion)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nROC AUC: 0.9619776438541144\nKappa: 0.7871553052224876\nAccuracy: 0.8229166666666666\nPrecision: 0.8234527429872074\nRecall: 0.8229166666666666\nConfusion Matrix:\n[[48  2  2  5  3  3]\n [ 2 57  4  1  0  1]\n [ 1  1 57  4  0  5]\n [ 2  3  7 56  2  0]\n [ 4  1  0  1 44  4]\n [ 2  2  2  2  2 54]]\n```\n:::\n:::\n\n\n#### Feature Selection Methods\n\nThis demonstrates three different methods to select the most important features from the video game dataset for machine learning models. Method 1 uses the SelectKBest algorithm with chi-square to select the top 25 features. Method 2 uses the SelectFromModel algorithm with L1 regularization (Logistic Regression) to identify another set of top 25 features. Method 3 utilizes the Tree-based Feature Importance approach with Random Forest to determine the third set of top 25 features. The code prints these selected features for each method and then merges them to create a new dataset containing only the most relevant features for training the machine learning model. This feature selection process helps improve the model's performance and reduces computation time by focusing on the most informative features.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Limits the top number of features\nnum_features_to_select = 16\n\n# Method 1: SelectKBest with chi-square\nselector_chi2 = SelectKBest(score_func=chi2, k=num_features_to_select)\nX_train_chi2_selected = selector_chi2.fit_transform(X_train, y_train)\nselected_feature_indices_chi2 = selector_chi2.get_support(indices=True)\nselected_features_chi2 = X_train.columns[selected_feature_indices_chi2].tolist()\n\nplt.figure(figsize=(8, 4))\nplt.barh(range(num_features_to_select), selector_chi2.scores_[selected_feature_indices_chi2][::-1], tick_label=selected_features_chi2[::-1])\nplt.xlabel('Chi-square Score')\nplt.ylabel('Features')\nplt.title('Top Features using SelectKBest with chi-square')\nplt.show()\n\n# Method 2: SelectFromModel with L1 regularization (Logistic Regression)\nlogistic_regression = LogisticRegression(penalty='l1', solver='liblinear', random_state=65)\nselector_l1 = SelectFromModel(logistic_regression, max_features=num_features_to_select)\nX_train_l1_selected = selector_l1.fit_transform(X_train, y_train)\nselected_feature_indices_l1 = selector_l1.get_support(indices=True)\nselected_features_l1 = X_train.columns[selected_feature_indices_l1].tolist()\n\n# Get coefficients from the best estimator with L1 regularization\ncoefficients = abs(selector_l1.estimator_.coef_[0])\n\nplt.figure(figsize=(8, 4))\nplt.barh(range(num_features_to_select), coefficients[selected_feature_indices_l1][::-1], tick_label=selected_features_l1[::-1])\nplt.xlabel('Coefficient Magnitude')\nplt.ylabel('Features')\nplt.title('Top Features using SelectFromModel with L1 regularization (Logistic Regression)')\nplt.show()\n\n# Method 3: Tree-based Feature Importance (Random Forest)\nrf_classifier = RandomForestClassifier(random_state=65)\nrf_classifier.fit(X_train, y_train)\nfeature_importances = rf_classifier.feature_importances_\ntop_features_indices_rf = feature_importances.argsort()[-num_features_to_select:][::-1]\ntop_features_rf = X_train.columns[top_features_indices_rf].tolist()\n\nplt.figure(figsize=(8, 4))\nplt.barh(range(num_features_to_select), feature_importances[top_features_indices_rf][::-1], tick_label=top_features_rf[::-1])\nplt.xlabel('Feature Importance')\nplt.ylabel('Features')\nplt.title('Top Features using Tree-based Feature Importance (Random Forest)')\nplt.show()\n\n# Print the top 25 features for each method\nprint(\"Top 25 Features using SelectKBest with chi-square:\")\nprint(selected_features_chi2)\n\nprint(\"\\nTop 25 Features using SelectFromModel with L1 regularization (Logistic Regression):\")\nprint(selected_features_l1)\n\nprint(\"\\nTop 25 Features using Tree-based Feature Importance (Random Forest):\")\nprint(top_features_rf)\n\n# Combine selected features from all three methods without duplicates\nall_selected_features = list(set(selected_features_chi2 + selected_features_l1 + top_features_rf))\n\n# Create a new dataset with the selected features\nX_train_selected = X_train[all_selected_features]\nX_test_selected = X_test[all_selected_features]\n\n\nprint(len(X_train_selected.columns))  # Merged features, it should be 40 columns\nprint(len(X_test_selected.columns))   # Merged features, it should be 40 columns\n```\n\n::: {.cell-output .cell-output-display}\n![](VideoGameML_files/figure-html/cell-19-output-1.png){width=869 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](VideoGameML_files/figure-html/cell-19-output-2.png){width=841 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](VideoGameML_files/figure-html/cell-19-output-3.png){width=889 height=376}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nTop 25 Features using SelectKBest with chi-square:\n['dev_BioWare', 'dev_FromSoftware', 'pub_Nintendo', 'pub_Sony', 'pub_Blizzard', 'pub_Kalypso', 'Nintendo Switch', 'Wii U', 'Xbox 360', 'Web', 'Xbox Series S/X', 'PlayStation 5', 'subgenres_Space Flight Simulator', 'subgenres_Space Flight Simulator', 'trend_line_playtime_yoy_Q2', 'trend_line_playtime_yoy_Q4']\n\nTop 25 Features using SelectFromModel with L1 regularization (Logistic Regression):\n['dev_BioWare', 'dev_Crytek', 'dev_other', 'pub_SquareEnix', 'pub_Paradox', 'pub_Nintendo', 'pub_Sony', 'pub_2K', 'pub_majesco', 'pub_Curve', 'pub_Kalypso', 'pub_Team17', 'pub_Xbox', 'Wii U', 'PlayStation 5', 'playtime_category_Novice']\n\nTop 25 Features using Tree-based Feature Importance (Random Forest):\n['playtime_ratio', 'year_Positive', 'trend_line_metacritic_yoy_Increasing', 'Nintendo Switch', 'Multiplayer', 'season_Spring', 'Xbox One', 'season_Winter', 'season_Summer', 'macOS', 'esrb_rating_name_Teen', 'esrb_rating_name_Mature', 'PlayStation 4', 'Linux', 'trend_line_playtime_yoy_Q2', 'iOS']\n40\n40\n```\n:::\n:::\n\n\n## Second Random Forest Model \n\n### Random Forest Model With Feature Selection + Hyperparameter Tuning\n\nThis trains the second machine learning model, called the RandomForestClassifier, using the selected important features from the video game dataset. The model is constructed with 200 decision trees and optimized hyperparameters. It is then trained on the training dataset, considering the weights associated with each game rating category. After training, the model is used to make predictions on the test dataset. Additionally, the code computes the probabilities of the predicted game ratings using the final model. This process allows the model to predict game ratings based on the most relevant features identified during the feature selection step, resulting in a more accurate and efficient predictive model.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Train the second classifier with the selected features\nsecond_rf_classifier = RandomForestClassifier(\n    n_estimators=200,\n    max_depth=None,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    criterion='gini',\n    min_impurity_decrease=0.0,\n    random_state = 23\n)\nsecond_rf_classifier.fit(X_train_selected, y_train, sample_weight = y_train_weights)\n\n# Use the second model for predictions\ny_pred_second = second_rf_classifier.predict(X_test_selected)\n\n# Make predictions with class probabilities using the second model\ny_pred_prob_second = second_rf_classifier.predict_proba(X_test_selected)\n```\n:::\n\n\n#### Second Model Metrics\n\nThis evaluates the second machine learning model's performance, called the RandomForestClassifier, which was trained to predict game ratings using important features from the video game dataset. The model's performance is assessed using various evaluation metrics. The metrics include ROC AUC score, which measures the model's ability to distinguish between different game ratings, the Kappa coefficient, which indicates the model's agreement with the actual ratings, accuracy, which represents the overall correctness of predictions, precision, which shows the model's ability to predict each rating category accurately, and recall, which measures the model's ability to capture all instances of each rating category. Finally, the code prints the confusion matrix, a table that summarizes the model's predictions against the actual game ratings. These evaluations help understand how well the second model performs in predicting game ratings and provide valuable insights into its effectiveness in classifying games into their respective categories.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Evaluate the second model\n# Calculate ROC AUC score for the final model\nroc_auc_second = roc_auc_score(y_test, y_pred_prob_second, multi_class='ovr')\nprint(f\"ROC AUC (Second Model): {roc_auc_second}\")\n\n# Calculate Kappa coefficient for the second model\nkappa_second = cohen_kappa_score(y_test, y_pred_second)\nprint(f\"Kappa (Second Model): {kappa_second}\")\n\n# Calculate accuracy for the second model\naccuracy_second = accuracy_score(y_test, y_pred_second)\nprint(f\"Accuracy (Second Model): {accuracy_second}\")\n\n# Calculate precision for the second model\nprecision_second = precision_score(y_test, y_pred_second, average='weighted', zero_division='warn')\nprint(f\"Precision (Second Model): {precision_second}\")\n\n# Calculate recall for the second model\nrecall_second = recall_score(y_test, y_pred_second, average='weighted', zero_division='warn')\nprint(f\"Recall (Second Model): {recall_second}\")\n\n# Calculate confusion matrix for the second model\nconfusion_second = confusion_matrix(y_test, y_pred_second)\nprint(\"Confusion Matrix (Second Model):\")\nprint(confusion_second)\n\n# TOP 40 FEATURES\nprint(X_train_selected.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nROC AUC (Second Model): 0.9686877836391522\nKappa (Second Model): 0.7684673673918357\nAccuracy (Second Model): 0.8072916666666666\nPrecision (Second Model): 0.8079237559768941\nRecall (Second Model): 0.8072916666666666\nConfusion Matrix (Second Model):\n[[48  2  1  5  2  5]\n [ 3 57  2  1  1  1]\n [ 4  1 56  4  0  3]\n [ 2  5  2 58  0  3]\n [ 5  0  1  0 45  3]\n [ 3  6  3  1  5 46]]\nIndex(['PlayStation 4', 'season_Spring', 'pub_Curve', 'pub_SquareEnix',\n       'playtime_ratio', 'esrb_rating_name_Teen', 'pub_Paradox', 'Multiplayer',\n       'dev_BioWare', 'Nintendo Switch', 'esrb_rating_name_Mature', 'pub_Xbox',\n       'Wii U', 'macOS', 'trend_line_playtime_yoy_Q2', 'season_Summer',\n       'PlayStation 5', 'subgenres_Space Flight Simulator',\n       'subgenres_Space Flight Simulator', 'Xbox One', 'Linux', 'dev_other',\n       'Xbox Series S/X', 'pub_2K', 'pub_Team17', 'dev_Crytek', 'pub_Sony',\n       'year_Positive', 'pub_Kalypso', 'Web', 'dev_FromSoftware',\n       'pub_Blizzard', 'playtime_category_Novice', 'season_Winter', 'iOS',\n       'trend_line_playtime_yoy_Q4', 'Xbox 360', 'pub_majesco', 'pub_Nintendo',\n       'trend_line_metacritic_yoy_Increasing'],\n      dtype='object')\n```\n:::\n:::\n\n\n## Principal Component Analysis (PCA) for Dimensionality Reduction and Feature Importance\n\nThis performs Principal Component Analysis (PCA) on a given dataset to reduce the dimensionality of the features and identify the most important features contributing to each principal component. PCA is a common technique used for feature extraction and visualization in machine learning and data analysis.\n\nHere's a step-by-step explanation of the code:\n\nA list named PCA_features is defined, which contains the names of the features that will be used for PCA. These features will be extracted from the original dataset.\n\nA DataFrame named PCA_columns is created by selecting the columns corresponding to the features specified in PCA_features from a DataFrame called modelDs. This PCA_columns DataFrame is used as the input data for the PCA process.\n\nThe perform_pca function is then defined to carry out the PCA process:\n\nThe function takes two arguments - data (the DataFrame containing the features) and target_variable (the column name of the target variable).\n\nThe function first separates the target variable from the features and performs standardization on the feature data using StandardScaler. Standardization ensures that all features have a mean of 0 and a standard deviation of 1.\n\nPCA is then applied to the standardized feature data using the PCA class from scikit-learn. The function computes the principal components and extracts information such as explained variance ratio and cumulative explained variance.\n\nThe cumulative explained variance is plotted against the number of principal components to visualize how much variance is explained by adding additional components.\nThe feature importance within each principal component is computed, and only the features with an absolute importance greater than 0.25 are printed for the top 25 principal components. This allows us to understand which original features contribute the most to each principal component.\n\nThe transformed data, target variable, and PCA results are returned from the function as separate DataFrames (transformed_data, target_variable, and pca_results, respectively).\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# PCA_features and PCA_columns are already defined here\n\nPCA_features = ['playtime_ratio', 'Xbox 360', 'trend_line_playtime_yoy_Q2', 'year_Positive', 'pub_2K', 'pub_SquareEnix', 'pub_Curve', 'dev_FromSoftware', 'Web', 'dev_other', 'Nintendo Switch', 'season_Spring', 'Multiplayer', 'pub_Team17', 'esrb_rating_name_Teen', 'pub_Nintendo', 'playtime_category_Novice', 'dev_Crytek', 'trend_line_metacritic_yoy_Increasing', 'pub_Blizzard', 'season_Summer', 'PlayStation 4', 'iOS', 'esrb_rating_name_Mature', 'pub_Paradox', 'pub_Kalypso', 'macOS', 'pub_Sony', 'Linux', 'season_Winter', 'pub_Xbox', 'trend_line_playtime_yoy_Q4', 'dev_BioWare', 'pub_majesco', 'Xbox One', 'subgenres_Space Flight Simulator', 'Wii U', 'Xbox Series S/X', 'PlayStation 5', 'metacritic_category']\nPCA_columns = modelDs[PCA_features]\n\n\ndef perform_pca(data, target_variable):\n    # Separate the target variable from the features\n    X = data.drop(target_variable, axis=1)\n    y = data[target_variable]\n    \n    # Standardize the features\n    scaler = StandardScaler()\n    X_scaled = scaler.fit_transform(X)\n    \n    # Perform PCA\n    pca = PCA()\n    principal_components = pca.fit_transform(X_scaled)\n    \n    # Explained variance ratio\n    explained_variance_ratio = pca.explained_variance_ratio_\n    \n    # Cumulative explained variance\n    cum_explained_variance = np.cumsum(explained_variance_ratio)\n    \n    # Feature importance within each component\n    feature_importance = pca.components_\n    \n    # Create a DataFrame to store the results\n    pca_results = pd.DataFrame({\n        'Principal Component': range(1, len(explained_variance_ratio) + 1),\n        'Explained Variance Ratio': explained_variance_ratio,\n        'Cumulative Explained Variance': cum_explained_variance\n    })\n    \n    # Plot cumulative explained variance\n    plt.plot(range(1, len(explained_variance_ratio) + 1), cum_explained_variance, marker='o')\n    plt.xlabel('Principal Component')\n    plt.ylabel('Cumulative Explained Variance')\n    plt.title('Cumulative Explained Variance by Principal Component')\n    plt.grid(True)\n    plt.show()\n    \n    # Print feature importance within each component for the top 25 components and importance > 0.25\n    num_components = min(25, len(feature_importance))\n    importance_threshold = 0.25\n    for i in range(num_components):\n        component_importance = feature_importance[i]\n        relevant_features = [feat for j, feat in enumerate(X.columns) if abs(component_importance[j]) > importance_threshold]\n        if len(relevant_features) > 0:\n            print(f\"\\nPrincipal Component {i+1} - Feature Importance:\")\n            for feat in relevant_features:\n                print(f\"{feat}: {component_importance[X.columns.get_loc(feat)]}\")\n    \n    # Rejoin the first num_components of PCA transformed data with the target variable\n    modelDs = pd.concat([pd.DataFrame(principal_components[:, :num_components]), y], axis=1)\n    \n    # Return the PCA results, transformed data, and the target variable\n    return pca_results, pd.DataFrame(principal_components[:, :num_components], columns=[f'PC{i}' for i in range(1, num_components + 1)]), y\n\n# Example usage\n# data = pd.read_csv('your_dataset.csv')  # Replace with your dataset\n\n# Call the PCA function\npca_results, transformed_data, target_variable = perform_pca(PCA_columns, 'metacritic_category')\n\n# Print the PCA results\nprint(\"\\nPCA Results:\")\nprint(pca_results)\n\n# Print the transformed data\nprint(\"\\nTransformed Data:\")\nprint(transformed_data)\n\n# Print the target variable\nprint(\"\\nTarget Variable:\")\nprint(target_variable)\n\n# Verify dimensions\nif transformed_data.shape[0] == target_variable.shape[0]:\n    # Reset the index of both DataFrames\n    transformed_data.reset_index(drop=True, inplace=True)\n    target_variable.reset_index(drop=True, inplace=True)\n```\n\n::: {.cell-output .cell-output-display}\n![](VideoGameML_files/figure-html/cell-22-output-1.png){width=589 height=449}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPrincipal Component 1 - Feature Importance:\nplaytime_ratio: 0.25682277984666396\nplaytime_category_Novice: -0.3139818287050168\nesrb_rating_name_Mature: 0.292401518758059\nmacOS: -0.33026105957632274\nLinux: -0.30009355511024466\ntrend_line_playtime_yoy_Q4: 0.3208340285296082\n\nPrincipal Component 2 - Feature Importance:\nXbox 360: -0.26492778182586235\ntrend_line_metacritic_yoy_Increasing: 0.3027890157671161\nPlayStation 4: 0.31753951928363877\nXbox One: 0.2846639123258563\nsubgenres_Space Flight Simulator: [0.25459386 0.25459386]\nsubgenres_Space Flight Simulator: [0.25459386 0.25459386]\nXbox Series S/X: 0.3482739250537587\nPlayStation 5: 0.33027860916786533\n\nPrincipal Component 3 - Feature Importance:\nsubgenres_Space Flight Simulator: [0.56683416 0.56683416]\nsubgenres_Space Flight Simulator: [0.56683416 0.56683416]\n\nPrincipal Component 4 - Feature Importance:\nplaytime_ratio: -0.3802083547107305\nplaytime_category_Novice: 0.35090582685718436\nmacOS: -0.3235472494154091\nLinux: -0.3611101354891265\ntrend_line_playtime_yoy_Q4: -0.34038810041655093\nsubgenres_Space Flight Simulator: [0.29309472 0.29309472]\nsubgenres_Space Flight Simulator: [0.29309472 0.29309472]\n\nPrincipal Component 5 - Feature Importance:\nesrb_rating_name_Teen: 0.42523649353314064\nPlayStation 4: -0.3652308945274627\nesrb_rating_name_Mature: -0.33260721236297597\nXbox One: -0.38775835869831654\n\nPrincipal Component 6 - Feature Importance:\nXbox 360: 0.2613440490895525\nseason_Spring: 0.40708967114654754\nMultiplayer: 0.3302144901528501\nseason_Summer: -0.27579739664631714\npub_Sony: -0.3269942072592522\nXbox One: 0.31259629495758073\n\nPrincipal Component 7 - Feature Importance:\nyear_Positive: -0.338771954379501\nNintendo Switch: 0.2858444690928671\npub_Nintendo: 0.41521998096670604\nseason_Summer: 0.25341788297963136\npub_Sony: -0.30633231730123295\nseason_Winter: -0.250129141929892\nWii U: 0.3539384416674871\n\nPrincipal Component 8 - Feature Importance:\npub_SquareEnix: -0.2853152422388732\ndev_other: -0.2799934686569894\nseason_Spring: -0.27435692686125496\nMultiplayer: 0.26434708582587874\ndev_Crytek: 0.2783784284964455\nseason_Winter: 0.44816010344620516\n\nPrincipal Component 9 - Feature Importance:\nXbox 360: 0.4195347900635573\npub_SquareEnix: 0.3537289292011675\nseason_Spring: -0.41083059249611187\nseason_Winter: 0.2632275786526591\n\nPrincipal Component 10 - Feature Importance:\nMultiplayer: 0.2830374385038997\npub_Blizzard: 0.351589443480684\nseason_Summer: 0.5305321090294896\nseason_Winter: -0.39711963245797216\n\nPrincipal Component 11 - Feature Importance:\npub_2K: -0.2976092926620604\ndev_other: -0.34838634456402134\nMultiplayer: -0.33148272918087907\npub_Blizzard: 0.25186802104634964\niOS: 0.27160105886702446\ndev_BioWare: 0.41220620112335\n\nPrincipal Component 12 - Feature Importance:\nyear_Positive: 0.33437444328803034\npub_Curve: 0.3447014721191338\ntrend_line_metacritic_yoy_Increasing: 0.34179959067766014\niOS: -0.31667598814920916\nWii U: 0.39271307958513796\n\nPrincipal Component 13 - Feature Importance:\ndev_FromSoftware: -0.25818758264535663\nWeb: -0.26931704391614475\nPlayStation 4: -0.26875990390053867\npub_Kalypso: -0.2665621492299066\npub_Xbox: 0.5365943643080687\n\nPrincipal Component 14 - Feature Importance:\nyear_Positive: -0.2533369445201289\npub_SquareEnix: -0.2801345029502218\npub_Nintendo: -0.3309735335042887\npub_Kalypso: -0.3726992969668297\npub_majesco: 0.42649660168690995\n\nPrincipal Component 15 - Feature Importance:\npub_2K: -0.3494748179395504\npub_Paradox: -0.3862941652487593\npub_Xbox: 0.4526289286156209\ndev_BioWare: 0.32213752329650985\n\nPrincipal Component 16 - Feature Importance:\npub_2K: -0.31887385501703247\npub_SquareEnix: 0.32192075826508343\nWeb: 0.5454546468939149\npub_Team17: -0.29047127960533103\npub_Paradox: 0.37155324245874644\npub_Xbox: 0.27800016541851225\n\nPrincipal Component 17 - Feature Importance:\npub_SquareEnix: -0.29063537346416374\nWeb: 0.310744300555904\ndev_Crytek: 0.3436419357692893\npub_Blizzard: -0.40245731333420426\npub_Paradox: -0.2850569950364566\npub_majesco: 0.2531020939347415\n\nPrincipal Component 18 - Feature Importance:\npub_Curve: -0.4274959562982782\ndev_FromSoftware: -0.27133944585381087\npub_Team17: 0.5950675529205123\npub_Paradox: 0.288041714706045\ndev_BioWare: 0.2520597317248226\n\nPrincipal Component 19 - Feature Importance:\npub_2K: -0.3581285008660841\ndev_FromSoftware: 0.2801632108090215\npub_Team17: 0.33174113606702743\ndev_BioWare: -0.3167298721570285\npub_majesco: 0.423660803543533\n\nPrincipal Component 20 - Feature Importance:\npub_Curve: 0.487916423288445\ndev_Crytek: 0.5221156220636306\npub_Blizzard: -0.31743300984936235\n\nPrincipal Component 21 - Feature Importance:\ntrend_line_playtime_yoy_Q2: -0.2521173320507644\npub_Curve: 0.34462589346845646\ndev_FromSoftware: -0.32924951006375763\nWeb: 0.5114617907836826\npub_Team17: 0.309459008828118\n\nPrincipal Component 22 - Feature Importance:\ndev_FromSoftware: 0.4610020021921105\nPlayStation 4: -0.3126871620040184\npub_Kalypso: -0.3089343742981109\npub_Sony: -0.33632826443450814\npub_majesco: -0.3102612172184556\n\nPrincipal Component 23 - Feature Importance:\nplaytime_ratio: 0.25578495796851036\ntrend_line_playtime_yoy_Q2: 0.28107055569184825\npub_Curve: 0.3368001319427792\npub_Kalypso: 0.330252818068912\ndev_BioWare: -0.3268773186772653\n\nPrincipal Component 24 - Feature Importance:\nyear_Positive: -0.42299434892763677\ndev_FromSoftware: 0.31603132067121587\npub_Paradox: 0.3609816498892301\nseason_Winter: 0.28987016764295015\n\nPrincipal Component 25 - Feature Importance:\nXbox 360: 0.37462080841398926\ntrend_line_playtime_yoy_Q2: -0.34693149086066183\npub_2K: -0.2846355334829239\npub_SquareEnix: -0.3104103068406661\n\nPCA Results:\n    Principal Component  Explained Variance Ratio  \\\n0                     1              9.176848e-02   \n1                     2              5.585964e-02   \n2                     3              5.054382e-02   \n3                     4              5.015110e-02   \n4                     5              4.418236e-02   \n5                     6              3.952107e-02   \n6                     7              3.779546e-02   \n7                     8              3.531201e-02   \n8                     9              3.287701e-02   \n9                    10              3.188970e-02   \n10                   11              2.997213e-02   \n11                   12              2.923794e-02   \n12                   13              2.826658e-02   \n13                   14              2.735970e-02   \n14                   15              2.648563e-02   \n15                   16              2.548283e-02   \n16                   17              2.508684e-02   \n17                   18              2.484531e-02   \n18                   19              2.437986e-02   \n19                   20              2.361029e-02   \n20                   21              2.300601e-02   \n21                   22              2.176944e-02   \n22                   23              2.130495e-02   \n23                   24              2.088252e-02   \n24                   25              1.863745e-02   \n25                   26              1.839979e-02   \n26                   27              1.742259e-02   \n27                   28              1.687795e-02   \n28                   29              1.599756e-02   \n29                   30              1.450113e-02   \n30                   31              1.240034e-02   \n31                   32              1.108908e-02   \n32                   33              1.047483e-02   \n33                   34              9.026613e-03   \n34                   35              8.685467e-03   \n35                   36              8.005163e-03   \n36                   37              6.916093e-03   \n37                   38              5.648168e-03   \n38                   39              4.327098e-03   \n39                   40              1.023958e-31   \n\n    Cumulative Explained Variance  \n0                        0.091768  \n1                        0.147628  \n2                        0.198172  \n3                        0.248323  \n4                        0.292505  \n5                        0.332026  \n6                        0.369822  \n7                        0.405134  \n8                        0.438011  \n9                        0.469901  \n10                       0.499873  \n11                       0.529111  \n12                       0.557377  \n13                       0.584737  \n14                       0.611223  \n15                       0.636705  \n16                       0.661792  \n17                       0.686638  \n18                       0.711017  \n19                       0.734628  \n20                       0.757634  \n21                       0.779403  \n22                       0.800708  \n23                       0.821591  \n24                       0.840228  \n25                       0.858628  \n26                       0.876050  \n27                       0.892928  \n28                       0.908926  \n29                       0.923427  \n30                       0.935827  \n31                       0.946917  \n32                       0.957391  \n33                       0.966418  \n34                       0.975103  \n35                       0.983109  \n36                       0.990025  \n37                       0.995673  \n38                       1.000000  \n39                       1.000000  \n\nTransformed Data:\n           PC1       PC2       PC3       PC4       PC5       PC6       PC7  \\\n0    -0.331860 -2.038117 -0.028367  1.412697 -0.204657 -0.491099 -0.468369   \n1    -0.331860 -2.038117 -0.028367  1.412697 -0.204657 -0.491099 -0.468369   \n2    -0.331860 -2.038117 -0.028367  1.412697 -0.204657 -0.491099 -0.468369   \n3    -1.142182  0.898708 -0.637856  0.145060 -0.659732  0.675427  0.019351   \n4     2.280909  0.256682  1.516959 -2.428100 -0.573082  0.889247 -1.141784   \n...        ...       ...       ...       ...       ...       ...       ...   \n1914  0.000119 -0.433657 -0.537880  1.190420 -2.139721 -0.295675 -0.572038   \n1915  0.000119 -0.433657 -0.537880  1.190420 -2.139721 -0.295675 -0.572038   \n1916  0.000119 -0.433657 -0.537880  1.190420 -2.139721 -0.295675 -0.572038   \n1917  0.000119 -0.433657 -0.537880  1.190420 -2.139721 -0.295675 -0.572038   \n1918  0.000119 -0.433657 -0.537880  1.190420 -2.139721 -0.295675 -0.572038   \n\n           PC8       PC9      PC10  ...      PC16      PC17      PC18  \\\n0    -0.614908  0.009837  1.533468  ... -0.312545  0.497068  0.126529   \n1    -0.614908  0.009837  1.533468  ... -0.312545  0.497068  0.126529   \n2    -0.614908  0.009837  1.533468  ... -0.312545  0.497068  0.126529   \n3     0.536855 -0.452155  0.054909  ... -0.098114 -0.378974 -0.252680   \n4    -0.119050 -0.778707  0.509005  ... -0.072547 -0.166435 -0.025633   \n...        ...       ...       ...  ...       ...       ...       ...   \n1914 -0.800447 -0.194671  1.118446  ...  0.108153  0.205518 -0.057599   \n1915 -0.800447 -0.194671  1.118446  ...  0.108153  0.205518 -0.057599   \n1916 -0.800447 -0.194671  1.118446  ...  0.108153  0.205518 -0.057599   \n1917 -0.800447 -0.194671  1.118446  ...  0.108153  0.205518 -0.057599   \n1918 -0.800447 -0.194671  1.118446  ...  0.108153  0.205518 -0.057599   \n\n          PC19      PC20      PC21      PC22      PC23      PC24      PC25  \n0    -1.302897 -0.730885 -0.424391  0.898677  1.074757 -0.603275 -0.123712  \n1    -1.302897 -0.730885 -0.424391  0.898677  1.074757 -0.603275 -0.123712  \n2    -1.302897 -0.730885 -0.424391  0.898677  1.074757 -0.603275 -0.123712  \n3    -0.110079 -0.031711 -0.534243 -0.059469  0.043018  0.331049 -0.607010  \n4    -0.117379 -0.264473  0.568389 -0.382045 -0.020634 -1.352625  0.119559  \n...        ...       ...       ...       ...       ...       ...       ...  \n1914 -1.026932 -0.703798 -0.427189  0.345293  0.537694 -0.513855 -0.956238  \n1915 -1.026932 -0.703798 -0.427189  0.345293  0.537694 -0.513855 -0.956238  \n1916 -1.026932 -0.703798 -0.427189  0.345293  0.537694 -0.513855 -0.956238  \n1917 -1.026932 -0.703798 -0.427189  0.345293  0.537694 -0.513855 -0.956238  \n1918 -1.026932 -0.703798 -0.427189  0.345293  0.537694 -0.513855 -0.956238  \n\n[1919 rows x 25 columns]\n\nTarget Variable:\n7        Good\n8        Good\n9        Good\n10       Poor\n11      Great\n        ...  \n3010     Poor\n3011     Poor\n3012     Poor\n3013     Poor\n3014     Poor\nName: metacritic_category, Length: 1919, dtype: object\n```\n:::\n:::\n\n\n### PCA-Transformed Data with Renamed Columns\n\nThis code snippet renames the columns of the DataFrame to provide more meaningful and descriptive labels for each principal component. The renaming is done using a dictionary mapping the original column names ('PC1' to 'PC25') to more interpretable names that represent different aspects of the data.\n\nNext, the code concatenates the PCA-transformed features DataFrame (transformed_data) with the target variable, presumably stored in a separate variable called target_variable. This step combines the PCA-transformed features with the target variable to create a single DataFrame containing both the features and the target variable.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Rename the columns of 'transformed_data' DataFrame using a dictionary to provide more descriptive labels for PCA components\ntransformed_data.rename(columns={\n    'PC1': 'Mature Games',\n    'PC2': 'New Console Platforms',\n    'PC3': 'Space Flight',\n    'PC4': 'Novice Games',\n    'PC5': 'Teen Games',\n    'PC6': 'Xbox',\n    'PC7': 'Nintendo',\n    'PC8': 'Multiplayer Winter Release',\n    'PC9': 'Xbox & SquareEnix',\n    'PC10': 'Blizzard MMO',\n    'PC11': 'Multiplayer Games',\n    'PC12': 'Positive Year Review Trend',\n    'PC13': 'Xbox Exclusive',\n    'PC14': 'Casual/Family Friendly',\n    'PC15': 'Xbox & Bioware',\n    'PC16': 'Online Platform Games',\n    'PC17': 'Crysis 3',\n    'PC18': 'Strategy Games',\n    'PC19': 'Storytelling Games',\n    'PC20': 'Crytek & Curve Developers',\n    'PC21': 'Puzzle Platformer Games',\n    'PC22': 'FromSoftware',\n    'PC23': 'Long Playtime Games',\n    'PC24': 'Strong Winter Lineup',\n    'PC25': 'Old Console Platforms'\n}, inplace=True)\n\n# Concatenate the PCA-transformed features DataFrame with the target variable\ndata_with_target = pd.concat([transformed_data, target_variable], axis=1)\n\n# Print the updated DataFrame\nprint(data_with_target)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Mature Games  New Console Platforms  Space Flight  Novice Games  \\\n0        -0.331860              -2.038117     -0.028367      1.412697   \n1        -0.331860              -2.038117     -0.028367      1.412697   \n2        -0.331860              -2.038117     -0.028367      1.412697   \n3        -1.142182               0.898708     -0.637856      0.145060   \n4         2.280909               0.256682      1.516959     -2.428100   \n...            ...                    ...           ...           ...   \n1914      0.000119              -0.433657     -0.537880      1.190420   \n1915      0.000119              -0.433657     -0.537880      1.190420   \n1916      0.000119              -0.433657     -0.537880      1.190420   \n1917      0.000119              -0.433657     -0.537880      1.190420   \n1918      0.000119              -0.433657     -0.537880      1.190420   \n\n      Teen Games      Xbox  Nintendo  Multiplayer Winter Release  \\\n0      -0.204657 -0.491099 -0.468369                   -0.614908   \n1      -0.204657 -0.491099 -0.468369                   -0.614908   \n2      -0.204657 -0.491099 -0.468369                   -0.614908   \n3      -0.659732  0.675427  0.019351                    0.536855   \n4      -0.573082  0.889247 -1.141784                   -0.119050   \n...          ...       ...       ...                         ...   \n1914   -2.139721 -0.295675 -0.572038                   -0.800447   \n1915   -2.139721 -0.295675 -0.572038                   -0.800447   \n1916   -2.139721 -0.295675 -0.572038                   -0.800447   \n1917   -2.139721 -0.295675 -0.572038                   -0.800447   \n1918   -2.139721 -0.295675 -0.572038                   -0.800447   \n\n      Xbox & SquareEnix  Blizzard MMO  ...  Crysis 3  Strategy Games  \\\n0              0.009837      1.533468  ...  0.497068        0.126529   \n1              0.009837      1.533468  ...  0.497068        0.126529   \n2              0.009837      1.533468  ...  0.497068        0.126529   \n3             -0.452155      0.054909  ... -0.378974       -0.252680   \n4             -0.778707      0.509005  ... -0.166435       -0.025633   \n...                 ...           ...  ...       ...             ...   \n1914          -0.194671      1.118446  ...  0.205518       -0.057599   \n1915          -0.194671      1.118446  ...  0.205518       -0.057599   \n1916          -0.194671      1.118446  ...  0.205518       -0.057599   \n1917          -0.194671      1.118446  ...  0.205518       -0.057599   \n1918          -0.194671      1.118446  ...  0.205518       -0.057599   \n\n      Storytelling Games  Crytek & Curve Developers  Puzzle Platformer Games  \\\n0              -1.302897                  -0.730885                -0.424391   \n1              -1.302897                  -0.730885                -0.424391   \n2              -1.302897                  -0.730885                -0.424391   \n3              -0.110079                  -0.031711                -0.534243   \n4              -0.117379                  -0.264473                 0.568389   \n...                  ...                        ...                      ...   \n1914           -1.026932                  -0.703798                -0.427189   \n1915           -1.026932                  -0.703798                -0.427189   \n1916           -1.026932                  -0.703798                -0.427189   \n1917           -1.026932                  -0.703798                -0.427189   \n1918           -1.026932                  -0.703798                -0.427189   \n\n      FromSoftware  Long Playtime Games  Strong Winter Lineup  \\\n0         0.898677             1.074757             -0.603275   \n1         0.898677             1.074757             -0.603275   \n2         0.898677             1.074757             -0.603275   \n3        -0.059469             0.043018              0.331049   \n4        -0.382045            -0.020634             -1.352625   \n...            ...                  ...                   ...   \n1914      0.345293             0.537694             -0.513855   \n1915      0.345293             0.537694             -0.513855   \n1916      0.345293             0.537694             -0.513855   \n1917      0.345293             0.537694             -0.513855   \n1918      0.345293             0.537694             -0.513855   \n\n      Old Console Platforms  metacritic_category  \n0                 -0.123712                 Good  \n1                 -0.123712                 Good  \n2                 -0.123712                 Good  \n3                 -0.607010                 Poor  \n4                  0.119559                Great  \n...                     ...                  ...  \n1914              -0.956238                 Poor  \n1915              -0.956238                 Poor  \n1916              -0.956238                 Poor  \n1917              -0.956238                 Poor  \n1918              -0.956238                 Poor  \n\n[1919 rows x 26 columns]\n```\n:::\n:::\n\n\n## Final Random Forest Model\n\n### Random Forest Classifier for Multi-class Classification\n\nThis code snippet demonstrates the process of training a Random Forest Classifier for a multi-class classification problem. The goal is to predict the target variable 'metacritic_category' based on the given features.\n\nHere's a step-by-step explanation of the code:\n\n1. The data is split into features (X) and the target variable (y) using the 'data_with_target' DataFrame.\n   - `X` contains all the columns from 'data_with_target' except 'metacritic_category'.\n   - `y` contains only the 'metacritic_category' column.\n\n2. The data is further split into training and testing sets using the `train_test_split` function from scikit-learn. The training set will be used to train the model, while the testing set will be used to evaluate its performance.\n   - `X_train`, `X_test`: The feature data for training and testing, respectively.\n   - `y_train`, `y_test`: The target variable data for training and testing, respectively.\n   - `test_size=0.2`: This indicates that 20% of the data will be used for testing, while 80% will be used for training.\n   - `random_state=42`: This sets a random seed for reproducibility of the split.\n\n3. A Random Forest Classifier model is created with `n_estimators=100` (number of trees in the forest) and `random_state=42` for reproducibility.\n\n4. The Random Forest model is trained on the training data using the `fit` method, which learns patterns from the feature-target relationships.\n\n5. The trained model is then used to make predictions on the test set (`X_test`) using the `predict` method, and the predicted target values are stored in `y_pred`.\n\n6. Several evaluation metrics are computed to assess the performance of the final model on the test set:\n\n   - **ROC AUC Score (Receiver Operating Characteristic - Area Under the Curve):** This metric is used for multi-class classification problems, and it measures the ability of the model to distinguish between different classes. The `'ovr'` (one-vs-rest) parameter indicates that a one-vs-rest strategy is used for multi-class evaluation.\n   - **Kappa Score (Cohen's Kappa):** It measures the agreement between the actual and predicted classes, taking into account the possibility of agreement occurring by chance. Higher kappa values indicate better model performance.\n   - **Accuracy:** The percentage of correctly predicted instances out of the total instances in the test set.\n   - **Precision:** The ability of the model to correctly identify positive instances out of all instances predicted as positive. Weighted averaging is used for multi-class problems to handle class imbalance.\n   - **Recall:** The ability of the model to correctly identify positive instances out of all actual positive instances. Weighted averaging is used for multi-class problems to handle class imbalance.\n\n7. The confusion matrix is computed using the `confusion_matrix` function from scikit-learn. It shows the number of correct and incorrect predictions for each class in tabular form.\n\nThe printed evaluation metrics and the confusion matrix provide insights into the performance of the Random Forest Classifier on the test set. These metrics are crucial for determining how well the model generalizes to unseen data and whether it effectively discriminates among the different classes in the multi-class classification problem.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# Split the data into features (X) and the target variable (y)\nX = data_with_target.drop('metacritic_category', axis=1)\ny = data_with_target['metacritic_category']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the Random Forest model\nfinal_rf_model = RandomForestClassifier(\n    n_estimators=100,\n    max_depth=12,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    criterion='gini',\n    random_state=23\n)\n\n# Train the model on the training data\nfinal_rf_model.fit(X_train, y_train)\n\n# Use the trained model to make predictions on the test set\ny_pred_final = final_rf_model.predict(X_test)\n\n# Make predictions with class probabilities using the final model\ny_pred_prob_final = final_rf_model.predict_proba(X_test)\n\n# Evaluate the final model\nroc_auc_final = roc_auc_score(y_test, y_pred_prob_final, multi_class='ovr')\nprint(f\"ROC AUC (Final Model): {roc_auc_final}\")\n\nkappa_final = cohen_kappa_score(y_test, y_pred_final)\nprint(f\"Kappa (Final Model): {kappa_final}\")\n\naccuracy_final = accuracy_score(y_test, y_pred_final)\nprint(f\"Accuracy (Final Model): {accuracy_final}\")\n\nprecision_final = precision_score(y_test, y_pred_final, average='weighted', zero_division='warn')\nprint(f\"Precision (Final Model): {precision_final}\")\n\nrecall_final = recall_score(y_test, y_pred_final, average='weighted', zero_division='warn')\nprint(f\"Recall (Final Model): {recall_final}\")\n\nconfusion_final = confusion_matrix(y_test, y_pred_final)\nprint(\"Confusion Matrix (Final Model):\")\nprint(confusion_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nROC AUC (Final Model): 0.9749806118363283\nKappa (Final Model): 0.8403300367704011\nAccuracy (Final Model): 0.8671875\nPrecision (Final Model): 0.8711479411303354\nRecall (Final Model): 0.8671875\nConfusion Matrix (Final Model):\n[[52  3  1  2  1  1]\n [ 0 56  2  1  1  1]\n [ 0  7 58  2  0  3]\n [ 2  3  3 59  2  0]\n [ 0  0  1  1 47  5]\n [ 0  2  5  1  1 61]]\n```\n:::\n:::\n\n\n#### Feature Importance Analysis with Random Forest Classifier\n\nThis code snippet demonstrates how to analyze the feature importances of a Random Forest Classifier model. Feature importance analysis helps identify which features have the most significant impact on the model's predictions and can be crucial for understanding the factors driving the classification outcomes.\n\nThe printed output displays the features in descending order of importance, providing insights into which features have the most significant influence on the Random Forest Classifier's predictions. Features with higher importances are more influential in making accurate predictions, while features with lower importances have less impact on the model's decision-making process.\n\nThis analysis can be used to gain a better understanding of the dataset and the factors contributing to the classification outcomes. It also helps in feature selection, as features with low importance may be candidates for removal to simplify the model without sacrificing predictive performance. Additionally, feature importance analysis can guide further investigations into the relationships between features and the target variable in the context of the classification problem at hand.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Get the feature importances from the model\nfeature_importances = final_rf_model.feature_importances_\n\n# Create a DataFrame to store feature names and their importances\nfeature_importance_df = pd.DataFrame({\n    'Feature': X.columns,\n    'Importance': feature_importances\n})\n\n# Sort the DataFrame by importance in descending order\nfeature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n\n# Print the features from greatest importance to least\nprint(\"Features ranked by importance (from greatest to least):\")\nprint(feature_importance_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFeatures ranked by importance (from greatest to least):\n                       Feature  Importance\n6                     Nintendo    0.056996\n3                 Novice Games    0.050228\n0                 Mature Games    0.048072\n21                FromSoftware    0.044173\n22         Long Playtime Games    0.043345\n23        Strong Winter Lineup    0.042288\n10           Multiplayer Games    0.041994\n5                         Xbox    0.041441\n1        New Console Platforms    0.040445\n19   Crytek & Curve Developers    0.039952\n11  Positive Year Review Trend    0.039853\n12              Xbox Exclusive    0.039321\n2                 Space Flight    0.038979\n24       Old Console Platforms    0.038921\n13      Casual/Family Friendly    0.038615\n4                   Teen Games    0.038235\n14              Xbox & Bioware    0.038032\n16                    Crysis 3    0.036441\n20     Puzzle Platformer Games    0.036285\n8            Xbox & SquareEnix    0.036224\n15       Online Platform Games    0.034833\n18          Storytelling Games    0.034378\n9                 Blizzard MMO    0.034207\n17              Strategy Games    0.033490\n7   Multiplayer Winter Release    0.033252\n```\n:::\n:::\n\n\n#### Random Forest Classifier Evaluation Results\n\nAfter training the Random Forest Classifier on the provided dataset and making predictions on the test set, the model's performance was evaluated using various metrics. Here are the updated evaluation results:\n\n- **ROC AUC (Final Model): 0.9749**\n  The ROC AUC score measures the ability of the model to discriminate between different classes in a multi-class classification problem. The score ranges from 0 to 1, with 1 indicating a perfect classifier and 0.5 indicating a random classifier. With an improved ROC AUC score of 0.9749, the model's discriminatory power is significantly better than random guessing, suggesting that it performs very well in distinguishing between classes.\n\n- **Kappa (Final Model): 0.8403**\n  Cohen's Kappa measures the agreement between the model's predictions and the actual class labels, taking into account the possibility of agreement by chance. A kappa value of 1 indicates perfect agreement, while a value close to 0 suggests agreement by chance. The model achieves a Kappa score of approximately 0.8403, indicating strong agreement between predictions and true labels.\n\n- **Accuracy (Final Model): 0.8672**\n  Accuracy is the percentage of correctly predicted instances out of the total instances in the test set. In this case, the model achieves an accuracy of around 86.7%, indicating that it correctly predicts the class label for a substantial portion of the test instances.\n\n- **Precision (Final Model): 0.8711**\n  Precision measures the ability of the model to correctly identify positive instances out of all instances predicted as positive. Weighted averaging is used for multi-class problems to handle class imbalance. Here, the weighted precision is approximately 0.8711, indicating that the model performs well in correctly identifying positive instances across different classes.\n\n- **Recall (Final Model): 0.8672**\n  Recall, also known as sensitivity or true positive rate, measures the ability of the model to correctly identify positive instances out of all actual positive instances. Weighted averaging is used for multi-class problems to handle class imbalance. The weighted recall is approximately 0.8672, indicating that the model effectively captures a high proportion of positive instances for different classes.\n\n- **Confusion Matrix (Final Model):**\n  ```\n  [[52  3  1  2  1  1]\n   [ 0 56  2  1  1  1]\n   [ 0  7 58  2  0  3]\n   [ 2  3  3 59  2  0]\n   [ 0  0  1  1 47  5]\n   [ 0  2  5  1  1 61]]\n  ```\n  The confusion matrix provides a detailed breakdown of correct and incorrect predictions for each class. The matrix is displayed in tabular form, where rows represent the true classes, and columns represent the predicted classes. Each cell (i, j) in the matrix represents the number of instances of class i that were predicted as class j. The diagonal elements (from top-left to bottom-right) represent correct predictions, and off-diagonal elements represent misclassifications. The confusion matrix can help identify which classes are well-predicted and which may require further investigation or improvement.\n\n\n  The random forest model achieved excellent performance, with an ROC AUC of 0.975, indicating strong discriminatory power. The Kappa score of 0.840 suggests substantial agreement beyond chance. The overall accuracy of the model is 86.7%, and it achieved a high precision of 87.1%. The recall is also 86.7%, indicating a good ability to identify true positives. The confusion matrix shows relatively low misclassifications across different classes, further confirming the model's effectiveness in making accurate predictions.\n\n  #### Decision Tree Visualization\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nfrom sklearn.tree import plot_tree\n\n# Get the first decision tree from the Random Forest model\nbest_decision_tree = final_rf_model.estimators_[6]\n\n# Get the feature names from the original data\nfeature_names = X.columns\n\nplt.rcParams['font.family'] = 'SF Compact Rounded'\n\nplt.figure(figsize=(20, 10))\nplot_tree(best_decision_tree, feature_names=feature_names, class_names=final_rf_model.classes_,\n          filled=True, rounded=True, fontsize=9, max_depth=3)  # Set max_depth=3 and font_name='Arial'\nplt.title(\"Random Forest's First Decision Tree (First 3 Levels)\", fontsize=16)  # Set fontname='Arial'\n\n# Adjust layout to avoid overlapping\nplt.tight_layout()\n\n# Save the decision tree as an SVG file\nplt.savefig(\"best_decision_tree_first_3_levels_custom_font.jpeg\", format=\"jpeg\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VideoGameML_files/figure-html/cell-26-output-1.png){width=1906 height=950}\n:::\n:::\n\n\n## Other Successful Models\n\n### Gradient Boosting Machine Model\n\nThis code snippet performs hyperparameter tuning for a Gradient Boosting classifier using GridSearchCV with 5-fold cross-validation. The goal is to find the best combination of hyperparameters that results in the highest accuracy on the validation data.\n\nThe hyperparameters considered for tuning are `n_estimators` (number of boosting stages), `learning_rate` (step size at each iteration), `max_depth` (maximum depth of trees), `min_samples_split` (minimum samples required to split an internal node), and `min_samples_leaf` (minimum samples required to be at a leaf node).\n\nAfter fitting the GridSearchCV to the training data, the best hyperparameters (`best_params`) are obtained, and the best Gradient Boosting classifier (`best_gb_classifier`) is extracted. This process helps optimize the model's performance and improves its ability to make accurate predictions on unseen data.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# Create the Gradient Boosting classifier\n#gb_classifier = GradientBoostingClassifier()\n\n# Define the hyperparameter grid to search over\n#param_grid = {\n#    'n_estimators': [50, 100, 200],          # Number of boosting stages to be run\n#    'learning_rate': [0.01, 0.1, 0.2],       # Step size at each iteration\n#    'max_depth': [3, 5, 7],                  # Maximum depth of the individual trees\n#    'min_samples_split': [2, 5, 10],         # Minimum number of samples required to split an internal node\n#   'min_samples_leaf': [1, 2, 4]            # Minimum number of samples required to be at a leaf node\n#}\n\n# Create the GridSearchCV object with 5-fold cross-validation\n#grid_search = GridSearchCV(gb_classifier, param_grid, cv=5, scoring='accuracy')\n\n# Fit the GridSearchCV to the training data\n#grid_search.fit(X_train, y_train, sample_weight=y_train_weights)\n\n# Get the best hyperparameters from the grid search\n#best_params = grid_search.best_params_\n#print(\"Best Hyperparameters:\", best_params)\n\n# Get the best Gradient Boosting classifier with the best hyperparameters\n#best_gb_classifier = grid_search.best_estimator_\n\n```\n:::\n\n\n#### Gradient Boosting Classifier Evaluation\n\nThis code snippet evaluates the performance of a Gradient Boosting classifier with the best hyperparameters on a given dataset. The key steps are as follows:\n\n1. **Creating the Classifier**: The Gradient Boosting classifier is initialized with optimized hyperparameters, including learning rate, max depth, minimum samples per leaf, minimum samples per split, and the number of estimators.\n\n2. **Cross-Validation and Average Accuracy**: The classifier's performance is estimated through 5-fold cross-validation, and the average accuracy is computed.\n\n3. **Fitting the Classifier**: The best classifier is trained on the training data, with optional sample weights.\n\n4. **Making Predictions**: The trained classifier is used to predict class labels and class probabilities on the test data.\n\n5. **Model Evaluation**: Various metrics are calculated to evaluate the classifier's performance, including ROC AUC score, Kappa coefficient, accuracy, precision, recall, and the confusion matrix.\n\nOverall, this code demonstrates the process of training, evaluating, and analyzing the effectiveness of the Gradient Boosting classifier on the given dataset.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# Create the Gradient Boosting classifier with the best hyperparameters\nbest_gb_classifier = GradientBoostingClassifier(learning_rate=0.1, \n                                                max_depth=3, \n                                                min_samples_leaf=1, \n                                                min_samples_split=5, \n                                                n_estimators=200, \n                                                random_state=456)\n\n# Perform cross-validation with the best classifier and print out the average accuracy\ncv_scores_gb = cross_val_score(best_gb_classifier, X_train, y_train, cv=5)\nprint(\"Best Gradient Boosting Cross-Validation Scores:\", cv_scores_gb)\nprint(\"Average Best Gradient Boosting Accuracy:\", cv_scores_gb.mean())\n\n# Fit the best Gradient Boosting classifier to the training data\nbest_gb_classifier.fit(X_train, y_train, sample_weight=y_train_weights)\n\n# Use the trained best Gradient Boosting classifier for predictions\ny_pred_gb = best_gb_classifier.predict(X_test)\n\n# Make predictions with class probabilities\ny_pred_prob_gb = best_gb_classifier.predict_proba(X_test)\n\n# Calculate ROC AUC score\nroc_auc_gb = roc_auc_score(y_test, y_pred_prob_gb, multi_class='ovr')\nprint(f\"ROC AUC (Best Gradient Boosting): {roc_auc_gb}\")\n\n# Calculate Kappa coefficient\nkappa_gb = cohen_kappa_score(y_test, y_pred_gb)\nprint(f\"Kappa (Best Gradient Boosting): {kappa_gb}\")\n\n# Calculate accuracy\naccuracy_gb = accuracy_score(y_test, y_pred_gb)\nprint(f\"Accuracy (Best Gradient Boosting): {accuracy_gb}\")\n\n# Calculate precision\nprecision_gb = precision_score(y_test, y_pred_gb, average='weighted')\nprint(f\"Precision (Best Gradient Boosting): {precision_gb}\")\n\n# Calculate recall\nrecall_gb = recall_score(y_test, y_pred_gb, average='weighted')\nprint(f\"Recall (Best Gradient Boosting): {recall_gb}\")\n\n# Calculate confusion matrix\nconfusion_gb = confusion_matrix(y_test, y_pred_gb)\nprint(\"Confusion Matrix (Best Gradient Boosting):\")\nprint(confusion_gb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBest Gradient Boosting Cross-Validation Scores: [0.82084691 0.82410423 0.79478827 0.82736156 0.77198697]\nAverage Best Gradient Boosting Accuracy: 0.8078175895765473\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nROC AUC (Best Gradient Boosting): 0.970230184189012\nKappa (Best Gradient Boosting): 0.8247789773884702\nAccuracy (Best Gradient Boosting): 0.8541666666666666\nPrecision (Best Gradient Boosting): 0.8556025903159824\nRecall (Best Gradient Boosting): 0.8541666666666666\nConfusion Matrix (Best Gradient Boosting):\n[[51  1  3  2  1  2]\n [ 1 56  1  1  2  0]\n [ 4  2 58  1  1  4]\n [ 4  2  2 58  3  0]\n [ 4  1  1  1 46  1]\n [ 1  3  4  3  0 59]]\n```\n:::\n:::\n\n\n#### Gradient Boosting Classifier Evaluation\n\n- **Best Gradient Boosting Cross-Validation Scores**: The cross-validation accuracy scores for the best Gradient Boosting classifier are as follows: [0.82084691, 0.82410423, 0.79478827, 0.82736156, 0.77198697]. These scores were obtained using 5-fold cross-validation to estimate the classifier's performance on unseen data.\n\n- **Average Best Gradient Boosting Accuracy**: The average accuracy of the classifier across the 5 cross-validation folds is 0.8078. This value provides an overall indication of the classifier's performance on the training data.\n\n- **ROC AUC (Best Gradient Boosting)**: The Receiver Operating Characteristic Area Under the Curve (ROC AUC) score is 0.9702. A higher ROC AUC score indicates that the classifier has good discrimination ability between different classes.\n\n- **Kappa (Best Gradient Boosting)**: The Kappa coefficient is 0.8248. Kappa measures the agreement between the predicted and true labels, considering agreement by chance. Higher values signify better agreement.\n\n- **Accuracy (Best Gradient Boosting)**: The accuracy of the classifier on the test data is 0.8542. It represents the proportion of correct predictions out of all predictions made.\n\n- **Precision (Best Gradient Boosting)**: The precision is 0.8556. Precision is the ratio of true positive predictions to the total predicted positive instances. The weighted average is used for multi-class problems.\n\n- **Recall (Best Gradient Boosting)**: The recall is 0.8542. Recall is the ratio of true positive predictions to the total actual positive instances. The weighted average is used for multi-class problems.\n\n- **Confusion Matrix (Best Gradient Boosting)**: The confusion matrix provides a detailed view of the classifier's predictions compared to the true labels. It shows the number of instances for each true class and the predicted class, helping to analyze the classifier's performance in multi-class classification scenarios.\n\nIn conclusion, the best Gradient Boosting classifier demonstrates favorable performance, with high accuracy, ROC AUC score, and precision. The confusion matrix offers valuable insights into the classifier's predictions for each class.\n\n\n#### Feature Importance Analysis\n\nThis code snippet performs feature importance analysis for the trained Gradient Boosting classifier (`best_gb_classifier`). The key steps are as follows:\n\n1. **Get Feature Importances**: The code retrieves the feature importances from the trained Gradient Boosting model. Feature importances indicate the relative importance of each feature in contributing to the model's predictions.\n\n2. **Create Feature Importance DataFrame**: The feature importances are stored in a DataFrame named `feature_importance_df`. This DataFrame has two columns: 'Feature', which contains the names of the features, and 'Importance', which contains their corresponding importances.\n\n3. **Sort Features by Importance**: The DataFrame is sorted in descending order based on the feature importances. This step arranges the features from the most important to the least important.\n\n4. **Print Ranked Features**: The code prints the list of features along with their importances, in descending order of importance. This provides insights into which features have the most significant impact on the model's predictions.\n\nOverall, this analysis helps identify the most influential features, allowing for better understanding and interpretation of the model's decision-making process.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# Get the feature importances from the model\nfeature_importances = best_gb_classifier.feature_importances_\n\n# Create a DataFrame to store feature names and their importances\nfeature_importance_df = pd.DataFrame({\n    'Feature': X.columns,\n    'Importance': feature_importances\n})\n\n# Sort the DataFrame by importance in descending order\nfeature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n\n# Print the features from greatest importance to least\nprint(\"Features ranked by importance (from greatest to least):\")\nprint(feature_importance_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFeatures ranked by importance (from greatest to least):\n                       Feature  Importance\n6                     Nintendo    0.072797\n3                 Novice Games    0.070135\n0                 Mature Games    0.063015\n19   Crytek & Curve Developers    0.050887\n11  Positive Year Review Trend    0.048675\n5                         Xbox    0.048222\n23        Strong Winter Lineup    0.047725\n2                 Space Flight    0.043196\n13      Casual/Family Friendly    0.041089\n24       Old Console Platforms    0.040288\n4                   Teen Games    0.037371\n12              Xbox Exclusive    0.037306\n20     Puzzle Platformer Games    0.036838\n15       Online Platform Games    0.035961\n16                    Crysis 3    0.033876\n22         Long Playtime Games    0.032398\n1        New Console Platforms    0.032015\n10           Multiplayer Games    0.031415\n7   Multiplayer Winter Release    0.031241\n18          Storytelling Games    0.031148\n8            Xbox & SquareEnix    0.030228\n21                FromSoftware    0.028364\n9                 Blizzard MMO    0.027151\n14              Xbox & Bioware    0.026754\n17              Strategy Games    0.021905\n```\n:::\n:::\n\n\n#### Feature Importance Ranking\n\nThe table below displays the features ranked by importance in descending order:\n\n| Feature                     | Importance  | Description                                                                                                                             |\n|-----------------------------|-------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| Nintendo                    | 0.072797    | The feature \"Nintendo\" has the highest importance, indicating its substantial influence on the classifier's predictions. It suggests that games associated with the Nintendo platform play a significant role in determining the predicted \"metacritic_category.\" |\n| Novice Games                | 0.070135    | \"Novice Games\" is the second most important feature. It suggests that games categorized as \"Novice\" might strongly influence the classifier's predictions.                                                                  |\n| Mature Games                | 0.063015    | \"Mature Games\" is the third most important feature. Games targeted at mature audiences seem to be influential in predicting the \"metacritic_category.\"                                                          |\n| Crytek & Curve Developers   | 0.050887    | The involvement of \"Crytek & Curve Developers\" has a relatively high importance, impacting the classifier's predictions.                                                                                |\n| Positive Year Review Trend  | 0.048675    | The presence of a \"Positive Year Review Trend\" holds significant importance, suggesting that games with positive year-long trends might contribute to more positive predictions.                                      |\n\nThis feature importance ranking provides insights into which features had the most significant impact on the predictions made by the classifier for the target variable \"metacritic_category.\" The importance values are normalized and sum up to 1.0. Hence, the higher the importance value for a feature, the more influential it is in determining the predicted \"metacritic_category.\" Features with lower importance values have relatively less impact on the predictions.\n\n\n### XGBoost Model\n\n#### Hyperparameter Tuning for XGBoost Classifier\n\nThis code performs hyperparameter tuning for an XGBoost classifier using GridSearchCV with 5-fold cross-validation. It encodes the target variable `y_train` into integer labels, defines a hyperparameter grid, creates the XGBoost classifier, and fits the GridSearchCV to the training data. After the grid search, it obtains the best hyperparameters (`best_params_xgb`) and retrieves the best XGBoost classifier (`best_xgb_classifier`) with the optimal hyperparameters. This process aims to optimize the classifier's performance and improve its predictions on unseen data.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# Encode the target variable 'y_train' into integer labels\n#label_encoder = LabelEncoder()\n#y_train_encoded = label_encoder.fit_transform(y_train)\n\n# Encode the target variable 'y_test' into integer labels using the same label encoder\n#y_test_encoded = label_encoder.transform(y_test)\n\n# Define the hyperparameter grid to search over\n#param_grid = {\n#    'learning_rate': [0.01, 0.1, 0.2],\n#    'max_depth': [3, 5, 7],\n#    'min_child_weight': [1, 3, 5],\n#    'subsample': [0.8, 1.0],\n#    'colsample_bytree': [0.8, 1.0],\n#    'n_estimators': [100, 200, 300]\n#}\n\n# Create the XGBoost classifier\n#xgb_classifier = xgb.XGBClassifier(random_state=456)\n\n# Create the GridSearchCV object with 5-fold cross-validation\n#grid_search = GridSearchCV(xgb_classifier, param_grid, cv=5, scoring='accuracy')\n\n# Fit the GridSearchCV to the training data\n#grid_search.fit(X_train, y_train_encoded, sample_weight=y_train_weights)\n\n# Get the best hyperparameters from the grid search\n#best_params_xgb = grid_search.best_params_\n#print(\"Best Hyperparameters for XGBoost:\", best_params_xgb)\n\n# Get the best XGBoost classifier with the best hyperparameters\n#best_xgb_classifier = grid_search.best_estimator_\n```\n:::\n\n\n#### XGBoost Classifier Evaluation with Best Hyperparameters\n\nThis code evaluates the performance of an XGBoost classifier with the best hyperparameters obtained from previous hyperparameter tuning. The steps involved are as follows:\n\n1. **Encoding Target Variable**: The target variable `y_train` is encoded into integer labels using the `LabelEncoder`, resulting in `y_train_encoded`. The same label encoder is used to encode the target variable `y_test` into integer labels, resulting in `y_test_encoded`.\n\n2. **Setting Best Hyperparameters**: The best hyperparameters for the XGBoost classifier are predefined and stored in `best_params_xgb`. These hyperparameters include `colsample_bytree`, `learning_rate`, `max_depth`, `min_child_weight`, `n_estimators`, and `subsample`.\n\n3. **Creating the XGBoost Classifier**: The XGBoost classifier `best_xgb_classifier` is created with the best hyperparameters specified in `best_params_xgb`. The `random_state` is set to 456 for reproducibility.\n\n4. **Cross-Validation and Average Accuracy**: The code performs 5-fold cross-validation with the best XGBoost classifier using `cross_val_score`. It computes the cross-validation scores (`cv_scores_xgb`) and calculates the average accuracy (`cv_scores_xgb.mean()`).\n\n5. **Fitting the Classifier**: The best XGBoost classifier is trained on the training data (`X_train`, `y_train_encoded`) with optional sample weights (`y_train_weights`) using the `fit` method.\n\n6. **Making Predictions**: The trained XGBoost classifier is used to predict class labels (`y_pred_xgb`) and class probabilities (`y_pred_prob_xgb`) on the test data (`X_test`).\n\n7. **Calculating Evaluation Metrics**:\n   - **ROC AUC Score**: The Receiver Operating Characteristic Area Under the Curve (ROC AUC) score is calculated using the `roc_auc_score` function. It measures the classifier's ability to distinguish between different classes, considering the \"One-vs-Rest\" strategy for multi-class problems.\n   - **Kappa Coefficient**: The Cohen's Kappa coefficient is calculated using the `cohen_kappa_score` function. It measures the agreement between the predicted and true labels, accounting for the possibility of agreement by chance.\n   - **Accuracy**: The accuracy of the classifier on the test data is calculated using the `accuracy_score` function. It represents the proportion of correct predictions out of all predictions made.\n   - **Precision**: Precision is calculated using the `precision_score` function with the weighted average for multi-class problems. Precision is the ratio of true positive predictions to the total predicted positive instances.\n   - **Recall**: Recall is calculated using the `recall_score` function with the weighted average for multi-class problems. Recall is the ratio of true positive predictions to the total actual positive instances.\n\n8. **Confusion Matrix**: The confusion matrix is calculated using the `confusion_matrix` function. It provides a tabular representation of the classifier's predictions compared to the true labels. The matrix helps analyze the classifier's performance in detail, particularly in multi-class classification scenarios.\n\nOverall, this code evaluates the XGBoost classifier's effectiveness in making predictions with the best hyperparameters and provides insights into its performance using various evaluation metrics.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n# Encode the target variable 'y_train' into integer labels\nlabel_encoder = LabelEncoder()\ny_train_encoded = label_encoder.fit_transform(y_train)\n\n# Encode the target variable 'y_test' into integer labels using the same label encoder\ny_test_encoded = label_encoder.transform(y_test)\n\n# Set the best hyperparameters for XGBoost\nbest_params_xgb = {'colsample_bytree': 0.8, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 1, 'n_estimators': 300, 'subsample': 0.8}\n\n# Create the XGBoost classifier with the best hyperparameters\nbest_xgb_classifier = xgb.XGBClassifier(**best_params_xgb, random_state=456)\n\n# Perform cross-validation with the best classifier and print out the average accuracy\ncv_scores_xgb = cross_val_score(best_xgb_classifier, X_train, y_train_encoded, cv=5)\nprint(\"Best XGBoost Cross-Validation Scores:\", cv_scores_xgb)\nprint(\"Average Best XGBoost Accuracy:\", cv_scores_xgb.mean())\n\n# Fit the best XGBoost classifier to the training data\nbest_xgb_classifier.fit(X_train, y_train_encoded, sample_weight=y_train_weights)\n\n# Use the trained best XGBoost classifier for predictions\ny_pred_xgb = best_xgb_classifier.predict(X_test)\n\n# Make predictions with class probabilities\ny_pred_prob_xgb = best_xgb_classifier.predict_proba(X_test)\n\n# Calculate ROC AUC score\nroc_auc_xgb = roc_auc_score(y_test_encoded, y_pred_prob_xgb, multi_class='ovr')\nprint(f\"ROC AUC (Best XGBoost): {roc_auc_xgb}\")\n\n# Calculate Kappa coefficient\nkappa_xgb = cohen_kappa_score(y_test_encoded, y_pred_xgb)\nprint(f\"Kappa (Best XGBoost): {kappa_xgb}\")\n\n# Calculate accuracy\naccuracy_xgb = accuracy_score(y_test_encoded, y_pred_xgb)\nprint(f\"Accuracy (Best XGBoost): {accuracy_xgb}\")\n\n# Calculate precision\nprecision_xgb = precision_score(y_test_encoded, y_pred_xgb, average='weighted')\nprint(f\"Precision (Best XGBoost): {precision_xgb}\")\n\n# Calculate recall\nrecall_xgb = recall_score(y_test_encoded, y_pred_xgb, average='weighted')\nprint(f\"Recall (Best XGBoost): {recall_xgb}\")\n\n# Calculate confusion matrix\nconfusion_xgb = confusion_matrix(y_test_encoded, y_pred_xgb)\nprint(\"Confusion Matrix (Best XGBoost):\")\nprint(confusion_xgb)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBest XGBoost Cross-Validation Scores: [0.82084691 0.82410423 0.80456026 0.81433225 0.76872964]\nAverage Best XGBoost Accuracy: 0.8065146579804561\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nROC AUC (Best XGBoost): 0.9786895125316436\nKappa (Best XGBoost): 0.8279121308910762\nAccuracy (Best XGBoost): 0.8567708333333334\nPrecision (Best XGBoost): 0.8604592734913877\nRecall (Best XGBoost): 0.8567708333333334\nConfusion Matrix (Best XGBoost):\n[[51  2  4  2  0  1]\n [ 2 56  1  1  1  0]\n [ 2  6 57  2  0  3]\n [ 5  2  2 59  1  0]\n [ 3  1  1  1 47  1]\n [ 1  3  4  1  2 59]]\n```\n:::\n:::\n\n\n#### XGBoost Feature Importance Ranking\n\nThis code calculates and ranks the feature importances from the trained XGBoost classifier (`best_xgb_classifier`). The importance values are sorted in descending order, providing insights into the most influential features used by the XGBoost model in making predictions.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# Get the feature importances from the model\nfeature_importances = best_xgb_classifier.feature_importances_\n\n# Create a DataFrame to store feature names and their importances\nfeature_importance_df = pd.DataFrame({\n    'Feature': X.columns,\n    'Importance': feature_importances\n})\n\n# Sort the DataFrame by importance in descending order\nfeature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n\n# Print the features from greatest importance to least\nprint(\"Features ranked by importance (from greatest to least):\")\nprint(feature_importance_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFeatures ranked by importance (from greatest to least):\n                       Feature  Importance\n3                 Novice Games    0.053219\n6                     Nintendo    0.050639\n0                 Mature Games    0.049095\n5                         Xbox    0.044937\n23        Strong Winter Lineup    0.043354\n19   Crytek & Curve Developers    0.042328\n20     Puzzle Platformer Games    0.042104\n18          Storytelling Games    0.042080\n21                FromSoftware    0.040433\n11  Positive Year Review Trend    0.040315\n16                    Crysis 3    0.040135\n14              Xbox & Bioware    0.039498\n1        New Console Platforms    0.038950\n8            Xbox & SquareEnix    0.038657\n13      Casual/Family Friendly    0.038445\n12              Xbox Exclusive    0.038413\n24       Old Console Platforms    0.037626\n2                 Space Flight    0.037307\n15       Online Platform Games    0.036976\n22         Long Playtime Games    0.036722\n17              Strategy Games    0.036508\n4                   Teen Games    0.035989\n10           Multiplayer Games    0.034751\n7   Multiplayer Winter Release    0.032226\n9                 Blizzard MMO    0.029292\n```\n:::\n:::\n\n\n#### Feature Importance Ranking\n\nThe table below displays the features ranked by their importance in descending order, as determined by the model:\n\n| Rank | Feature                    | Importance |\n|------|----------------------------|------------|\n| 1    | Mature Games               | 0.054591   |\n| 2    | Novice Games               | 0.051460   |\n| 3    | Nintendo                   | 0.050755   |\n| 4    | Xbox                       | 0.045813   |\n| 5    | FromSoftware               | 0.043867   |\n| 6    | Crytek & Curve Developers  | 0.042657   |\n| 7    | Strong Winter Lineup       | 0.041910   |\n| 8    | Casual/Family Friendly     | 0.041123   |\n| 9    | Storytelling Games         | 0.040672   |\n| 10   | Puzzle Platformer Games    | 0.040195   |\n| 11   | Xbox & Bioware             | 0.040179   |\n| 12   | Crysis 3                   | 0.038291   |\n| 13   | Strategy Games             | 0.037837   |\n| 14   | Positive Year Review Trend | 0.037780   |\n| 15   | Teen Games                 | 0.037780   |\n| 16   | New Console Platforms      | 0.037450   |\n| 17   | Space Flight               | 0.037444   |\n| 18   | Long Playtime Games        | 0.037288   |\n| 19   | Xbox Exclusive             | 0.037132   |\n| 20   | Xbox & SquareEnix          | 0.037038   |\n| 21   | Old Console Platforms      | 0.036267   |\n| 22   | Online Platform Games      | 0.036013   |\n| 23   | Multiplayer Games          | 0.033563   |\n| 24   | Blizzard MMO               | 0.032037   |\n| 25   | Multiplayer Winter Release | 0.030859   |\n\n\nTo understand why certain features matter in predicting the \"metacritic_category\" target variable, we analyze the feature importance ranking in descending order:\n\n1. **Mature Games (Importance: 0.054591)**:\n   - The feature \"Mature Games\" holds the highest importance, indicating that games targeted at mature audiences significantly influence the model's predictions. Such games might have themes, content, or gameplay elements that align with specific \"metacritic_category\" levels. This suggests that games intended for mature players could be associated with higher ratings like \"Great\" or \"Excellent.\"\n\n2. **Novice Games (Importance: 0.051460)**:\n   - \"Novice Games\" come in as the second most important feature, suggesting that games tailored for entry-level or less experienced players play a crucial role in the model's predictions. It implies that these games might have specific characteristics associated with certain \"metacritic_category\" levels. For example, they might receive lower ratings falling into \"Poor\" or \"Mixed\" categories.\n\n3. **Nintendo (Importance: 0.050755)**:\n   - The presence of \"Nintendo\" among the top features implies that games associated with the Nintendo platform significantly impact the model's decisions. It suggests that games released on Nintendo consoles may have unique qualities, gaming experiences, or audience preferences that align with specific \"metacritic_category\" levels.\n\n4. **Xbox (Importance: 0.045813)**:\n   - \"Xbox\" is the fourth most important feature, indicating that games associated with the Xbox platform have notable importance in the model's predictions. Xbox games might possess distinct characteristics or gaming experiences that align with certain \"metacritic_category\" levels. For instance, Xbox-exclusive titles could influence higher ratings.\n\n5. **FromSoftware (Importance: 0.043867)**:\n   - The feature \"FromSoftware\" ranks fifth in importance, suggesting that games developed by this studio significantly influence the model's predictions. FromSoftware is known for its critically acclaimed and challenging games, which could be associated with higher ratings like \"Great\" or \"Excellent\" in the \"metacritic_category.\"\n\n#### Visualizing the First Decision Tree in XGBoost\n\nThis code snippet demonstrates how to visualize the first decision tree within an XGBoost model using the `plot_tree` function and the `graphviz` library. The resulting plot is saved as a JPEG image with adjustable resolution, allowing us to gain insights into the model's decision-making process.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nfrom xgboost import plot_tree\n\n# Get the booster from the classifier\nbooster = best_xgb_classifier.get_booster()\n\n# Set the size of the plot\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Plot the first tree (num_trees=0)\nxgb.plot_tree(booster, num_trees=0, ax=ax)\n\n# Increase the DPI for higher resolution (e.g., 600)\ndpi = 1000\n\n# Save the plot to an SVG file with specific DPI (resolution)\nplt.savefig('xgb_tree_plot.jpeg', format='jpeg', dpi=dpi)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VideoGameML_files/figure-html/cell-33-output-1.png){width=614 height=144}\n:::\n:::\n\n\n## Unsuccessful Models\n\nThe following models were tested, but they did not yield sufficient performance to be considered. These models are not recommended for further use, and attempting hyperparameter tuning is discouraged as it is unlikely to result in significant performance gains compared to Random Forest/GBM models.\n\n\n### SVM Model\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n# Create the SVM classifier\nsvm_classifier = SVC(probability = True)\n\n# Perform cross-validation and print out the average accuracy\ncv_scores_svm = cross_val_score(svm_classifier, X_train, y_train, cv=5)\nprint(\"SVM Cross-Validation Scores:\", cv_scores_svm)\nprint(\"Average SVM Accuracy:\", cv_scores_svm.mean())\n\n# Fit the SVM classifier to the training data\nsvm_classifier.fit(X_train, y_train, sample_weight=y_train_weights)\n\n# Use the trained SVM classifier for predictions\ny_pred_svm = svm_classifier.predict(X_test)\n\n# Make predictions with class probabilities\ny_pred_prob_svm = svm_classifier.predict_proba(X_test)\n\n# Calculate ROC AUC score\nroc_auc_svm = roc_auc_score(y_test, y_pred_prob_svm, multi_class='ovr')\nprint(f\"ROC AUC (SVM): {roc_auc_svm}\")\n\n# Calculate Kappa coefficient\nkappa_svm = cohen_kappa_score(y_test, y_pred_svm)\nprint(f\"Kappa (SVM): {kappa_svm}\")\n\n# Calculate accuracy\naccuracy_svm = accuracy_score(y_test, y_pred_svm)\nprint(f\"Accuracy (SVM): {accuracy_svm}\")\n\n# Calculate precision\nprecision_svm = precision_score(y_test, y_pred_svm, average='weighted')\nprint(f\"Precision (SVM): {precision_svm}\")\n\n# Calculate recall\nrecall_svm = recall_score(y_test, y_pred_svm, average='weighted')\nprint(f\"Recall (SVM): {recall_svm}\")\n\n# Calculate confusion matrix\nconfusion_svm = confusion_matrix(y_test, y_pred_svm)\nprint(\"Confusion Matrix (SVM):\")\nprint(confusion_svm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSVM Cross-Validation Scores: [0.49185668 0.44299674 0.47882736 0.53094463 0.46579805]\nAverage SVM Accuracy: 0.482084690553746\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nROC AUC (SVM): 0.7627570031230766\nKappa (SVM): 0.21787122207621545\nAccuracy (SVM): 0.3541666666666667\nPrecision (SVM): 0.30057773366956814\nRecall (SVM): 0.3541666666666667\nConfusion Matrix (SVM):\n[[16  7 11 15  0 11]\n [ 8 15 18  3  0 17]\n [10 13 26  9  0 12]\n [11  9  6 39  0  4]\n [ 5 11 16  5  0 17]\n [ 4  8 12  6  0 40]]\n```\n:::\n:::\n\n\n### Logistic Classifier\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n# Create the Logistic Regression classifier\nlogreg_classifier = LogisticRegression()\n\n# Perform cross-validation and print out the average accuracy\ncv_scores_logreg = cross_val_score(logreg_classifier, X_train, y_train, cv=5)\nprint(\"Logistic Regression Cross-Validation Scores:\", cv_scores_logreg)\nprint(\"Average Logistic Regression Accuracy:\", cv_scores_logreg.mean())\n\n# Fit the Logistic Regression classifier to the training data\nlogreg_classifier.fit(X_train, y_train, sample_weight=y_train_weights)\n\n# Use the trained Logistic Regression classifier for predictions\ny_pred_logreg = logreg_classifier.predict(X_test)\n\n# Make predictions with class probabilities\ny_pred_prob_logreg = logreg_classifier.predict_proba(X_test)\n\n# Calculate ROC AUC score\nroc_auc_logreg = roc_auc_score(y_test, y_pred_prob_logreg, multi_class='ovr')\nprint(f\"ROC AUC (Logistic Regression): {roc_auc_logreg}\")\n\n# Calculate Kappa coefficient\nkappa_logreg = cohen_kappa_score(y_test, y_pred_logreg)\nprint(f\"Kappa (Logistic Regression): {kappa_logreg}\")\n\n# Calculate accuracy\naccuracy_logreg = accuracy_score(y_test, y_pred_logreg)\nprint(f\"Accuracy (Logistic Regression): {accuracy_logreg}\")\n\n# Calculate precision\nprecision_logreg = precision_score(y_test, y_pred_logreg, average='weighted')\nprint(f\"Precision (Logistic Regression): {precision_logreg}\")\n\n# Calculate recall\nrecall_logreg = recall_score(y_test, y_pred_logreg, average='weighted')\nprint(f\"Recall (Logistic Regression): {recall_logreg}\")\n\n# Calculate confusion matrix\nconfusion_logreg = confusion_matrix(y_test, y_pred_logreg)\nprint(\"Confusion Matrix (Logistic Regression):\")\nprint(confusion_logreg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Cross-Validation Scores: [0.33876221 0.29967427 0.31921824 0.31270358 0.3485342 ]\nAverage Logistic Regression Accuracy: 0.32377850162866445\nROC AUC (Logistic Regression): 0.7112589244293529\nKappa (Logistic Regression): 0.219051367840976\nAccuracy (Logistic Regression): 0.3541666666666667\nPrecision (Logistic Regression): 0.3312785079858689\nRecall (Logistic Regression): 0.3541666666666667\nConfusion Matrix (Logistic Regression):\n[[10  6 16 13  5 10]\n [ 7 12 15 10  4 13]\n [10  4 27 13  3 13]\n [15  4  7 39  2  2]\n [ 7 13 13  3  6 12]\n [ 2  6 10  7  3 42]]\n```\n:::\n:::\n\n\n# Results\n\nThe analysis of the top 9 features provides valuable insights that game developers can use to understand why a game may succeed or fail in the market. Platform selection emerges as a critical factor, with \"Nintendo\" and \"Xbox\" standing out as influential features. Carefully considering which platforms to target can substantially impact a game's overall performance and sales, making it essential for developers to analyze market trends and audience preferences for different platforms.\n\nMoreover, the prominence of \"Novice Games\" and \"Mature Games\" highlights the importance of catering to the target audience's specific preferences and gaming experience levels. Understanding the demographic and gaming habits of the intended player base is essential in creating a game that resonates with them and increases their chances of success.\n\nBeyond audience considerations, the feature \"FromSoftware\" signifies the impact of the developer on a game's success. Developers should focus on building a strong reputation and delivering high-quality experiences to attract a dedicated fanbase. A developer's track record can significantly influence the perception of a new game and its potential success.\n\nIn addition to content and developer influence, game duration and strategic release timing play a crucial role. \"Long Playtime Games\" and \"Strong Winter Lineup\" indicate that game developers must carefully consider the appropriate length of their games and identify optimal launch periods to avoid competing with other major titles and leverage seasonal demand.\n\nThe presence of \"Multiplayer Games\" highlights the importance of incorporating engaging multiplayer features in games. Such experiences can significantly extend a game's lifespan and foster a sense of community among players, contributing to long-term success.\n\nFurthermore, the feature \"New Console Platforms\" suggests that launching games compatible with the latest gaming consoles can positively impact their performance. Staying up-to-date with technological advancements and ensuring compatibility with new platforms can attract a broader audience and increase the game's chances of success.\n\nBy considering these insights during game development, developers can increase their understanding of the market's demands and tailor their games to meet those requirements. Additionally, analyzing the performance of existing successful games and learning from previous successes can provide valuable lessons to apply in new projects. Conversely, studying the features that may have led to the failure of certain games can help developers avoid potential pitfalls and improve their chances of success.\n\nIn conclusion, a comprehensive understanding of these influential factors can guide game developers in making informed decisions throughout the development process, enhancing their games' overall quality, appeal, and marketability. By leveraging these insights, developers can maximize their game's potential for success and build stronger connections with their target audience.\n\n# Discussion\n\nDuring our research, we took rigorous measures to ensure the validity and accuracy of our model. The final model exhibited a kappa of over 0.85, signifying a nearly perfect agreement between predicted and actual data points. This indicates that the model explains the relationship far better than mere chance. \n\nMoreover, with accuracy, precision, and recall all around 0.87, the model demonstrated a low false positive and false negative rate, showcasing its robustness in correctly classifying data. Overall, the model effectively and accurately predicted the Metacritic outcome, presenting the promising potential for its application in a commercial setting. Utilizing this model during the research and development stage of game creation could significantly save time and resources for video game developers and studios.\n\nHowever, one of the primary constraints we encountered was the scarcity of developers' and publishers' data directly available from the RAWG API. The API's structure impeded our access to this vital information for individual games, limiting the scope of our study. With a complete dataset readily available, we could have expanded our study to include a more extensive collection of games, providing richer training data for forecasting Metacritic ratings representative of the overall video game population.\n\nDue to a deficiency of readily available clean data, we had to resort to an alternative approach, using information from Wikipedia pages to match developers’ and publishers’ data for each title. Extracting data from Wikipedia tables was a relatively straightforward process. However, this introduced inconsistencies in the names of developers and publishers. To address this issue, we condensed rarely occurring developers and publishers into an \"other\" category. This step, however, introduced a limitation to the accuracy of our predictive model concerning the estimation of other features.\n\nFurthermore, our analysis relied on reviewer ratings as the predicted variable, as confidential sales information for the games was unavailable. However, it is essential to acknowledge that developers and studios are often more concerned with a game's sales performance than its critical reception alone. Incorporating sales data into the analysis would create a more robust model, combining critical acclaim with actual sales figures.\n\nCurrently, our use of Metacritic reviews as a proxy variable for success may introduce limitations, especially if sales are the ultimate measure of success. There could be instances where a game receives high critical acclaim yet fails to attract significant sales compared to a lower-rated game. Our present model lacks the ability to understand the relationship between Metacritic scores and sales data, highlighting the need for future research to better comprehend how these factors are interconnected.\n\nBy delving deeper into and understanding the correlation between Metacritic ratings and sales, we could enhance our model's accuracy in predicting real commercial success. This would greatly benefit developers in making informed decisions, creating more successful and marketable games.\n\n\n# Further Study\n\nTo advance the understanding of the factors influencing game success and failure, several avenues for further study present promising opportunities. Firstly, incorporating sales data into the analysis would significantly enhance the predictive model's accuracy in gauging commercial success. Access to confidential sales information would enable researchers to unravel the intricate relationship between critical acclaim and actual sales performance, offering valuable insights for game developers and publishers seeking to optimize their strategies.\n\nSecondly, exploring additional features beyond the top 9 identified in this study could yield valuable insights. Factors like marketing budget, social media presence, and pre-release hype could be investigated to understand their impact on game performance. Analyzing these additional elements may provide a more comprehensive understanding of the intricate web of factors influencing game success.\n\nA third avenue of exploration could involve conducting a time-series analysis to track game performance over time. This approach could offer insights into how the significance of certain features evolves over different periods and how broader industry trends impact game performance.\nMoreover, genre-specific analyses could help unveil unique patterns and insights, considering games' significant variation across genres. Understanding the specific factors driving success within distinct genres could empower developers to tailor their strategies effectively.\n\nIncorporating user reviews and sentiment analysis, in addition to Metacritic reviews, might provide a more holistic view of player reception and satisfaction. Analyzing user feedback could reveal specific aspects of a game that resonate with players and contribute to its success.\nAnother fruitful area for further exploration involves considering the influence of cultural and regional factors on game success. Tailoring games to the preferences of specific regions could open new opportunities for developers in different markets.\n\nInvestigating the long-term impact of developer reputation on game success would be insightful. Analyzing the success trajectory of developers over multiple releases could shed light on their influence on a game's reception and performance.\n\nAdditionally, exploring advanced machine learning techniques and algorithms may improve the predictive model's accuracy and performance. Experimenting with different model architectures, feature engineering methods, and hyperparameter tuning could result in a more robust and accurate predictive model.\n\nBy pursuing these avenues of further study, researchers can gain deeper insights into the complex factors influencing game success and failure. Such insights can empower game developers and publishers to make informed decisions, creating more successful and marketable games. Additionally, a better understanding of these factors could contribute to the continuous growth and evolution of the video game industry as a whole.\n\n# References\n\nHarris, C. R., Millman, K. J., van der Walt, S. J., Gommers, R., Virtanen, P., Cournapeau, D., … Oliphant, T. E. (2020). Array programming with NumPy. Nature, 585(7825), 357-362. https://www.nature.com/articles/s41586-020-2649-2\n\nHunter, J. D. (2007). Matplotlib: A 2D Graphics Environment. Computing in Science & Engineering, 9(3), 90-95. https://ieeexplore.ieee.org/document/4160265\n\nFlynn, S. (2023). The importance of marketing in the gaming industry. Fansided. https://apptrigger.com/2023/03/12/marketing-gaming-industry/\n\nMcKinney, W. (2010). Data Structures for Statistical Computing in Python. Proceedings of the 9th Python in Science Conference, 445-451. https://conference.scipy.org/proceedings/scipy2010/mckinney.html\n\nPedregosa, F., Varoquaux, G., Gramfort, A., Michel, V., Thirion, B., Grisel, O., … Duchesnay, E. (2011). Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research, 12, 2825-2830. https://jmlr.csail.mit.edu/papers/v12/pedregosa11a.html\n\nRAWG. (n.d.). RAWG Video Games Database API. Retrieved June 15, 2023. https://rawg.io/apidocs\nRocket Brush (2022). How much does it cost to develop a game. Rocket Brush Studio. https://rocketbrush.com/blog/how-much-does-it-cost-to-develop-a-game\n\nRoom 8 (2020). Step-by-step process of game development pre-production phase. Room 8 Studio. https://room8studio.com/news/game-pre-production-core-steps/\n\nStefyn, N. (2022). How video games are made: the game development process. CGSpectrum. https://www.cgspectrum.com/blog/game-development-process\n\nWaskom, M., Botvinnik, O., Hobson, P., … Halchenko, Y. (2021). mwaskom/seaborn: v0.11.1 (February 2021). Zenodo. https://doi.org/10.5281/zenodo.4473861\n\nWikipedia contributors. (2023, July 3). In Wikipedia. Retrieved July 3, 2023. https://en.wikipedia.org/wiki/\n\n\nWikipedia. (n.d.). \"13 Sentinels: Aegis Rim\". Wikipedia. https://en.wikipedia.org/wiki/13_Sentinels:_Aegis_Rim\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"60 Seconds!\". Wikipedia. https://en.wikipedia.org/wiki/60_Seconds!\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"7 Billion Humans\". Wikipedia. https://en.wikipedia.org/wiki/7_Billion_Humans\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"8-Bit Armies\". Wikipedia. https://en.wikipedia.org/wiki/8-Bit_Armies\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"A Plague Tale: Innocence\". Wikipedia. https://en.wikipedia.org/wiki/A_Plague_Tale:_Innocence\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"A Plague Tale: Requiem\". Wikipedia. https://en.wikipedia.org/wiki/A_Plague_Tale:_Requiem\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"A Story About My Uncle\". Wikipedia. https://en.wikipedia.org/wiki/A_Story_About_My_Uncle\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Absolver\". Wikipedia. https://en.wikipedia.org/wiki/Absolver\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Abyss Odyssey\". Wikipedia. https://en.wikipedia.org/wiki/Abyss_Odyssey\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ace Combat 7: Skies Unknown\". Wikipedia. https://en.wikipedia.org/wiki/Ace_Combat_7:_Skies_Unknown\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Adventure Time: Pirates Of The Enchiridion\". Wikipedia. https://en.wikipedia.org/wiki/Adventure_Time:_Pirates_Of_The_Enchiridion\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Aegis Defenders\". Wikipedia. https://en.wikipedia.org/wiki/Aegis_Defenders\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Age Of Empires Iv\". Wikipedia. https://en.wikipedia.org/wiki/Age_Of_Empires_Iv\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Age Of Empires: Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Age_Of_Empires:_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Age Of Wonders: Planetfall\". Wikipedia. https://en.wikipedia.org/wiki/Age_Of_Wonders:_Planetfall\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Agents Of Mayhem\". Wikipedia. https://en.wikipedia.org/wiki/Agents_Of_Mayhem\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Alan Wake Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Alan_Wake_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Albion Online\". Wikipedia. https://en.wikipedia.org/wiki/Albion_Online\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Alien: Isolation\". Wikipedia. https://en.wikipedia.org/wiki/Alien:_Isolation\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Aliens: Colonial Marines\". Wikipedia. https://en.wikipedia.org/wiki/Aliens:_Colonial_Marines\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"American Fugitive\". Wikipedia. https://en.wikipedia.org/wiki/American_Fugitive\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Amnesia: Rebirth\". Wikipedia. https://en.wikipedia.org/wiki/Amnesia:_Rebirth\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Among The Sleep\". Wikipedia. https://en.wikipedia.org/wiki/Among_The_Sleep\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Among Us\". Wikipedia. https://en.wikipedia.org/wiki/Among_Us\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Animal Crossing: New Horizons\". Wikipedia. https://en.wikipedia.org/wiki/Animal_Crossing:_New_Horizons\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Animal Crossing: Pocket Camp\". Wikipedia. https://en.wikipedia.org/wiki/Animal_Crossing:_Pocket_Camp\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Anna'S Quest\". Wikipedia. https://en.wikipedia.org/wiki/Anna'S_Quest\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Anno 1800\". Wikipedia. https://en.wikipedia.org/wiki/Anno_1800\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Apex Legends\". Wikipedia. https://en.wikipedia.org/wiki/Apex_Legends\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Apotheon\". Wikipedia. https://en.wikipedia.org/wiki/Apotheon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Aragami 2\". Wikipedia. https://en.wikipedia.org/wiki/Aragami_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Arizona Sunshine\". Wikipedia. https://en.wikipedia.org/wiki/Arizona_Sunshine\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Arma 3\". Wikipedia. https://en.wikipedia.org/wiki/Arma_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Armello\". Wikipedia. https://en.wikipedia.org/wiki/Armello\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"As Dusk Falls\". Wikipedia. https://en.wikipedia.org/wiki/As_Dusk_Falls\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin'S Creed Freedom Cry\". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Freedom_Cry\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin'S Creed Iii: Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Iii:_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin'S Creed Odyssey\". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Odyssey\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin'S Creed Origins\". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Origins\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin'S Creed Syndicate\". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Syndicate\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin'S Creed Unity\". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Unity\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin'S Creed Valhalla\". Wikipedia. https://en.wikipedia.org/wiki/Assassin'S_Creed_Valhalla\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assassin’S Creed Iv: Black Flag\". Wikipedia. https://en.wikipedia.org/wiki/Assassin’S_Creed_Iv:_Black_Flag\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assault Android Cactus\". Wikipedia. https://en.wikipedia.org/wiki/Assault_Android_Cactus\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Assetto Corsa Competizione\". Wikipedia. https://en.wikipedia.org/wiki/Assetto_Corsa_Competizione\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Astral Chain\". Wikipedia. https://en.wikipedia.org/wiki/Astral_Chain\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Astro Bot Rescue Mission\". Wikipedia. https://en.wikipedia.org/wiki/Astro_Bot_Rescue_Mission\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Astro'S Playroom\". Wikipedia. https://en.wikipedia.org/wiki/Astro'S_Playroom\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Astroneer\". Wikipedia. https://en.wikipedia.org/wiki/Astroneer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Atelier Ryza 2: Lost Legends & The Secret Fairy\". Wikipedia. https://en.wikipedia.org/wiki/Atelier_Ryza_2:_Lost_Legends_&_The_Secret_Fairy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Atelier Ryza: Ever Darkness & The Secret Hideout\". Wikipedia. https://en.wikipedia.org/wiki/Atelier_Ryza:_Ever_Darkness_&_The_Secret_Hideout\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Atomic Heart\". Wikipedia. https://en.wikipedia.org/wiki/Atomic_Heart\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Axiom Verge\". Wikipedia. https://en.wikipedia.org/wiki/Axiom_Verge\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Back 4 Blood\". Wikipedia. https://en.wikipedia.org/wiki/Back_4_Blood\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Baldur'S Gate Ii: Enhanced Edition\". Wikipedia. https://en.wikipedia.org/wiki/Baldur'S_Gate_Ii:_Enhanced_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Batman: Arkham Knight\". Wikipedia. https://en.wikipedia.org/wiki/Batman:_Arkham_Knight\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Batman: Arkham Origins\". Wikipedia. https://en.wikipedia.org/wiki/Batman:_Arkham_Origins\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Battle Chef Brigade\". Wikipedia. https://en.wikipedia.org/wiki/Battle_Chef_Brigade\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Battleblock Theater\". Wikipedia. https://en.wikipedia.org/wiki/Battleblock_Theater\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Battlefield 2042\". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_2042\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Battlefield 3: End Game\". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_3:_End_Game\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Battlefield 4\". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Battlefield Hardline\". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_Hardline\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Battlefield V\". Wikipedia. https://en.wikipedia.org/wiki/Battlefield_V\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bayonetta 2\". Wikipedia. https://en.wikipedia.org/wiki/Bayonetta_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Beat Saber\". Wikipedia. https://en.wikipedia.org/wiki/Beat_Saber\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Beautiful Desolation\". Wikipedia. https://en.wikipedia.org/wiki/Beautiful_Desolation\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Beyond: Two Souls\". Wikipedia. https://en.wikipedia.org/wiki/Beyond:_Two_Souls\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Biomutant\". Wikipedia. https://en.wikipedia.org/wiki/Biomutant\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bioshock Infinite\". Wikipedia. https://en.wikipedia.org/wiki/Bioshock_Infinite\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Birthdays The Beginning\". Wikipedia. https://en.wikipedia.org/wiki/Birthdays_The_Beginning\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Black Desert Online\". Wikipedia. https://en.wikipedia.org/wiki/Black_Desert_Online\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Blacksad: Under The Skin\". Wikipedia. https://en.wikipedia.org/wiki/Blacksad:_Under_The_Skin\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Blood & Truth\". Wikipedia. https://en.wikipedia.org/wiki/Blood_&_Truth\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Blood Bowl 2\". Wikipedia. https://en.wikipedia.org/wiki/Blood_Bowl_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Blood: Fresh Supply\". Wikipedia. https://en.wikipedia.org/wiki/Blood:_Fresh_Supply\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bloodborne\". Wikipedia. https://en.wikipedia.org/wiki/Bloodborne\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bloodstained: Curse Of The Moon\". Wikipedia. https://en.wikipedia.org/wiki/Bloodstained:_Curse_Of_The_Moon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bloodstained: Ritual Of The Night\". Wikipedia. https://en.wikipedia.org/wiki/Bloodstained:_Ritual_Of_The_Night\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bomber Crew\". Wikipedia. https://en.wikipedia.org/wiki/Bomber_Crew\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Book Of Demons\". Wikipedia. https://en.wikipedia.org/wiki/Book_Of_Demons\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Borderlands 3\". Wikipedia. https://en.wikipedia.org/wiki/Borderlands_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Boyfriend Dungeon\". Wikipedia. https://en.wikipedia.org/wiki/Boyfriend_Dungeon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Breach & Clear\". Wikipedia. https://en.wikipedia.org/wiki/Breach_&_Clear\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Breathedge\". Wikipedia. https://en.wikipedia.org/wiki/Breathedge\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bridge Constructor Portal\". Wikipedia. https://en.wikipedia.org/wiki/Bridge_Constructor_Portal\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bright Memory\". Wikipedia. https://en.wikipedia.org/wiki/Bright_Memory\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Brothers: A Tale Of Two Sons\". Wikipedia. https://en.wikipedia.org/wiki/Brothers:_A_Tale_Of_Two_Sons\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bugsnax\". Wikipedia. https://en.wikipedia.org/wiki/Bugsnax\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Bulletstorm: Full Clip Edition\". Wikipedia. https://en.wikipedia.org/wiki/Bulletstorm:_Full_Clip_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cadence Of Hyrule\". Wikipedia. https://en.wikipedia.org/wiki/Cadence_Of_Hyrule\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Advanced Warfare\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Advanced_Warfare\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Black Ops 4\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Black_Ops_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Black Ops Iii\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Black_Ops_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Ghosts\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Ghosts\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Infinite Warfare\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Infinite_Warfare\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Mobile\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Mobile\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Modern Warfare 2 Campaign Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Modern_Warfare_2_Campaign_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Modern Warfare Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Modern_Warfare_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Call Of Duty: Warzone\". Wikipedia. https://en.wikipedia.org/wiki/Call_Of_Duty:_Warzone\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Calvino Noir\". Wikipedia. https://en.wikipedia.org/wiki/Calvino_Noir\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Capcom Arcade Stadium\". Wikipedia. https://en.wikipedia.org/wiki/Capcom_Arcade_Stadium\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Captain Tsubasa: Rise Of New Champions\". Wikipedia. https://en.wikipedia.org/wiki/Captain_Tsubasa:_Rise_Of_New_Champions\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Car Mechanic Simulator\". Wikipedia. https://en.wikipedia.org/wiki/Car_Mechanic_Simulator\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Card Shark\". Wikipedia. https://en.wikipedia.org/wiki/Card_Shark\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Carmageddon: Max Damage\". Wikipedia. https://en.wikipedia.org/wiki/Carmageddon:_Max_Damage\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Castlevania: Lords Of Shadow - Mirror Of Fate\". Wikipedia. https://en.wikipedia.org/wiki/Castlevania:_Lords_Of_Shadow_-_Mirror_Of_Fate\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Castlevania: Lords Of Shadow 2\". Wikipedia. https://en.wikipedia.org/wiki/Castlevania:_Lords_Of_Shadow_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cat Quest\". Wikipedia. https://en.wikipedia.org/wiki/Cat_Quest\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cat Quest Ii\". Wikipedia. https://en.wikipedia.org/wiki/Cat_Quest_Ii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Catherine: Full Body\". Wikipedia. https://en.wikipedia.org/wiki/Catherine:_Full_Body\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Chicory: A Colorful Tale\". Wikipedia. https://en.wikipedia.org/wiki/Chicory:_A_Colorful_Tale\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Child Of Light\". Wikipedia. https://en.wikipedia.org/wiki/Child_Of_Light\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Children Of Morta\". Wikipedia. https://en.wikipedia.org/wiki/Children_Of_Morta\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Chivalry 2\". Wikipedia. https://en.wikipedia.org/wiki/Chivalry_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Chroma Squad\". Wikipedia. https://en.wikipedia.org/wiki/Chroma_Squad\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Chuchel\". Wikipedia. https://en.wikipedia.org/wiki/Chuchel\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cities: Skylines\". Wikipedia. https://en.wikipedia.org/wiki/Cities:_Skylines\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Citizen Sleeper\". Wikipedia. https://en.wikipedia.org/wiki/Citizen_Sleeper\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Citizens Of Earth\". Wikipedia. https://en.wikipedia.org/wiki/Citizens_Of_Earth\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Clash Royale\". Wikipedia. https://en.wikipedia.org/wiki/Clash_Royale\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Command & Conquer Remastered Collection\". Wikipedia. https://en.wikipedia.org/wiki/Command_&_Conquer_Remastered_Collection\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Company Of Heroes 2\". Wikipedia. https://en.wikipedia.org/wiki/Company_Of_Heroes_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Conan Exiles\". Wikipedia. https://en.wikipedia.org/wiki/Conan_Exiles\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Concrete Genie\". Wikipedia. https://en.wikipedia.org/wiki/Concrete_Genie\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cosmic Star Heroine\". Wikipedia. https://en.wikipedia.org/wiki/Cosmic_Star_Heroine\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cossacks 3\". Wikipedia. https://en.wikipedia.org/wiki/Cossacks_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Costume Quest 2\". Wikipedia. https://en.wikipedia.org/wiki/Costume_Quest_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crackdown 3\". Wikipedia. https://en.wikipedia.org/wiki/Crackdown_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crash Bandicoot 4: It’S About Time\". Wikipedia. https://en.wikipedia.org/wiki/Crash_Bandicoot_4:_It’S_About_Time\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crash Bandicoot N. Sane Trilogy\". Wikipedia. https://en.wikipedia.org/wiki/Crash_Bandicoot_N._Sane_Trilogy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Creaks\". Wikipedia. https://en.wikipedia.org/wiki/Creaks\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cris Tales\". Wikipedia. https://en.wikipedia.org/wiki/Cris_Tales\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crisis Core: Final Fantasy Vii Reunion\". Wikipedia. https://en.wikipedia.org/wiki/Crisis_Core:_Final_Fantasy_Vii_Reunion\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crossing Souls\". Wikipedia. https://en.wikipedia.org/wiki/Crossing_Souls\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crossout\". Wikipedia. https://en.wikipedia.org/wiki/Crossout\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crypt Of The Necrodancer\". Wikipedia. https://en.wikipedia.org/wiki/Crypt_Of_The_Necrodancer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cryptark\". Wikipedia. https://en.wikipedia.org/wiki/Cryptark\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crysis 3\". Wikipedia. https://en.wikipedia.org/wiki/Crysis_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Crysis Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Crysis_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cultist Simulator\". Wikipedia. https://en.wikipedia.org/wiki/Cultist_Simulator\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Cyberpunk 2077\". Wikipedia. https://en.wikipedia.org/wiki/Cyberpunk_2077\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"D4: Dark Dreams Don'T Die\". Wikipedia. https://en.wikipedia.org/wiki/D4:_Dark_Dreams_Don'T_Die\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Danganronpa Another Episode: Ultra Despair Girls\". Wikipedia. https://en.wikipedia.org/wiki/Danganronpa_Another_Episode:_Ultra_Despair_Girls\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dark Souls Ii\". Wikipedia. https://en.wikipedia.org/wiki/Dark_Souls_Ii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dark Souls Ii: Scholar Of The First Sin\". Wikipedia. https://en.wikipedia.org/wiki/Dark_Souls_Ii:_Scholar_Of_The_First_Sin\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dark Souls Iii\". Wikipedia. https://en.wikipedia.org/wiki/Dark_Souls_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Darkest Dungeon\". Wikipedia. https://en.wikipedia.org/wiki/Darkest_Dungeon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Darksiders Iii\". Wikipedia. https://en.wikipedia.org/wiki/Darksiders_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Darkwood\". Wikipedia. https://en.wikipedia.org/wiki/Darkwood\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Day Of The Tentacle Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Day_Of_The_Tentacle_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Daymare: 1998\". Wikipedia. https://en.wikipedia.org/wiki/Daymare:_1998\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Days Gone\". Wikipedia. https://en.wikipedia.org/wiki/Days_Gone\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Cells\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Cells\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Effect\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Effect\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Island 2\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Island_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Island Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Island_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Island Riptide\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Island_Riptide\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Rising 3\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Rising_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Rising 4\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Rising_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dead Space 3\". Wikipedia. https://en.wikipedia.org/wiki/Dead_Space_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Deadfall Adventures\". Wikipedia. https://en.wikipedia.org/wiki/Deadfall_Adventures\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Death Stranding\". Wikipedia. https://en.wikipedia.org/wiki/Death_Stranding\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Death Stranding Director'S Cut\". Wikipedia. https://en.wikipedia.org/wiki/Death_Stranding_Director'S_Cut\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Deathloop\". Wikipedia. https://en.wikipedia.org/wiki/Deathloop\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Deep Rock Galactic\". Wikipedia. https://en.wikipedia.org/wiki/Deep_Rock_Galactic\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Defense Grid 2\". Wikipedia. https://en.wikipedia.org/wiki/Defense_Grid_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Deliver Us The Moon\". Wikipedia. https://en.wikipedia.org/wiki/Deliver_Us_The_Moon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Democracy 3\". Wikipedia. https://en.wikipedia.org/wiki/Democracy_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Demon'S Souls\". Wikipedia. https://en.wikipedia.org/wiki/Demon'S_Souls\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Deponia Doomsday\". Wikipedia. https://en.wikipedia.org/wiki/Deponia_Doomsday\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Descenders\". Wikipedia. https://en.wikipedia.org/wiki/Descenders\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Desperados Iii\". Wikipedia. https://en.wikipedia.org/wiki/Desperados_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Destiny 2\". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Destiny 2: Beyond Light\". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2:_Beyond_Light\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Destiny 2: Curse Of Osiris\". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2:_Curse_Of_Osiris\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Destiny 2: Forsaken\". Wikipedia. https://en.wikipedia.org/wiki/Destiny_2:_Forsaken\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Destiny: House Of Wolves\". Wikipedia. https://en.wikipedia.org/wiki/Destiny:_House_Of_Wolves\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Destiny: Rise Of Iron\". Wikipedia. https://en.wikipedia.org/wiki/Destiny:_Rise_Of_Iron\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Detroit: Become Human\". Wikipedia. https://en.wikipedia.org/wiki/Detroit:_Become_Human\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Deus Ex: Human Revolution - Director'S Cut\". Wikipedia. https://en.wikipedia.org/wiki/Deus_Ex:_Human_Revolution_-_Director'S_Cut\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Deus Ex: Mankind Divided\". Wikipedia. https://en.wikipedia.org/wiki/Deus_Ex:_Mankind_Divided\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Devil May Cry 5\". Wikipedia. https://en.wikipedia.org/wiki/Devil_May_Cry_5\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Devilian\". Wikipedia. https://en.wikipedia.org/wiki/Devilian\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Diablo Ii: Resurrected\". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Ii:_Resurrected\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Diablo Iii: Eternal Collection\". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Iii:_Eternal_Collection\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Diablo Iii: Reaper Of Souls\". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Iii:_Reaper_Of_Souls\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Diablo Iv\". Wikipedia. https://en.wikipedia.org/wiki/Diablo_Iv\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dicey Dungeons\". Wikipedia. https://en.wikipedia.org/wiki/Dicey_Dungeons\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Digimon Story Cyber Sleuth\". Wikipedia. https://en.wikipedia.org/wiki/Digimon_Story_Cyber_Sleuth\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Disco Elysium\". Wikipedia. https://en.wikipedia.org/wiki/Disco_Elysium\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Disgaea 5: Alliance Of Vengeance\". Wikipedia. https://en.wikipedia.org/wiki/Disgaea_5:_Alliance_Of_Vengeance\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dishonored 2\". Wikipedia. https://en.wikipedia.org/wiki/Dishonored_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dishonored: Death Of The Outsider\". Wikipedia. https://en.wikipedia.org/wiki/Dishonored:_Death_Of_The_Outsider\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Disneyland Adventures\". Wikipedia. https://en.wikipedia.org/wiki/Disneyland_Adventures\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Divekick\". Wikipedia. https://en.wikipedia.org/wiki/Divekick\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Divinity: Dragon Commander\". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Dragon_Commander\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Divinity: Original Sin\". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Divinity: Original Sin - Enhanced Edition\". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin_-_Enhanced_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Divinity: Original Sin 2\". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Divinity: Original Sin 2 - Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Divinity:_Original_Sin_2_-_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Doki Doki Literature Club Plus!\". Wikipedia. https://en.wikipedia.org/wiki/Doki_Doki_Literature_Club_Plus!\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Doom 3\". Wikipedia. https://en.wikipedia.org/wiki/Doom_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Doom Eternal\". Wikipedia. https://en.wikipedia.org/wiki/Doom_Eternal\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Door Kickers\". Wikipedia. https://en.wikipedia.org/wiki/Door_Kickers\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon Age: Inquisition\". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Age:_Inquisition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon Ball Xenoverse\". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Ball_Xenoverse\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon Ball Xenoverse 2\". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Ball_Xenoverse_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon Ball Z: Kakarot\". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Ball_Z:_Kakarot\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon Quest Builders\". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Quest_Builders\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon Quest Builders 2\". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Quest_Builders_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon Quest Heroes Ii\". Wikipedia. https://en.wikipedia.org/wiki/Dragon_Quest_Heroes_Ii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dragon'S Dogma: Dark Arisen\". Wikipedia. https://en.wikipedia.org/wiki/Dragon'S_Dogma:_Dark_Arisen\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Drakengard 3\". Wikipedia. https://en.wikipedia.org/wiki/Drakengard_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dreadout\". Wikipedia. https://en.wikipedia.org/wiki/Dreadout\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dream Daddy: A Dad Dating Simulator\". Wikipedia. https://en.wikipedia.org/wiki/Dream_Daddy:_A_Dad_Dating_Simulator\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dreamfall Chapters\". Wikipedia. https://en.wikipedia.org/wiki/Dreamfall_Chapters\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dungeon Of The Endless\". Wikipedia. https://en.wikipedia.org/wiki/Dungeon_Of_The_Endless\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dungeon Souls\". Wikipedia. https://en.wikipedia.org/wiki/Dungeon_Souls\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dungeons & Dragons: Dark Alliance\". Wikipedia. https://en.wikipedia.org/wiki/Dungeons_&_Dragons:_Dark_Alliance\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dungeons 2\". Wikipedia. https://en.wikipedia.org/wiki/Dungeons_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dungeons 3\". Wikipedia. https://en.wikipedia.org/wiki/Dungeons_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dust 514\". Wikipedia. https://en.wikipedia.org/wiki/Dust_514\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dying Light\". Wikipedia. https://en.wikipedia.org/wiki/Dying_Light\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Dynasty Warriors 9\". Wikipedia. https://en.wikipedia.org/wiki/Dynasty_Warriors_9\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Eador. Masters Of The Broken World\". Wikipedia. https://en.wikipedia.org/wiki/Eador._Masters_Of_The_Broken_World\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Eagle Flight\". Wikipedia. https://en.wikipedia.org/wiki/Eagle_Flight\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Earth Defense Force: Iron Rain\". Wikipedia. https://en.wikipedia.org/wiki/Earth_Defense_Force:_Iron_Rain\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Elden Ring\". Wikipedia. https://en.wikipedia.org/wiki/Elden_Ring\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Electronic Super Joy\". Wikipedia. https://en.wikipedia.org/wiki/Electronic_Super_Joy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Elex\". Wikipedia. https://en.wikipedia.org/wiki/Elex\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Elite Dangerous\". Wikipedia. https://en.wikipedia.org/wiki/Elite_Dangerous\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Enter The Gungeon\". Wikipedia. https://en.wikipedia.org/wiki/Enter_The_Gungeon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ether One\". Wikipedia. https://en.wikipedia.org/wiki/Ether_One\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Everspace\". Wikipedia. https://en.wikipedia.org/wiki/Everspace\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Evil West\". Wikipedia. https://en.wikipedia.org/wiki/Evil_West\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Evoland 2\". Wikipedia. https://en.wikipedia.org/wiki/Evoland_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Evoland Legendary Edition\". Wikipedia. https://en.wikipedia.org/wiki/Evoland_Legendary_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Evolve Stage 2\". Wikipedia. https://en.wikipedia.org/wiki/Evolve_Stage_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"F1 Manager 2022\". Wikipedia. https://en.wikipedia.org/wiki/F1_Manager_2022\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fable Anniversary\". Wikipedia. https://en.wikipedia.org/wiki/Fable_Anniversary\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Faeria\". Wikipedia. https://en.wikipedia.org/wiki/Faeria\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fahrenheit: Indigo Prophecy Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Fahrenheit:_Indigo_Prophecy_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fall Guys: Ultimate Knockout\". Wikipedia. https://en.wikipedia.org/wiki/Fall_Guys:_Ultimate_Knockout\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fallout 4\". Wikipedia. https://en.wikipedia.org/wiki/Fallout_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fallout 4 - Far Harbor\". Wikipedia. https://en.wikipedia.org/wiki/Fallout_4_-_Far_Harbor\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fallout 76\". Wikipedia. https://en.wikipedia.org/wiki/Fallout_76\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fallout Shelter\". Wikipedia. https://en.wikipedia.org/wiki/Fallout_Shelter\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Far Cry 3: Blood Dragon\". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_3:_Blood_Dragon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Far Cry 4\". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Far Cry 5\". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_5\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Far Cry New Dawn\". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_New_Dawn\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Far Cry Primal\". Wikipedia. https://en.wikipedia.org/wiki/Far_Cry_Primal\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fat Princess Adventures\". Wikipedia. https://en.wikipedia.org/wiki/Fat_Princess_Adventures\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fifa 22\". Wikipedia. https://en.wikipedia.org/wiki/Fifa_22\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Final Fantasy Vii\". Wikipedia. https://en.wikipedia.org/wiki/Final_Fantasy_Vii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Final Fantasy Vii Remake Intergrade\". Wikipedia. https://en.wikipedia.org/wiki/Final_Fantasy_Vii_Remake_Intergrade\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Final Fantasy Viii Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Final_Fantasy_Viii_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fire Emblem Echoes: Shadows Of Valentia\". Wikipedia. https://en.wikipedia.org/wiki/Fire_Emblem_Echoes:_Shadows_Of_Valentia\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fire Emblem Fates: Birthright\". Wikipedia. https://en.wikipedia.org/wiki/Fire_Emblem_Fates:_Birthright\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fire Emblem: Three Houses\". Wikipedia. https://en.wikipedia.org/wiki/Fire_Emblem:_Three_Houses\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fire Pro Wrestling World\". Wikipedia. https://en.wikipedia.org/wiki/Fire_Pro_Wrestling_World\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Firewatch\". Wikipedia. https://en.wikipedia.org/wiki/Firewatch\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Football Manager 2020\". Wikipedia. https://en.wikipedia.org/wiki/Football_Manager_2020\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Football Manager 2021\". Wikipedia. https://en.wikipedia.org/wiki/Football_Manager_2021\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"For Honor\". Wikipedia. https://en.wikipedia.org/wiki/For_Honor\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"For The King\". Wikipedia. https://en.wikipedia.org/wiki/For_The_King\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Forgotton Anne\". Wikipedia. https://en.wikipedia.org/wiki/Forgotton_Anne\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Forspoken\". Wikipedia. https://en.wikipedia.org/wiki/Forspoken\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Fortnite Battle Royale\". Wikipedia. https://en.wikipedia.org/wiki/Fortnite_Battle_Royale\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Forza Motorsport 5\". Wikipedia. https://en.wikipedia.org/wiki/Forza_Motorsport_5\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Freedom Planet\". Wikipedia. https://en.wikipedia.org/wiki/Freedom_Planet\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Freedom Wars\". Wikipedia. https://en.wikipedia.org/wiki/Freedom_Wars\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Frostpunk\". Wikipedia. https://en.wikipedia.org/wiki/Frostpunk\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Full Throttle Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Full_Throttle_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Furi\". Wikipedia. https://en.wikipedia.org/wiki/Furi\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Game Of Thrones - A Telltale Games Series\". Wikipedia. https://en.wikipedia.org/wiki/Game_Of_Thrones_-_A_Telltale_Games_Series\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gears 5: Hivebusters\". Wikipedia. https://en.wikipedia.org/wiki/Gears_5:_Hivebusters\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gears Of War 4\". Wikipedia. https://en.wikipedia.org/wiki/Gears_Of_War_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gears Of War: Judgment\". Wikipedia. https://en.wikipedia.org/wiki/Gears_Of_War:_Judgment\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gears Of War: Ultimate Edition\". Wikipedia. https://en.wikipedia.org/wiki/Gears_Of_War:_Ultimate_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gears Tactics\". Wikipedia. https://en.wikipedia.org/wiki/Gears_Tactics\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Genkai Tokki: Moero Chronicle\". Wikipedia. https://en.wikipedia.org/wiki/Genkai_Tokki:_Moero_Chronicle\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Genshin Impact\". Wikipedia. https://en.wikipedia.org/wiki/Genshin_Impact\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ghost Of Tsushima\". Wikipedia. https://en.wikipedia.org/wiki/Ghost_Of_Tsushima\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ghost Of Tsushima Director'S Cut\". Wikipedia. https://en.wikipedia.org/wiki/Ghost_Of_Tsushima_Director'S_Cut\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ghostrunner\". Wikipedia. https://en.wikipedia.org/wiki/Ghostrunner\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ghostwire: Tokyo\". Wikipedia. https://en.wikipedia.org/wiki/Ghostwire:_Tokyo\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"God Eater 2: Rage Burst\". Wikipedia. https://en.wikipedia.org/wiki/God_Eater_2:_Rage_Burst\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"God Eater Resurrection\". Wikipedia. https://en.wikipedia.org/wiki/God_Eater_Resurrection\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"God Of War Iii Remastered\". Wikipedia. https://en.wikipedia.org/wiki/God_Of_War_Iii_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"God Of War: Ascension\". Wikipedia. https://en.wikipedia.org/wiki/God_Of_War:_Ascension\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"God Of War: Ragnarök\". Wikipedia. https://en.wikipedia.org/wiki/God_Of_War:_Ragnarök\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gone Home\". Wikipedia. https://en.wikipedia.org/wiki/Gone_Home\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gonner\". Wikipedia. https://en.wikipedia.org/wiki/Gonner\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Goodbye Deponia\". Wikipedia. https://en.wikipedia.org/wiki/Goodbye_Deponia\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Grand Kingdom\". Wikipedia. https://en.wikipedia.org/wiki/Grand_Kingdom\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Grand Theft Auto Online\". Wikipedia. https://en.wikipedia.org/wiki/Grand_Theft_Auto_Online\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Grand Theft Auto V\". Wikipedia. https://en.wikipedia.org/wiki/Grand_Theft_Auto_V\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Graveyard Keeper\". Wikipedia. https://en.wikipedia.org/wiki/Graveyard_Keeper\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gravity Rush 2\". Wikipedia. https://en.wikipedia.org/wiki/Gravity_Rush_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gravity Rush Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Gravity_Rush_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Greedfall\". Wikipedia. https://en.wikipedia.org/wiki/Greedfall\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Griftlands\". Wikipedia. https://en.wikipedia.org/wiki/Griftlands\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Grim Fandango Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Grim_Fandango_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Grip: Combat Racing\". Wikipedia. https://en.wikipedia.org/wiki/Grip:_Combat_Racing\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Gris\". Wikipedia. https://en.wikipedia.org/wiki/Gris\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Guacamelee!\". Wikipedia. https://en.wikipedia.org/wiki/Guacamelee!\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Guacamelee! 2\". Wikipedia. https://en.wikipedia.org/wiki/Guacamelee!_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Guacamelee! Super Turbo Championship Edition\". Wikipedia. https://en.wikipedia.org/wiki/Guacamelee!_Super_Turbo_Championship_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hacknet\". Wikipedia. https://en.wikipedia.org/wiki/Hacknet\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Halcyon 6: Starbase Commander\". Wikipedia. https://en.wikipedia.org/wiki/Halcyon_6:_Starbase_Commander\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Halo 5: Guardians\". Wikipedia. https://en.wikipedia.org/wiki/Halo_5:_Guardians\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Halo Infinite\". Wikipedia. https://en.wikipedia.org/wiki/Halo_Infinite\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Halo Wars 2\". Wikipedia. https://en.wikipedia.org/wiki/Halo_Wars_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hard West\". Wikipedia. https://en.wikipedia.org/wiki/Hard_West\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hatoful Boyfriend\". Wikipedia. https://en.wikipedia.org/wiki/Hatoful_Boyfriend\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hatoful Boyfriend: Holiday Star\". Wikipedia. https://en.wikipedia.org/wiki/Hatoful_Boyfriend:_Holiday_Star\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hearthstone\". Wikipedia. https://en.wikipedia.org/wiki/Hearthstone\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hellblade: Senua'S Sacrifice\". Wikipedia. https://en.wikipedia.org/wiki/Hellblade:_Senua'S_Sacrifice\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Helldivers\". Wikipedia. https://en.wikipedia.org/wiki/Helldivers\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hello Neighbor\". Wikipedia. https://en.wikipedia.org/wiki/Hello_Neighbor\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Heroes Of The Storm\". Wikipedia. https://en.wikipedia.org/wiki/Heroes_Of_The_Storm\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hitman Go: Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Hitman_Go:_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hogwarts Legacy\". Wikipedia. https://en.wikipedia.org/wiki/Hogwarts_Legacy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hohokum\". Wikipedia. https://en.wikipedia.org/wiki/Hohokum\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hokko Life\". Wikipedia. https://en.wikipedia.org/wiki/Hokko_Life\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hollow Knight\". Wikipedia. https://en.wikipedia.org/wiki/Hollow_Knight\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Homeworld Remastered Collection\". Wikipedia. https://en.wikipedia.org/wiki/Homeworld_Remastered_Collection\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Horizon Forbidden West\". Wikipedia. https://en.wikipedia.org/wiki/Horizon_Forbidden_West\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Horizon Zero Dawn\". Wikipedia. https://en.wikipedia.org/wiki/Horizon_Zero_Dawn\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hot Shots Golf\". Wikipedia. https://en.wikipedia.org/wiki/Hot_Shots_Golf\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hotline Miami 2: Wrong Number\". Wikipedia. https://en.wikipedia.org/wiki/Hotline_Miami_2:_Wrong_Number\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"House Flipper\". Wikipedia. https://en.wikipedia.org/wiki/House_Flipper\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Human Resource Machine\". Wikipedia. https://en.wikipedia.org/wiki/Human_Resource_Machine\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Human: Fall Flat\". Wikipedia. https://en.wikipedia.org/wiki/Human:_Fall_Flat\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hunt: Showdown\". Wikipedia. https://en.wikipedia.org/wiki/Hunt:_Showdown\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Hyper Scape\". Wikipedia. https://en.wikipedia.org/wiki/Hyper_Scape\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"I Am Bread\". Wikipedia. https://en.wikipedia.org/wiki/I_Am_Bread\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"I Am Setsuna\". Wikipedia. https://en.wikipedia.org/wiki/I_Am_Setsuna\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"If Found...\". Wikipedia. https://en.wikipedia.org/wiki/If_Found...\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Immortal: Unchained\". Wikipedia. https://en.wikipedia.org/wiki/Immortal:_Unchained\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Infamous First Light\". Wikipedia. https://en.wikipedia.org/wiki/Infamous_First_Light\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Infamous Second Son\". Wikipedia. https://en.wikipedia.org/wiki/Infamous_Second_Son\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Infernax\". Wikipedia. https://en.wikipedia.org/wiki/Infernax\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Infested Planet\". Wikipedia. https://en.wikipedia.org/wiki/Infested_Planet\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Injustice: Gods Among Us Ultimate Edition\". Wikipedia. https://en.wikipedia.org/wiki/Injustice:_Gods_Among_Us_Ultimate_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Into The Breach\". Wikipedia. https://en.wikipedia.org/wiki/Into_The_Breach\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ironcast\". Wikipedia. https://en.wikipedia.org/wiki/Ironcast\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ironclad Tactics\". Wikipedia. https://en.wikipedia.org/wiki/Ironclad_Tactics\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Job Simulator\". Wikipedia. https://en.wikipedia.org/wiki/Job_Simulator\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"John Wick Hex\". Wikipedia. https://en.wikipedia.org/wiki/John_Wick_Hex\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Jotun: Valhalla Edition\". Wikipedia. https://en.wikipedia.org/wiki/Jotun:_Valhalla_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Jurassic World Evolution\". Wikipedia. https://en.wikipedia.org/wiki/Jurassic_World_Evolution\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Jurassic World Evolution 2\". Wikipedia. https://en.wikipedia.org/wiki/Jurassic_World_Evolution_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Just Cause 3\". Wikipedia. https://en.wikipedia.org/wiki/Just_Cause_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Just Cause 4\". Wikipedia. https://en.wikipedia.org/wiki/Just_Cause_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Keep Talking And Nobody Explodes\". Wikipedia. https://en.wikipedia.org/wiki/Keep_Talking_And_Nobody_Explodes\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Kena: Bridge Of Spirits\". Wikipedia. https://en.wikipedia.org/wiki/Kena:_Bridge_Of_Spirits\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Kentucky Route Zero\". Wikipedia. https://en.wikipedia.org/wiki/Kentucky_Route_Zero\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Kerbal Space Program\". Wikipedia. https://en.wikipedia.org/wiki/Kerbal_Space_Program\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Killzone Shadow Fall\". Wikipedia. https://en.wikipedia.org/wiki/Killzone_Shadow_Fall\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Killzone: Mercenary\". Wikipedia. https://en.wikipedia.org/wiki/Killzone:_Mercenary\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Kingdom Come: Deliverance\". Wikipedia. https://en.wikipedia.org/wiki/Kingdom_Come:_Deliverance\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Kingdom Hearts Iii\". Wikipedia. https://en.wikipedia.org/wiki/Kingdom_Hearts_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Kingdom: New Lands\". Wikipedia. https://en.wikipedia.org/wiki/Kingdom:_New_Lands\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Kingdom: Two Crowns\". Wikipedia. https://en.wikipedia.org/wiki/Kingdom:_Two_Crowns\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Knockout City\". Wikipedia. https://en.wikipedia.org/wiki/Knockout_City\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lara Croft Go\". Wikipedia. https://en.wikipedia.org/wiki/Lara_Croft_Go\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Last Day Of June\". Wikipedia. https://en.wikipedia.org/wiki/Last_Day_Of_June\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Layers Of Fear\". Wikipedia. https://en.wikipedia.org/wiki/Layers_Of_Fear\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Layers Of Fear 2\". Wikipedia. https://en.wikipedia.org/wiki/Layers_Of_Fear_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Legends Of Runeterra\". Wikipedia. https://en.wikipedia.org/wiki/Legends_Of_Runeterra\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lego Batman 3: Beyond Gotham\". Wikipedia. https://en.wikipedia.org/wiki/Lego_Batman_3:_Beyond_Gotham\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lego Bricktales\". Wikipedia. https://en.wikipedia.org/wiki/Lego_Bricktales\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lego City Undercover\". Wikipedia. https://en.wikipedia.org/wiki/Lego_City_Undercover\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lego Jurassic World\". Wikipedia. https://en.wikipedia.org/wiki/Lego_Jurassic_World\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lego Marvel'S Avengers\". Wikipedia. https://en.wikipedia.org/wiki/Lego_Marvel'S_Avengers\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lego Worlds\". Wikipedia. https://en.wikipedia.org/wiki/Lego_Worlds\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lethal League\". Wikipedia. https://en.wikipedia.org/wiki/Lethal_League\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lethal League Blaze\". Wikipedia. https://en.wikipedia.org/wiki/Lethal_League_Blaze\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Life Is Strange 2\". Wikipedia. https://en.wikipedia.org/wiki/Life_Is_Strange_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Life Is Strange: Before The Storm\". Wikipedia. https://en.wikipedia.org/wiki/Life_Is_Strange:_Before_The_Storm\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Life Is Strange: True Colors\". Wikipedia. https://en.wikipedia.org/wiki/Life_Is_Strange:_True_Colors\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Little Big Workshop\". Wikipedia. https://en.wikipedia.org/wiki/Little_Big_Workshop\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Little Nightmares\". Wikipedia. https://en.wikipedia.org/wiki/Little_Nightmares\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Little Nightmares Ii\". Wikipedia. https://en.wikipedia.org/wiki/Little_Nightmares_Ii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Loadout\". Wikipedia. https://en.wikipedia.org/wiki/Loadout\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Loop Hero\". Wikipedia. https://en.wikipedia.org/wiki/Loop_Hero\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Loot Rascals\". Wikipedia. https://en.wikipedia.org/wiki/Loot_Rascals\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lords Of The Fallen\". Wikipedia. https://en.wikipedia.org/wiki/Lords_Of_The_Fallen\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lords Of Xulima\". Wikipedia. https://en.wikipedia.org/wiki/Lords_Of_Xulima\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lost Ember\". Wikipedia. https://en.wikipedia.org/wiki/Lost_Ember\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lost In Random\". Wikipedia. https://en.wikipedia.org/wiki/Lost_In_Random\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lost Planet 3\". Wikipedia. https://en.wikipedia.org/wiki/Lost_Planet_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lovely Planet\". Wikipedia. https://en.wikipedia.org/wiki/Lovely_Planet\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Luftrausers\". Wikipedia. https://en.wikipedia.org/wiki/Luftrausers\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Luigi'S Mansion 3\". Wikipedia. https://en.wikipedia.org/wiki/Luigi'S_Mansion_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Lumino City\". Wikipedia. https://en.wikipedia.org/wiki/Lumino_City\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mafia Iii\". Wikipedia. https://en.wikipedia.org/wiki/Mafia_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mafia: Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Mafia:_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Magicka 2\". Wikipedia. https://en.wikipedia.org/wiki/Magicka_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mainlining\". Wikipedia. https://en.wikipedia.org/wiki/Mainlining\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mario + Rabbids Kingdom Battle\". Wikipedia. https://en.wikipedia.org/wiki/Mario_+_Rabbids_Kingdom_Battle\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mark Of The Ninja: Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Mark_Of_The_Ninja:_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Marvel Snap\". Wikipedia. https://en.wikipedia.org/wiki/Marvel_Snap\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Marvel'S Guardians Of The Galaxy\". Wikipedia. https://en.wikipedia.org/wiki/Marvel'S_Guardians_Of_The_Galaxy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Marvel'S Midnight Suns\". Wikipedia. https://en.wikipedia.org/wiki/Marvel'S_Midnight_Suns\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mass Effect 3: Citadel\". Wikipedia. https://en.wikipedia.org/wiki/Mass_Effect_3:_Citadel\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mass Effect: Andromeda\". Wikipedia. https://en.wikipedia.org/wiki/Mass_Effect:_Andromeda\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mass Effect: Legendary Edition\". Wikipedia. https://en.wikipedia.org/wiki/Mass_Effect:_Legendary_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Massive Chalice\". Wikipedia. https://en.wikipedia.org/wiki/Massive_Chalice\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Masters Of Anima\". Wikipedia. https://en.wikipedia.org/wiki/Masters_Of_Anima\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Matterfall\". Wikipedia. https://en.wikipedia.org/wiki/Matterfall\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mercenary Kings\". Wikipedia. https://en.wikipedia.org/wiki/Mercenary_Kings\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Metal Gear Rising: Revengeance\". Wikipedia. https://en.wikipedia.org/wiki/Metal_Gear_Rising:_Revengeance\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Metrico+\". Wikipedia. https://en.wikipedia.org/wiki/Metrico+\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Metro 2033 Redux\". Wikipedia. https://en.wikipedia.org/wiki/Metro_2033_Redux\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Metro Exodus\". Wikipedia. https://en.wikipedia.org/wiki/Metro_Exodus\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Metro: Last Light\". Wikipedia. https://en.wikipedia.org/wiki/Metro:_Last_Light\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Metroid Prime Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Metroid_Prime_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Microsoft Flight Simulator 2020\". Wikipedia. https://en.wikipedia.org/wiki/Microsoft_Flight_Simulator_2020\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Middle-Earth: Shadow Of Mordor\". Wikipedia. https://en.wikipedia.org/wiki/Middle-Earth:_Shadow_Of_Mordor\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Middle-Earth: Shadow Of War\". Wikipedia. https://en.wikipedia.org/wiki/Middle-Earth:_Shadow_Of_War\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mighty No. 9\". Wikipedia. https://en.wikipedia.org/wiki/Mighty_No._9\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Minecraft: Dungeons\". Wikipedia. https://en.wikipedia.org/wiki/Minecraft:_Dungeons\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mirror'S Edge Catalyst\". Wikipedia. https://en.wikipedia.org/wiki/Mirror'S_Edge_Catalyst\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Monaco: What'S Yours Is Mine\". Wikipedia. https://en.wikipedia.org/wiki/Monaco:_What'S_Yours_Is_Mine\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Monster Hunter Stories 2: Wings Of Ruin\". Wikipedia. https://en.wikipedia.org/wiki/Monster_Hunter_Stories_2:_Wings_Of_Ruin\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Monster Hunter World: Iceborne\". Wikipedia. https://en.wikipedia.org/wiki/Monster_Hunter_World:_Iceborne\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Monster Hunter: World\". Wikipedia. https://en.wikipedia.org/wiki/Monster_Hunter:_World\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Monster Prom\". Wikipedia. https://en.wikipedia.org/wiki/Monster_Prom\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Monument Valley 2\". Wikipedia. https://en.wikipedia.org/wiki/Monument_Valley_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mortal Kombat 11\". Wikipedia. https://en.wikipedia.org/wiki/Mortal_Kombat_11\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mortal Kombat X\". Wikipedia. https://en.wikipedia.org/wiki/Mortal_Kombat_X\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mortal Shell\". Wikipedia. https://en.wikipedia.org/wiki/Mortal_Shell\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mothergunship\". Wikipedia. https://en.wikipedia.org/wiki/Mothergunship\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Motorsport Manager\". Wikipedia. https://en.wikipedia.org/wiki/Motorsport_Manager\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mount & Blade Ii: Bannerlord\". Wikipedia. https://en.wikipedia.org/wiki/Mount_&_Blade_Ii:_Bannerlord\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Mudrunner\". Wikipedia. https://en.wikipedia.org/wiki/Mudrunner\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Murdered: Soul Suspect\". Wikipedia. https://en.wikipedia.org/wiki/Murdered:_Soul_Suspect\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"My Friend Pedro\". Wikipedia. https://en.wikipedia.org/wiki/My_Friend_Pedro\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Naruto Shippuden: Ultimate Ninja Storm Revolution\". Wikipedia. https://en.wikipedia.org/wiki/Naruto_Shippuden:_Ultimate_Ninja_Storm_Revolution\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Necromunda: Hired Gun\". Wikipedia. https://en.wikipedia.org/wiki/Necromunda:_Hired_Gun\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Neon White\". Wikipedia. https://en.wikipedia.org/wiki/Neon_White\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Neverending Nightmares\". Wikipedia. https://en.wikipedia.org/wiki/Neverending_Nightmares\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"New Pokémon Snap\". Wikipedia. https://en.wikipedia.org/wiki/New_Pokémon_Snap\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Night In The Woods\". Wikipedia. https://en.wikipedia.org/wiki/Night_In_The_Woods\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Nights Of Azure\". Wikipedia. https://en.wikipedia.org/wiki/Nights_Of_Azure\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Nioh\". Wikipedia. https://en.wikipedia.org/wiki/Nioh\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Nioh 2\". Wikipedia. https://en.wikipedia.org/wiki/Nioh_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Nioh: Complete Edition\". Wikipedia. https://en.wikipedia.org/wiki/Nioh:_Complete_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"No Man'S Sky\". Wikipedia. https://en.wikipedia.org/wiki/No_Man'S_Sky\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Nobody Saves The World\". Wikipedia. https://en.wikipedia.org/wiki/Nobody_Saves_The_World\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Nova-111\". Wikipedia. https://en.wikipedia.org/wiki/Nova-111\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Observer: System Redux\". Wikipedia. https://en.wikipedia.org/wiki/Observer:_System_Redux\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Oddworld: New 'N' Tasty\". Wikipedia. https://en.wikipedia.org/wiki/Oddworld:_New_'N'_Tasty\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Oddworld: Soulstorm\". Wikipedia. https://en.wikipedia.org/wiki/Oddworld:_Soulstorm\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Odin Sphere Leifthrasir\". Wikipedia. https://en.wikipedia.org/wiki/Odin_Sphere_Leifthrasir\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Omensight\". Wikipedia. https://en.wikipedia.org/wiki/Omensight\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Omerta - City Of Gangsters\". Wikipedia. https://en.wikipedia.org/wiki/Omerta_-_City_Of_Gangsters\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Oninaki\". Wikipedia. https://en.wikipedia.org/wiki/Oninaki\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Only If\". Wikipedia. https://en.wikipedia.org/wiki/Only_If\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Orcs Must Die! Unchained\". Wikipedia. https://en.wikipedia.org/wiki/Orcs_Must_Die!_Unchained\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Outer Wilds\". Wikipedia. https://en.wikipedia.org/wiki/Outer_Wilds\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Outlast\". Wikipedia. https://en.wikipedia.org/wiki/Outlast\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Outlast 2\". Wikipedia. https://en.wikipedia.org/wiki/Outlast_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Outriders Worldslayer\". Wikipedia. https://en.wikipedia.org/wiki/Outriders_Worldslayer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Outward\". Wikipedia. https://en.wikipedia.org/wiki/Outward\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Overcooked\". Wikipedia. https://en.wikipedia.org/wiki/Overcooked\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Overcooked! 2\". Wikipedia. https://en.wikipedia.org/wiki/Overcooked!_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Overcooked! All You Can Eat\". Wikipedia. https://en.wikipedia.org/wiki/Overcooked!_All_You_Can_Eat\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Overlord: Fellowship Of Evil\". Wikipedia. https://en.wikipedia.org/wiki/Overlord:_Fellowship_Of_Evil\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Override: Mech City Brawl\". Wikipedia. https://en.wikipedia.org/wiki/Override:_Mech_City_Brawl\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Overwatch 2\". Wikipedia. https://en.wikipedia.org/wiki/Overwatch_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Oxenfree\". Wikipedia. https://en.wikipedia.org/wiki/Oxenfree\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Panzer Dragoon: Remake\". Wikipedia. https://en.wikipedia.org/wiki/Panzer_Dragoon:_Remake\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Paper Beast\". Wikipedia. https://en.wikipedia.org/wiki/Paper_Beast\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Papers, Please\". Wikipedia. https://en.wikipedia.org/wiki/Papers,_Please\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Paradise Killer\". Wikipedia. https://en.wikipedia.org/wiki/Paradise_Killer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Parappa The Rapper 2\". Wikipedia. https://en.wikipedia.org/wiki/Parappa_The_Rapper_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pathfinder: Kingmaker\". Wikipedia. https://en.wikipedia.org/wiki/Pathfinder:_Kingmaker\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pathologic 2\". Wikipedia. https://en.wikipedia.org/wiki/Pathologic_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Payday 2\". Wikipedia. https://en.wikipedia.org/wiki/Payday_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Persona 5\". Wikipedia. https://en.wikipedia.org/wiki/Persona_5\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Persona 5 Royal\". Wikipedia. https://en.wikipedia.org/wiki/Persona_5_Royal\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Persona 5 Strikers\". Wikipedia. https://en.wikipedia.org/wiki/Persona_5_Strikers\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Phantom Doctrine\". Wikipedia. https://en.wikipedia.org/wiki/Phantom_Doctrine\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Phoenix Wright: Ace Attorney - Dual Destinies\". Wikipedia. https://en.wikipedia.org/wiki/Phoenix_Wright:_Ace_Attorney_-_Dual_Destinies\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Phoenix Wright: Ace Attorney Trilogy\". Wikipedia. https://en.wikipedia.org/wiki/Phoenix_Wright:_Ace_Attorney_Trilogy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pikmin 3\". Wikipedia. https://en.wikipedia.org/wiki/Pikmin_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pillars Of Eternity Ii: Deadfire\". Wikipedia. https://en.wikipedia.org/wiki/Pillars_Of_Eternity_Ii:_Deadfire\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pit People\". Wikipedia. https://en.wikipedia.org/wiki/Pit_People\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pix The Cat\". Wikipedia. https://en.wikipedia.org/wiki/Pix_The_Cat\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pixel Piracy\". Wikipedia. https://en.wikipedia.org/wiki/Pixel_Piracy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Plague Inc: Evolved\". Wikipedia. https://en.wikipedia.org/wiki/Plague_Inc:_Evolved\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Planar Conquest\". Wikipedia. https://en.wikipedia.org/wiki/Planar_Conquest\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Planescape: Torment: Enhanced Edition\". Wikipedia. https://en.wikipedia.org/wiki/Planescape:_Torment:_Enhanced_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Planet Coaster\". Wikipedia. https://en.wikipedia.org/wiki/Planet_Coaster\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Planet Zoo\". Wikipedia. https://en.wikipedia.org/wiki/Planet_Zoo\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Planetbase\". Wikipedia. https://en.wikipedia.org/wiki/Planetbase\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Poison Control\". Wikipedia. https://en.wikipedia.org/wiki/Poison_Control\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Portal Knights\". Wikipedia. https://en.wikipedia.org/wiki/Portal_Knights\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Prime World: Defenders\". Wikipedia. https://en.wikipedia.org/wiki/Prime_World:_Defenders\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Prison Architect\". Wikipedia. https://en.wikipedia.org/wiki/Prison_Architect\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pro Evolution Soccer 2017\". Wikipedia. https://en.wikipedia.org/wiki/Pro_Evolution_Soccer_2017\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pro Evolution Soccer 2019\". Wikipedia. https://en.wikipedia.org/wiki/Pro_Evolution_Soccer_2019\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Prodeus\". Wikipedia. https://en.wikipedia.org/wiki/Prodeus\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Project Cars 2\". Wikipedia. https://en.wikipedia.org/wiki/Project_Cars_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Psychonauts 2\". Wikipedia. https://en.wikipedia.org/wiki/Psychonauts_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pubg Mobile\". Wikipedia. https://en.wikipedia.org/wiki/Pubg_Mobile\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Punch Club\". Wikipedia. https://en.wikipedia.org/wiki/Punch_Club\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Pure Pool\". Wikipedia. https://en.wikipedia.org/wiki/Pure_Pool\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Quantum Break\". Wikipedia. https://en.wikipedia.org/wiki/Quantum_Break\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rage 2\". Wikipedia. https://en.wikipedia.org/wiki/Rage_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Raiden V: Director'S Cut\". Wikipedia. https://en.wikipedia.org/wiki/Raiden_V:_Director'S_Cut\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rain World\". Wikipedia. https://en.wikipedia.org/wiki/Rain_World\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ratchet & Clank: Rift Apart\". Wikipedia. https://en.wikipedia.org/wiki/Ratchet_&_Clank:_Rift_Apart\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rebel Galaxy\". Wikipedia. https://en.wikipedia.org/wiki/Rebel_Galaxy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Recore\". Wikipedia. https://en.wikipedia.org/wiki/Recore\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Red Dead Redemption 2\". Wikipedia. https://en.wikipedia.org/wiki/Red_Dead_Redemption_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Redfall\". Wikipedia. https://en.wikipedia.org/wiki/Redfall\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Remnant: From The Ashes\". Wikipedia. https://en.wikipedia.org/wiki/Remnant:_From_The_Ashes\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Remothered: Broken Porcelain\". Wikipedia. https://en.wikipedia.org/wiki/Remothered:_Broken_Porcelain\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Remothered: Tormented Fathers\". Wikipedia. https://en.wikipedia.org/wiki/Remothered:_Tormented_Fathers\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Resident Evil 2\". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Resident Evil 3\". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Resident Evil 4\". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Resident Evil 7: Biohazard\". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil_7:_Biohazard\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Resident Evil: Resistance\". Wikipedia. https://en.wikipedia.org/wiki/Resident_Evil:_Resistance\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Reventure\". Wikipedia. https://en.wikipedia.org/wiki/Reventure\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ride 2\". Wikipedia. https://en.wikipedia.org/wiki/Ride_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ride 4\". Wikipedia. https://en.wikipedia.org/wiki/Ride_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ring Fit Adventure\". Wikipedia. https://en.wikipedia.org/wiki/Ring_Fit_Adventure\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rise Of The Triad\". Wikipedia. https://en.wikipedia.org/wiki/Rise_Of_The_Triad\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Risen 3: Titan Lords\". Wikipedia. https://en.wikipedia.org/wiki/Risen_3:_Titan_Lords\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Risk Of Rain\". Wikipedia. https://en.wikipedia.org/wiki/Risk_Of_Rain\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Road 96\". Wikipedia. https://en.wikipedia.org/wiki/Road_96\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Road Redemption\". Wikipedia. https://en.wikipedia.org/wiki/Road_Redemption\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Robonauts\". Wikipedia. https://en.wikipedia.org/wiki/Robonauts\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rock Of Ages 3: Make & Break\". Wikipedia. https://en.wikipedia.org/wiki/Rock_Of_Ages_3:_Make_&_Break\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rocket Arena\". Wikipedia. https://en.wikipedia.org/wiki/Rocket_Arena\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rogue Company\". Wikipedia. https://en.wikipedia.org/wiki/Rogue_Company\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rogue Legacy\". Wikipedia. https://en.wikipedia.org/wiki/Rogue_Legacy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rogue Trooper Redux\". Wikipedia. https://en.wikipedia.org/wiki/Rogue_Trooper_Redux\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Rollerdrome\". Wikipedia. https://en.wikipedia.org/wiki/Rollerdrome\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ruined King: A League Of Legends Story\". Wikipedia. https://en.wikipedia.org/wiki/Ruined_King:_A_League_Of_Legends_Story\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ryse: Son Of Rome\". Wikipedia. https://en.wikipedia.org/wiki/Ryse:_Son_Of_Rome\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sacred Citadel\". Wikipedia. https://en.wikipedia.org/wiki/Sacred_Citadel\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Saints Row Iv\". Wikipedia. https://en.wikipedia.org/wiki/Saints_Row_Iv\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Saints Row: Gat Out Of Hell\". Wikipedia. https://en.wikipedia.org/wiki/Saints_Row:_Gat_Out_Of_Hell\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Samorost 3\". Wikipedia. https://en.wikipedia.org/wiki/Samorost_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sanctum 2\". Wikipedia. https://en.wikipedia.org/wiki/Sanctum_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sayonara Wild Hearts\". Wikipedia. https://en.wikipedia.org/wiki/Sayonara_Wild_Hearts\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Scarlet Nexus\". Wikipedia. https://en.wikipedia.org/wiki/Scarlet_Nexus\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Scourge: Outbreak\". Wikipedia. https://en.wikipedia.org/wiki/Scourge:_Outbreak\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Screencheat\". Wikipedia. https://en.wikipedia.org/wiki/Screencheat\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sea Of Solitude\". Wikipedia. https://en.wikipedia.org/wiki/Sea_Of_Solitude\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sea Of Thieves\". Wikipedia. https://en.wikipedia.org/wiki/Sea_Of_Thieves\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Secret World Legends\". Wikipedia. https://en.wikipedia.org/wiki/Secret_World_Legends\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sekiro: Shadows Die Twice\". Wikipedia. https://en.wikipedia.org/wiki/Sekiro:_Shadows_Die_Twice\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Serial Cleaner\". Wikipedia. https://en.wikipedia.org/wiki/Serial_Cleaner\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shadow Of The Colossus\". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Of_The_Colossus\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shadow Of The Tomb Raider\". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Of_The_Tomb_Raider\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shadow Warrior 2\". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Warrior_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shadow Warrior 3\". Wikipedia. https://en.wikipedia.org/wiki/Shadow_Warrior_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shadwen\". Wikipedia. https://en.wikipedia.org/wiki/Shadwen\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shardlight\". Wikipedia. https://en.wikipedia.org/wiki/Shardlight\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shenmue Iii\". Wikipedia. https://en.wikipedia.org/wiki/Shenmue_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shin Megami Tensei Iv\". Wikipedia. https://en.wikipedia.org/wiki/Shin_Megami_Tensei_Iv\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shin Megami Tensei V\". Wikipedia. https://en.wikipedia.org/wiki/Shin_Megami_Tensei_V\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shining Resonance Refrain\". Wikipedia. https://en.wikipedia.org/wiki/Shining_Resonance_Refrain\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shovel Knight\". Wikipedia. https://en.wikipedia.org/wiki/Shovel_Knight\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Shovel Knight: Treasure Trove\". Wikipedia. https://en.wikipedia.org/wiki/Shovel_Knight:_Treasure_Trove\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Skatebird\". Wikipedia. https://en.wikipedia.org/wiki/Skatebird\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Skulls Of The Shogun\". Wikipedia. https://en.wikipedia.org/wiki/Skulls_Of_The_Shogun\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sleeping Dogs: Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Sleeping_Dogs:_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Slime Rancher\". Wikipedia. https://en.wikipedia.org/wiki/Slime_Rancher\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sniper Elite 4\". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Elite_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sniper Elite 5\". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Elite_5\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sniper Elite V2 Remastered\". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Elite_V2_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sniper Ghost Warrior Contracts\". Wikipedia. https://en.wikipedia.org/wiki/Sniper_Ghost_Warrior_Contracts\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sniper: Ghost Warrior 2\". Wikipedia. https://en.wikipedia.org/wiki/Sniper:_Ghost_Warrior_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sniper: Ghost Warrior 3\". Wikipedia. https://en.wikipedia.org/wiki/Sniper:_Ghost_Warrior_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sol Cresta\". Wikipedia. https://en.wikipedia.org/wiki/Sol_Cresta\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Song Of The Deep\". Wikipedia. https://en.wikipedia.org/wiki/Song_Of_The_Deep\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sonic Forces\". Wikipedia. https://en.wikipedia.org/wiki/Sonic_Forces\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sonic Lost World\". Wikipedia. https://en.wikipedia.org/wiki/Sonic_Lost_World\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sonic Mania\". Wikipedia. https://en.wikipedia.org/wiki/Sonic_Mania\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Soul Hackers 2\". Wikipedia. https://en.wikipedia.org/wiki/Soul_Hackers_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Soul Sacrifice Delta\". Wikipedia. https://en.wikipedia.org/wiki/Soul_Sacrifice_Delta\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Soulcalibur Vi\". Wikipedia. https://en.wikipedia.org/wiki/Soulcalibur_Vi\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Space Engineers\". Wikipedia. https://en.wikipedia.org/wiki/Space_Engineers\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Space Hulk: Deathwing\". Wikipedia. https://en.wikipedia.org/wiki/Space_Hulk:_Deathwing\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Space Hulk: Tactics\". Wikipedia. https://en.wikipedia.org/wiki/Space_Hulk:_Tactics\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Space Run\". Wikipedia. https://en.wikipedia.org/wiki/Space_Run\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Spellbreak\". Wikipedia. https://en.wikipedia.org/wiki/Spellbreak\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Spiritfarer\". Wikipedia. https://en.wikipedia.org/wiki/Spiritfarer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Splatoon 2\". Wikipedia. https://en.wikipedia.org/wiki/Splatoon_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Spyro Reignited Trilogy\". Wikipedia. https://en.wikipedia.org/wiki/Spyro_Reignited_Trilogy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Star Fox Zero\". Wikipedia. https://en.wikipedia.org/wiki/Star_Fox_Zero\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Star Trek: Bridge Crew\". Wikipedia. https://en.wikipedia.org/wiki/Star_Trek:_Bridge_Crew\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Star Wars Jedi: Fallen Order\". Wikipedia. https://en.wikipedia.org/wiki/Star_Wars_Jedi:_Fallen_Order\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Star Wars Jedi: Survivor\". Wikipedia. https://en.wikipedia.org/wiki/Star_Wars_Jedi:_Survivor\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Star Wars: Squadrons\". Wikipedia. https://en.wikipedia.org/wiki/Star_Wars:_Squadrons\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Stardew Valley\". Wikipedia. https://en.wikipedia.org/wiki/Stardew_Valley\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"State Of Decay 2\". Wikipedia. https://en.wikipedia.org/wiki/State_Of_Decay_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Steamworld Dig\". Wikipedia. https://en.wikipedia.org/wiki/Steamworld_Dig\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Steamworld Dig 2\". Wikipedia. https://en.wikipedia.org/wiki/Steamworld_Dig_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Steelrising\". Wikipedia. https://en.wikipedia.org/wiki/Steelrising\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Stranded Deep\". Wikipedia. https://en.wikipedia.org/wiki/Stranded_Deep\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Strange Brigade\". Wikipedia. https://en.wikipedia.org/wiki/Strange_Brigade\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Stranger Of Paradise: Final Fantasy Origin\". Wikipedia. https://en.wikipedia.org/wiki/Stranger_Of_Paradise:_Final_Fantasy_Origin\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Street Fighter V\". Wikipedia. https://en.wikipedia.org/wiki/Street_Fighter_V\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Streets Of Rage 4\". Wikipedia. https://en.wikipedia.org/wiki/Streets_Of_Rage_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Stronghold Crusader 2\". Wikipedia. https://en.wikipedia.org/wiki/Stronghold_Crusader_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Styx: Master Of Shadows\". Wikipedia. https://en.wikipedia.org/wiki/Styx:_Master_Of_Shadows\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Styx: Shards Of Darkness\". Wikipedia. https://en.wikipedia.org/wiki/Styx:_Shards_Of_Darkness\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Subnautica\". Wikipedia. https://en.wikipedia.org/wiki/Subnautica\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Subnautica: Below Zero\". Wikipedia. https://en.wikipedia.org/wiki/Subnautica:_Below_Zero\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sudden Strike 4\". Wikipedia. https://en.wikipedia.org/wiki/Sudden_Strike_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sundered\". Wikipedia. https://en.wikipedia.org/wiki/Sundered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sunless Sea\". Wikipedia. https://en.wikipedia.org/wiki/Sunless_Sea\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sunset Overdrive\". Wikipedia. https://en.wikipedia.org/wiki/Sunset_Overdrive\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Super Time Force Ultra\". Wikipedia. https://en.wikipedia.org/wiki/Super_Time_Force_Ultra\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Superhot\". Wikipedia. https://en.wikipedia.org/wiki/Superhot\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Surgeon Simulator\". Wikipedia. https://en.wikipedia.org/wiki/Surgeon_Simulator\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Surviving Mars\". Wikipedia. https://en.wikipedia.org/wiki/Surviving_Mars\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sword Art Online Re: Hollow Fragment\". Wikipedia. https://en.wikipedia.org/wiki/Sword_Art_Online_Re:_Hollow_Fragment\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sword Art Online: Fatal Bullet\". Wikipedia. https://en.wikipedia.org/wiki/Sword_Art_Online:_Fatal_Bullet\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sword Art Online: Lost Song\". Wikipedia. https://en.wikipedia.org/wiki/Sword_Art_Online:_Lost_Song\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sword Coast Legends\". Wikipedia. https://en.wikipedia.org/wiki/Sword_Coast_Legends\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Syberia 3\". Wikipedia. https://en.wikipedia.org/wiki/Syberia_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Sébastien Loeb Rally Evo\". Wikipedia. https://en.wikipedia.org/wiki/Sébastien_Loeb_Rally_Evo\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tactics Ogre: Reborn\". Wikipedia. https://en.wikipedia.org/wiki/Tactics_Ogre:_Reborn\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tales Of Arise\". Wikipedia. https://en.wikipedia.org/wiki/Tales_Of_Arise\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tales Of Vesperia: Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Tales_Of_Vesperia:_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tearaway Unfolded\". Wikipedia. https://en.wikipedia.org/wiki/Tearaway_Unfolded\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Technobabylon\". Wikipedia. https://en.wikipedia.org/wiki/Technobabylon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Teenage Mutant Ninja Turtles: Shredder'S Revenge\". Wikipedia. https://en.wikipedia.org/wiki/Teenage_Mutant_Ninja_Turtles:_Shredder'S_Revenge\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tekken 7\". Wikipedia. https://en.wikipedia.org/wiki/Tekken_7\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Temtem\". Wikipedia. https://en.wikipedia.org/wiki/Temtem\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tennis World Tour 2\". Wikipedia. https://en.wikipedia.org/wiki/Tennis_World_Tour_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Terra Nil\". Wikipedia. https://en.wikipedia.org/wiki/Terra_Nil\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Teslagrad\". Wikipedia. https://en.wikipedia.org/wiki/Teslagrad\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"That Dragon, Cancer\". Wikipedia. https://en.wikipedia.org/wiki/That_Dragon,_Cancer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Artful Escape\". Wikipedia. https://en.wikipedia.org/wiki/The_Artful_Escape\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Banner Saga: Factions\". Wikipedia. https://en.wikipedia.org/wiki/The_Banner_Saga:_Factions\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Binding Of Isaac: Rebirth\". Wikipedia. https://en.wikipedia.org/wiki/The_Binding_Of_Isaac:_Rebirth\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Book Of Unwritten Tales 2\". Wikipedia. https://en.wikipedia.org/wiki/The_Book_Of_Unwritten_Tales_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Callisto Protocol\". Wikipedia. https://en.wikipedia.org/wiki/The_Callisto_Protocol\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Crew 2\". Wikipedia. https://en.wikipedia.org/wiki/The_Crew_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Dark Pictures Anthology: Little Hope\". Wikipedia. https://en.wikipedia.org/wiki/The_Dark_Pictures_Anthology:_Little_Hope\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Dark Pictures Anthology: Man Of Medan\". Wikipedia. https://en.wikipedia.org/wiki/The_Dark_Pictures_Anthology:_Man_Of_Medan\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Deadly Tower Of Monsters\". Wikipedia. https://en.wikipedia.org/wiki/The_Deadly_Tower_Of_Monsters\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Elder Scrolls Online\". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls_Online\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Elder Scrolls Online: Tamriel Unlimited\". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls_Online:_Tamriel_Unlimited\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Elder Scrolls V: Skyrim Special Edition\". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls_V:_Skyrim_Special_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Elder Scrolls: Legends\". Wikipedia. https://en.wikipedia.org/wiki/The_Elder_Scrolls:_Legends\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Evil Within\". Wikipedia. https://en.wikipedia.org/wiki/The_Evil_Within\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Evil Within 2\". Wikipedia. https://en.wikipedia.org/wiki/The_Evil_Within_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Falconeer\". Wikipedia. https://en.wikipedia.org/wiki/The_Falconeer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Flame In The Flood\". Wikipedia. https://en.wikipedia.org/wiki/The_Flame_In_The_Flood\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Forgotten City\". Wikipedia. https://en.wikipedia.org/wiki/The_Forgotten_City\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Gardens Between\". Wikipedia. https://en.wikipedia.org/wiki/The_Gardens_Between\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Golf Club\". Wikipedia. https://en.wikipedia.org/wiki/The_Golf_Club\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Hong Kong Massacre\". Wikipedia. https://en.wikipedia.org/wiki/The_Hong_Kong_Massacre\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Incredible Adventures Of Van Helsing\". Wikipedia. https://en.wikipedia.org/wiki/The_Incredible_Adventures_Of_Van_Helsing\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Incredible Adventures Of Van Helsing Ii\". Wikipedia. https://en.wikipedia.org/wiki/The_Incredible_Adventures_Of_Van_Helsing_Ii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Incredible Adventures Of Van Helsing Iii\". Wikipedia. https://en.wikipedia.org/wiki/The_Incredible_Adventures_Of_Van_Helsing_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Infectious Madness Of Doctor Dekker\". Wikipedia. https://en.wikipedia.org/wiki/The_Infectious_Madness_Of_Doctor_Dekker\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Journey Down: Chapter Three\". Wikipedia. https://en.wikipedia.org/wiki/The_Journey_Down:_Chapter_Three\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Last Guardian\". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Guardian\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Last Of Us\". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Last Of Us Part I\". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us_Part_I\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Last Of Us Part Ii\". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us_Part_Ii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Last Of Us Remastered\". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Of_Us_Remastered\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Last Tinker: City Of Colors\". Wikipedia. https://en.wikipedia.org/wiki/The_Last_Tinker:_City_Of_Colors\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Legend Of Heroes: Trails Of Cold Steel\". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Heroes:_Trails_Of_Cold_Steel\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Legend Of Heroes: Trails Of Cold Steel Iii\". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Heroes:_Trails_Of_Cold_Steel_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Legend Of Zelda: A Link Between Worlds\". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_A_Link_Between_Worlds\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Legend Of Zelda: Breath Of The Wild\". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_Breath_Of_The_Wild\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Legend Of Zelda: Link'S Awakening\". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_Link'S_Awakening\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Legend Of Zelda: Tears Of The Kingdom\". Wikipedia. https://en.wikipedia.org/wiki/The_Legend_Of_Zelda:_Tears_Of_The_Kingdom\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Lego Ninjago Movie Video Game\". Wikipedia. https://en.wikipedia.org/wiki/The_Lego_Ninjago_Movie_Video_Game\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Long Dark\". Wikipedia. https://en.wikipedia.org/wiki/The_Long_Dark\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Lord Of The Rings: Gollum\". Wikipedia. https://en.wikipedia.org/wiki/The_Lord_Of_The_Rings:_Gollum\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Occupation\". Wikipedia. https://en.wikipedia.org/wiki/The_Occupation\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Order: 1886\". Wikipedia. https://en.wikipedia.org/wiki/The_Order:_1886\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Pathless\". Wikipedia. https://en.wikipedia.org/wiki/The_Pathless\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Showdown Effect\". Wikipedia. https://en.wikipedia.org/wiki/The_Showdown_Effect\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Silver Case\". Wikipedia. https://en.wikipedia.org/wiki/The_Silver_Case\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Sims 4\". Wikipedia. https://en.wikipedia.org/wiki/The_Sims_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Sinking City\". Wikipedia. https://en.wikipedia.org/wiki/The_Sinking_City\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Suicide Of Rachel Foster\". Wikipedia. https://en.wikipedia.org/wiki/The_Suicide_Of_Rachel_Foster\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Surge\". Wikipedia. https://en.wikipedia.org/wiki/The_Surge\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Surge 2\". Wikipedia. https://en.wikipedia.org/wiki/The_Surge_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Swapper\". Wikipedia. https://en.wikipedia.org/wiki/The_Swapper\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Swords Of Ditto\". Wikipedia. https://en.wikipedia.org/wiki/The_Swords_Of_Ditto\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Talos Principle\". Wikipedia. https://en.wikipedia.org/wiki/The_Talos_Principle\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Technomancer\". Wikipedia. https://en.wikipedia.org/wiki/The_Technomancer\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Touryst\". Wikipedia. https://en.wikipedia.org/wiki/The_Touryst\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Vanishing Of Ethan Carter\". Wikipedia. https://en.wikipedia.org/wiki/The_Vanishing_Of_Ethan_Carter\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Vanishing Of Ethan Carter Redux\". Wikipedia. https://en.wikipedia.org/wiki/The_Vanishing_Of_Ethan_Carter_Redux\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Walking Dead: A New Frontier\". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_A_New_Frontier\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Walking Dead: Michonne\". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Michonne\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Walking Dead: Saints & Sinners\". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Saints_&_Sinners\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Walking Dead: Season 2\". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Season_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Walking Dead: Survival Instinct\". Wikipedia. https://en.wikipedia.org/wiki/The_Walking_Dead:_Survival_Instinct\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Witcher 3: Wild Hunt\". Wikipedia. https://en.wikipedia.org/wiki/The_Witcher_3:_Wild_Hunt\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Witcher 3: Wild Hunt – Hearts Of Stone\". Wikipedia. https://en.wikipedia.org/wiki/The_Witcher_3:_Wild_Hunt_–_Hearts_Of_Stone\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"The Wolf Among Us\". Wikipedia. https://en.wikipedia.org/wiki/The_Wolf_Among_Us\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Thimbleweed Park\". Wikipedia. https://en.wikipedia.org/wiki/Thimbleweed_Park\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"This Is The Police\". Wikipedia. https://en.wikipedia.org/wiki/This_Is_The_Police\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"This Is The Police 2\". Wikipedia. https://en.wikipedia.org/wiki/This_Is_The_Police_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"This War Of Mine\". Wikipedia. https://en.wikipedia.org/wiki/This_War_Of_Mine\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Timespinner\". Wikipedia. https://en.wikipedia.org/wiki/Timespinner\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tiny Tina'S Wonderlands\". Wikipedia. https://en.wikipedia.org/wiki/Tiny_Tina'S_Wonderlands\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Titanfall 2\". Wikipedia. https://en.wikipedia.org/wiki/Titanfall_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Toejam & Earl: Back In The Groove\". Wikipedia. https://en.wikipedia.org/wiki/Toejam_&_Earl:_Back_In_The_Groove\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tokyo 42\". Wikipedia. https://en.wikipedia.org/wiki/Tokyo_42\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tom Clancy'S Ghost Recon Wildlands\". Wikipedia. https://en.wikipedia.org/wiki/Tom_Clancy'S_Ghost_Recon_Wildlands\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tom Clancy'S Rainbow Six Siege\". Wikipedia. https://en.wikipedia.org/wiki/Tom_Clancy'S_Rainbow_Six_Siege\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tomb Raider: Definitive Edition\". Wikipedia. https://en.wikipedia.org/wiki/Tomb_Raider:_Definitive_Edition\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Torchlight Iii\". Wikipedia. https://en.wikipedia.org/wiki/Torchlight_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Total War Saga: Troy\". Wikipedia. https://en.wikipedia.org/wiki/Total_War_Saga:_Troy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Total War: Three Kingdoms\". Wikipedia. https://en.wikipedia.org/wiki/Total_War:_Three_Kingdoms\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Total War: Warhammer Iii\". Wikipedia. https://en.wikipedia.org/wiki/Total_War:_Warhammer_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Toukiden: Kiwami\". Wikipedia. https://en.wikipedia.org/wiki/Toukiden:_Kiwami\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Train Fever\". Wikipedia. https://en.wikipedia.org/wiki/Train_Fever\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Transformers: Devastation\". Wikipedia. https://en.wikipedia.org/wiki/Transformers:_Devastation\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Transformers: Rise Of The Dark Spark\". Wikipedia. https://en.wikipedia.org/wiki/Transformers:_Rise_Of_The_Dark_Spark\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Trials Of Mana\". Wikipedia. https://en.wikipedia.org/wiki/Trials_Of_Mana\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tropico 5\". Wikipedia. https://en.wikipedia.org/wiki/Tropico_5\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tropico 6\". Wikipedia. https://en.wikipedia.org/wiki/Tropico_6\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Trover Saves The Universe\". Wikipedia. https://en.wikipedia.org/wiki/Trover_Saves_The_Universe\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Tumblestone\". Wikipedia. https://en.wikipedia.org/wiki/Tumblestone\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Two Point Campus\". Wikipedia. https://en.wikipedia.org/wiki/Two_Point_Campus\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ultra Street Fighter Iv\". Wikipedia. https://en.wikipedia.org/wiki/Ultra_Street_Fighter_Iv\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Umurangi Generation\". Wikipedia. https://en.wikipedia.org/wiki/Umurangi_Generation\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Undertale\". Wikipedia. https://en.wikipedia.org/wiki/Undertale\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Until Dawn\". Wikipedia. https://en.wikipedia.org/wiki/Until_Dawn\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Until Dawn: Rush Of Blood\". Wikipedia. https://en.wikipedia.org/wiki/Until_Dawn:_Rush_Of_Blood\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Valfaris\". Wikipedia. https://en.wikipedia.org/wiki/Valfaris\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Valkyria Chronicles 4\". Wikipedia. https://en.wikipedia.org/wiki/Valkyria_Chronicles_4\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Valorant\". Wikipedia. https://en.wikipedia.org/wiki/Valorant\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Victor Vran\". Wikipedia. https://en.wikipedia.org/wiki/Victor_Vran\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Victoria 3\". Wikipedia. https://en.wikipedia.org/wiki/Victoria_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Void Bastards\". Wikipedia. https://en.wikipedia.org/wiki/Void_Bastards\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"War Thunder\". Wikipedia. https://en.wikipedia.org/wiki/War_Thunder\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warcraft Iii: Reforged\". Wikipedia. https://en.wikipedia.org/wiki/Warcraft_Iii:_Reforged\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warframe\". Wikipedia. https://en.wikipedia.org/wiki/Warframe\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Wargroove\". Wikipedia. https://en.wikipedia.org/wiki/Wargroove\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warhammer 40,000: Chaos Gate - Daemonhunters\". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Chaos_Gate_-_Daemonhunters\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warhammer 40,000: Dawn Of War Iii\". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Dawn_Of_War_Iii\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warhammer 40,000: Inquisitor - Martyr\". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Inquisitor_-_Martyr\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warhammer 40,000: Mechanicus\". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Mechanicus\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warhammer 40,000: Space Wolf\". Wikipedia. https://en.wikipedia.org/wiki/Warhammer_40,000:_Space_Wolf\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warhammer: Chaosbane\". Wikipedia. https://en.wikipedia.org/wiki/Warhammer:_Chaosbane\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Warhammer: Vermintide 2\". Wikipedia. https://en.wikipedia.org/wiki/Warhammer:_Vermintide_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Wasteland 2: Director'S Cut\". Wikipedia. https://en.wikipedia.org/wiki/Wasteland_2:_Director'S_Cut\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Wasteland 3\". Wikipedia. https://en.wikipedia.org/wiki/Wasteland_3\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Watch Dogs 2\". Wikipedia. https://en.wikipedia.org/wiki/Watch_Dogs_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Watch Dogs: Legion\". Wikipedia. https://en.wikipedia.org/wiki/Watch_Dogs:_Legion\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"We Happy Few\". Wikipedia. https://en.wikipedia.org/wiki/We_Happy_Few\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"What Remains Of Edith Finch\". Wikipedia. https://en.wikipedia.org/wiki/What_Remains_Of_Edith_Finch\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Wheels Of Aurelia\". Wikipedia. https://en.wikipedia.org/wiki/Wheels_Of_Aurelia\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Whispering Willows\". Wikipedia. https://en.wikipedia.org/wiki/Whispering_Willows\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Wizard Of Legend\". Wikipedia. https://en.wikipedia.org/wiki/Wizard_Of_Legend\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Wolfenstein: Youngblood\". Wikipedia. https://en.wikipedia.org/wiki/Wolfenstein:_Youngblood\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"World Of Final Fantasy\". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Final_Fantasy\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"World Of Tanks Blitz\". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Tanks_Blitz\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"World Of Warcraft: Legion\". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Warcraft:_Legion\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"World Of Warcraft: Warlords Of Draenor\". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Warcraft:_Warlords_Of_Draenor\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"World Of Warships\". Wikipedia. https://en.wikipedia.org/wiki/World_Of_Warships\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"World War Ii Online\". Wikipedia. https://en.wikipedia.org/wiki/World_War_Ii_Online\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Worms Battlegrounds\". Wikipedia. https://en.wikipedia.org/wiki/Worms_Battlegrounds\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Wytchwood\". Wikipedia. https://en.wikipedia.org/wiki/Wytchwood\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"X Rebirth\". Wikipedia. https://en.wikipedia.org/wiki/X_Rebirth\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Xcom 2\". Wikipedia. https://en.wikipedia.org/wiki/Xcom_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Xenoblade Chronicles 2\". Wikipedia. https://en.wikipedia.org/wiki/Xenoblade_Chronicles_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Yakuza 0\". Wikipedia. https://en.wikipedia.org/wiki/Yakuza_0\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Yakuza Kiwami\". Wikipedia. https://en.wikipedia.org/wiki/Yakuza_Kiwami\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Yakuza Kiwami 2\". Wikipedia. https://en.wikipedia.org/wiki/Yakuza_Kiwami_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Yakuza: Like A Dragon\". Wikipedia. https://en.wikipedia.org/wiki/Yakuza:_Like_A_Dragon\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Year Walk\". Wikipedia. https://en.wikipedia.org/wiki/Year_Walk\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Yesterday Origins\". Wikipedia. https://en.wikipedia.org/wiki/Yesterday_Origins\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ys Ix: Monstrum Nox\". Wikipedia. https://en.wikipedia.org/wiki/Ys_Ix:_Monstrum_Nox\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Ys Viii: Lacrimosa Of Dana\". Wikipedia. https://en.wikipedia.org/wiki/Ys_Viii:_Lacrimosa_Of_Dana\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Zeno Clash 2\". Wikipedia. https://en.wikipedia.org/wiki/Zeno_Clash_2\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Zero Escape: Zero Time Dilemma\". Wikipedia. https://en.wikipedia.org/wiki/Zero_Escape:_Zero_Time_Dilemma\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Zombie Army 4: Dead War\". Wikipedia. https://en.wikipedia.org/wiki/Zombie_Army_4:_Dead_War\nAccessed on July 3, 2023.\n\nWikipedia. (n.d.). \"Zombie Army Trilogy\". Wikipedia. https://en.wikipedia.org/wiki/Zombie_Army_Trilogy\nAccessed on July 3, 2023.\n\n",
    "supporting": [
      "VideoGameML_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}