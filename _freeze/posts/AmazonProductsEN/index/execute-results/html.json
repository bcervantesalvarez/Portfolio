{
  "hash": "6b287635d6d0d4f72e2cf02a919b4746",
  "result": {
    "markdown": "---\ntitle: \"Building A Quick Dashboard For Amazon Products (EN.)\"\nauthor: \"Brian Cervantes Alvarez\"\ndate: \"04-21-2023\"\nimage: AmazonLogo.png\nformat:\n  html:\n    toc: true\n    toc-location: right\n    html-math-method: katex\noutput: html_document\ncode-fold: false\nexecute:\n  eval: false\ncategories: [R, RShiny, CSS]\n---\n\n\n![](AmazonLogo.png)\n\n## Purpose\n\nIn this project, I developed a Shiny application that analyzed Amazon products available in India. The dataset used in this project was obtained from [Kaggle](https://www.kaggle.com/datasets/lokeshparab/amazon-products-dataset?select=Amazon+Pharmacy.csv), and it presented several challenges during the development process. While I was not able to fix all the issues with the product categories due to time constraints, I focused on creating a concise and informative dashboard that displayed the categories with the highest average ratings and reviews.\n\nCompared to my previous Shiny app, this project was developed more efficiently, taking approximately 70% less time. Additionally, I was able to implement more advanced CSS theming than before, which improved the overall design of the application. While there are still additional features and visualizations that could be added to the app, I decided to leave them for others to explore in the future.\n\nOverall, this project was a challenging but rewarding experience that allowed me to build my skills in data analysis and Shiny app development.\n\n## Questions\n\n-   What is the average **rating** for each category and subcategory?\n\n-   What is the average **review** for each category and subcategory?\n\n<iframe src=\"https://bcervantesalvarez.shinyapps.io/AmazonProductApp/\" width=\"800\" height=\"800\" allowfullscreen>\n\n</iframe>\n\n[Fullscreen](https://bcervantesalvarez.shinyapps.io/AmazonProductApp/)\n\n## Load Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(stringr)\nlibrary(plotly)\nlibrary(DT)\noptions(scipen = 999)\n```\n:::\n\n\n## Part 1: Data Wrangling Multiple Datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ORIGINAL DATA WRANGLING \n\ndatasets <- as.data.frame(list.files(path = \"~/Documents/ShinyApps/AmazonProducts/AmazonProductApp\", pattern = \"csv\"))\ncolnames(datasets) <- \"Datasets\"\n\n#Combine all the datasets\nfor (i in length(nrow(datasets))){\n combinedDs <- read_csv(datasets[[i]])\n}\n\namazonProducts <- combinedDs %>%\n mutate(Name = name,\n       MainCategory = factor(str_to_title((sort(main_category)))),\n        SubCategory = factor(sort(sub_category)),\n        ProductImage = image,\n        ProductRating = as.numeric(ratings),\n        NumberOfRatings = as.numeric(gsub(\"\\\\,\",\"\",no_of_ratings)),\n        DiscountPrice = round(as.numeric(gsub(\"[\\\\₹,]\", \"\", discount_price)) / 81.85, 2), #convert from Rupee to USD\n        Price = round(as.numeric(gsub(\"[\\\\₹,]\", \"\", actual_price)) / 81.85, 2),           #convert from Rupee to USD\n        ProductLink = link) %>%\n select(-c(name, \n           main_category, \n           sub_category, \n           image, \n           ratings, \n           no_of_ratings, \n           discount_price, \n           actual_price,\n           link)) %>% \n drop_na() %>%\n filter(!str_detect(SubCategory, \"^All \"))\n\namazonProducts %>%\n write_csv(\"amazonProducts.csv\")\n```\n:::\n\n\n### Reload Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproducts <- read_csv(\"amazonProducts.csv\")\n```\n:::\n\n\n## Part 2: Data Wrangling For Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproducts <- products %>% mutate(DiscountPrice = round(DiscountPrice82.04,2), Price = round(Price82.04,2))\n\n#For Plot 1\nratings <- products %>% select(-c(ProductImage, Name, ProductLink)) %>% group_by(MainCategory,SubCategory) %>% summarise(AverageRating = mean(ProductRating)) %>% ungroup()\n\nreviews <- products %>% select(-c(ProductImage, Name, ProductLink)) %>% group_by(MainCategory,SubCategory) %>% summarise(AverageReview = mean(NumberOfRatings)) %>% ungroup()\n\n#For Plot 2 \ntop10Products <- products %>% filter(ProductRating > 4.5, NumberOfRatings > 50) %>% group_by(SubCategory) %>% arrange(desc(ProductRating)) %>% slice(1:10) %>% select(-c(ProductImage, Name, ProductLink))\n\n#unique(products$MainCategory)\n```\n:::\n\n\n### Color Theming\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Plot 1 \nnum_colors <- 21 \ncolors <- c(\"#f2f2f2\", \"#ff9900\") \npal1 <- colorRampPalette(colors)(num_colors)\n\nprint(pal1)\n\n#Plot 2 \nnum_colors <- 21 \ncolors <- colors <- c(\"#f2f2f2\",\"#00a8e1\") \npal2 <- colorRampPalette(colors)(num_colors)\n```\n:::\n\n\n## Part 1: Shiny UI\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define UI for application \nui <- fluidPage(\n  \n  #Background CSS\n  tags$head(tags$style(HTML('\n  @import url(https://fonts.googleapis.com/css?family=Montserrat&display=swap);\n    body {\n      font-family: Montserrat, sans-serif;\n      background-color: #FF9900;\n    }\n    .dataTables_wrapper {\n      background-color: #fff;\n    }\n    .sidebar {\n      background-color: #fff;\n      width: 3/12;\n      height: 2/12;\n    }\n    .nav-tabs > li > a {\n      color: black;\n      background-color: #00a8e1;\n      border-color: #00a8e1;\n    }'))),\n  \n  # Application title\n  titlePanel(\"Amazon Inc. Product Dashboard (EN.)\"),\n  \n  # Sidebar\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"MainCategoryChoice\", \n                  label = h3(\"Select Category:\"), \n                  choices = unique(products$MainCategory), \n                  selected = \"Accessories\"),\n      \n      uiOutput(\"SubCategoryChoice\")\n    ),\n    \n    # Tabs\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Plot\", \n                 plotlyOutput(\"RatingsPlot\"),\n                 plotlyOutput(\"ReviewsPlot\")),\n        tabPanel(\"Data\", dataTableOutput(\"myDataTable\"))\n      )\n    )\n  )\n)\n```\n:::\n\n\n## Part 2: Shiny Server\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define server logic required to draw Dashboard\nserver <- function(input, output) {\n  \n  # Subcategory choices\n  output$SubCategoryChoice <- renderUI({\n    subcategories <- unique(products$SubCategory[products$MainCategory == input$MainCategoryChoice])\n    checkboxGroupInput(\"SubCategoryChoice\", \n                       label = h3(\"Select Subcategories:\"), \n                       choices = subcategories, \n                       selected = subcategories)\n  })\n  \n  # Plot 1: Product Rating\n  output$RatingsPlot <- renderPlotly({\n    ratings %>%\n      filter(MainCategory == input$MainCategoryChoice,\n             SubCategory %in% input$SubCategoryChoice) %>% \n      mutate(SubCategory_ordered = factor(SubCategory, \n                                          levels = unique(SubCategory[order(AverageRating)]))) %>%\n      plot_ly(x = ~SubCategory_ordered, \n              y = ~round(AverageRating,2),\n              type = 'bar',\n              marker = list(color = ~pal1[SubCategory_ordered])) %>%\n      add_annotations(x = ~SubCategory_ordered,\n                      y = ~round(AverageRating,2),\n                      text = ~paste0(round(AverageRating,2)),\n                      font = list(color = 'black', \n                                  size = 10),\n                      showarrow = FALSE,\n                      yshift = 5) %>%\n      layout(title = paste0(\"Average Product Rating For \",input$MainCategoryChoice),\n             xaxis = list(title = \"\", tickangle = 45),\n             yaxis = list(title = \"\"),\n             showlegend = FALSE,\n             margin = list(t = 50,\n                           l = 50,\n                           r = 50,\n                           b = 50)) \n  })\n  \n  # Plot 2: Product Reviews\n  output$ReviewsPlot <- renderPlotly({\n    reviews %>%\n      filter(MainCategory == input$MainCategoryChoice,\n             SubCategory %in% input$SubCategoryChoice) %>% \n      mutate(SubCategory_ordered = factor(SubCategory, \n                                          levels = unique(SubCategory[order(AverageReview)]))) %>%\n      plot_ly(x = ~SubCategory_ordered, \n              y = ~round(AverageReview),\n              type = 'bar',\n              marker = list(color = ~pal2[SubCategory_ordered])) %>%\n      add_annotations(x = ~SubCategory_ordered,\n                      y = ~round(AverageReview),\n                      text = ~paste0(round(AverageReview)),\n                      font = list(color = 'black', \n                                  size = 10),\n                      showarrow = FALSE,\n                      yshift = 5) %>%\n      layout(title = paste0(\"Average Number of Reviews For \",input$MainCategoryChoice),\n             xaxis = list(title = \"\", tickangle = 45),\n             yaxis = list(title = \"\"),\n             showlegend = FALSE,\n             margin = list(t = 50,\n                           l = 50,\n                           r =50,\n                           b = 50)) \n  })\n  \n  output$myDataTable <- DT::renderDataTable({\n    products %>%\n      filter(MainCategory == input$MainCategoryChoice,\n             SubCategory %in% input$SubCategoryChoice) %>%\n      mutate(ProductImage = sprintf('<img src=\"%s\" width=\"75px\"/>', ProductImage)) %>%\n      DT::datatable(., escape = FALSE, options = list(\n        pageLength = 10,\n        lengthMenu = c(5, 10, 25),\n        scrollY = \"600px\",\n        scrollX = TRUE\n      )) %>%\n      DT::formatStyle(columns = colnames(products), \n                      backgroundColor = styleEqual(c(\"green\", \"white\"), c(\"rgb(51, 102, 0)\", \"rgb(255, 255, 255)\")))\n  })\n  \n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n## Further Improvement Questions\n\n-   Is there a correlation between the number of ratings and the product rating?\n-   What is the average discount percentage for each main category and subcategory?\n-   What is the price range for each main category and subcategory?\n-   Which products have the highest ratings and how do they compare in terms of price and number of ratings?\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}