{
  "hash": "36c4151bc122a33bcc2d039828f7c302",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pre-Workshop Setup Guide for Quarto-based Portfolios on GitHub Pages\"\nauthor: \"Brian Cervantes Alvarez\"\ndate: \"2025-01-29\"\nimage: /Assets/Images/githubLogo.png\nformat: \n  html:\n    page-layout: article\neval: false\n---\n\n\n\n## Overview\n\nIn this short guide, we'll ensure you have all the pieces in place for our Quarto + GitHub Pages workshop. By the end of this setup, you'll have:\n\n1.  **Git installed** and configured,\n2.  **A GitHub account** (with a Personal Access Token),\n3.  **RStudio** connected to both Git and GitHub,\n4.  The ability to **push commits** so you’re good to go!\n\n------------------------------------------------------------------------\n\n## 1. Install Git\n\n**What is Git?**\\\nGit is a version control system that tracks changes in your files and makes collaboration easier. You’ll need it for publishing your Quarto site to GitHub.\n\n1.  **Windows**\n    -   [Download Git for Windows](https://git-scm.com/download/win).\\\n    -   Launch the installer; the default options generally work fine.\n2.  **Mac**\n    -   [Download Git for Mac](https://git-scm.com/download/mac), or use Homebrew:\n\n        ``` bash\n        brew install git\n        ```\n3.  **Linux**\n    -   Use your distribution’s package manager. For example, on Ubuntu/Debian:\n\n        ``` bash\n        sudo apt-get install git\n        ```\n\n**Verify Installation**\\\nOpen a terminal or command prompt and type:\n\n``` bash\ngit --version\n```\n\nYou should see something like `git version 2.42.0` (version numbers may vary).\n\n::: callout-note\nAs of January 29th, 2025, I am running on git version 2.39.5 (Apple Git-154)\n:::\n\n------------------------------------------------------------------------\n\n## 2. Create or Confirm Your GitHub Account\n\n1.  Go to <https://github.com> and **sign up** if you don’t have an account yet.\\\n2.  If you already have one, just **sign in** and remember your username and password (we'll need them).\n\n------------------------------------------------------------------------\n\n## 3. Configure Git on Your Computer\n\nIn a terminal or command prompt, configure your Git username and email (use the same email as on GitHub):\n\n``` bash\ngit config --global user.name \"YourGitHubUserName\"\ngit config --global user.email \"YourEmail@example.com\"\n```\n\nGit uses this info to label your commits.\n\n------------------------------------------------------------------------\n\n## 4. Generate a Personal Access Token (PAT)\n\nGitHub no longer uses passwords for Git operations; you’ll need a **Personal Access Token**.\n\n1.  Log in to GitHub and click your **profile pic** (top-right corner).\\\n2.  Go to **Settings** → **Developer settings** → **Personal access tokens** → **Tokens (classic)**.\\\n3.  Choose **Generate new token** → **Generate new token (classic)** (if prompted).\\\n4.  Name your token something like **RStudio-GitHub**.\\\n5.  Select the **repo** scope (so you can push to repositories).\\\n6.  **Generate** and **copy** the token somewhere safe (you won’t see it again after leaving the page).\n\n::: callout-warning\nDo not share your Personal Access Token! Don't put it in your repo or save it on your computer. Treat it like a private API key.\n:::\n\n------------------------------------------------------------------------\n\n## 5. Connect Git & GitHub in RStudio\n\n1.  **Open RStudio**.\\\n2.  Navigate to **Tools** → **Global Options** → **Git/SVN** (or **Version Control** in newer versions).\\\n3.  Ensure the **Git executable** path is correctly detected (e.g., `/usr/bin/git` on Mac/Linux or `C:/Program Files/Git/bin/git.exe` on Windows).\n\n### Optional: Using `usethis` to manage credentials\n\nTo store your PAT in R, you can use the `usethis` package. In RStudio:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\nlibrary(usethis)\ncreate_github_token()  # This opens a browser to create a token.\ngitcreds_set()         # This will prompt you to enter your PAT.\n```\n:::\n\n\n\nAfter following the prompts, your token will be securely saved.\n\n------------------------------------------------------------------------\n\n## 6. Test Your Setup (Commit & Push)\n\n1.  **Create or open an RStudio Project linked to Git**:\n    -   **File** → **New Project** → **Version Control** → **Git**.\\\n    -   Paste in your GitHub repo URL.\\\n    -   Select where to clone it locally.\n2.  **Make a small change** to a file (e.g., add “Hello, Quarto!” to a `.qmd` or `README.md`).\n3.  Save, then go to RStudio’s **Git** tab, check the file, and **Commit** with a message (e.g., “Testing my setup”).\n4.  Click **Push**. If you’re asked for username and password:\n    -   **Username**: Your GitHub username.\n    -   **Password**: Your Personal Access Token (PAT).\n\nIf it succeeds, you’ll see a success message or “Everything up to date.”\n\n------------------------------------------------------------------------\n\n## 7. Troubleshooting Repeated Login Prompts\n\nIf RStudio keeps asking for your username/password on every push:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\ngitcreds_set()\n```\n:::\n\n\n\nEnter your Personal Access Token when prompted. That should do the trick.\n\n------------------------------------------------------------------------\n\n## 8. Ready for the Workshop: Quarto + GitHub Pages\n\nWith Git and GitHub all set, you’re ready to rock your Quarto-based portfolio! In the workshop, we’ll:\n\n1.  Create a **Quarto project**.\n2.  Add `.qmd` files for your portfolio pages.\n3.  Commit and push to GitHub.\n4.  Activate **GitHub Pages** to share your site with the world.\n\n::: callout-tip\n## Pro Tip\n\nIf anything goes sideways, **screenshot the error** and note what step you were on. We’ll troubleshoot together during the workshop.\n:::\n\n------------------------------------------------------------------------\n\n**That’s it!** Make sure you finish these steps so you can jump right into creating your Quarto-based portfolio during the workshop. See you there!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}