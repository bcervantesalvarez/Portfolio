{
  "hash": "c198a072e7ee2ee0ab6a6d972a0d2001",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Got Daily Reports? Use Parameterized RMarkdown To Alleviate That Stress\"\nauthor: \"Brian Cervantes Alvarez\"\ndate: \"4-03-2023\"\nimage: report.png\ndescription: \"Enhancing Report Generation Efficiency: Automating Parameterized Rmarkdown to Save Time. Streamline daily reports with automated updates and comparable outputs over time. Boost productivity and accuracy for data scientists, analysts, and engineers. \"\nbibliography: \"bibliography.bib\"\nnocite: |\n     @*\nparams:\n  printcode: true\n  year: 2019\nformat:\n  html:\n    toc: true\n    toc-location: right\n    html-math-method: katex\n    page-layout: full\nexecute: \n  warning: false\n  message: false\ncategories: [R, Plotly, Reports, Time Series, Data Visualization]\n---\n\n\n![](report.png)\n\n<div class=\"download-buttons\" style=\"text-align: center;\">\n  <style>\n    .download-buttons a.button {\n      display: inline-block;\n      padding-right: 10px;\n      padding-left: 35px;\n      padding-top: 10px;\n      padding-bottom: 10px;\n      margin-right: 25px;\n      background-color: #343a40;\n      color: #fff;\n      text-decoration: none;\n      border-radius: 15px;\n      position: relative;\n    }\n\n    .download-buttons a.button:last-child {\n      margin-right: 0;\n    }\n\n    .download-buttons a.button:hover {\n      background-color: #55595c;\n    }\n\n    .download-buttons a.button:after {\n      content: \"\\2193\";\n      font-size: 20px;\n      position: absolute;\n      top: 50%;\n      left: 12px; /* Added margin from the text */\n      transform: translateY(-50%);\n      border-bottom: 2px solid #fff;\n      padding: 1px; /* Padding for the mini border block */\n    }\n  </style>\n\n  <script>\n    function createDynamicButton(href, text) {\n      var button = document.createElement(\"a\");\n      button.href = href;\n      button.className = \"button\";\n      button.appendChild(document.createTextNode(text));\n      return button;\n    }\n\n    var downloadButtonsDiv = document.querySelector(\".download-buttons\");\n\n    var documentButton = createDynamicButton(\n      \"https://github.com/bcervantesalvarez/Portfolio/blob/main/posts/Param_Report_Retail/index.qmd\",\n      \"Download .qmd\"\n    );\n    downloadButtonsDiv.appendChild(documentButton);\n\n    var csvButton = createDynamicButton(\n      \"https://github.com/bcervantesalvarez/Portfolio/blob/main/posts/Param_Report_Retail/retail.csv\",\n      \"Download .csv\"\n    );\n    downloadButtonsDiv.appendChild(csvButton);\n  </script>\n</div>\n\n\n## Purpose\n\nFor this particular undertaking, I focused on the utilization of parameterized Rmarkdown with the aim of enhancing the efficacy of report generation. This approach involves setting predetermined values for parameters and creating a function that automatically updates the information, thereby mitigating the need for manual modification of parameters for daily reports. The primary objective of this system is to generate reports more efficiently, which in turn helps businesses save time in the long run. Furthermore, data scientists, analysts, and engineers can benefit from this system as it enables them to produce comparable reports over time with ease. The automation of the report generation process through the use of parameterized Rmarkdown contributes to increased productivity and accuracy, which can be highly beneficial to the success of a business.\n\n## Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(zoo)\nlibrary(rmarkdown)\nlibrary(purrr)\n```\n:::\n\n\n## Load Dataset & Wrangle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds <- read_csv(\"retail.csv\")\n\n#head(ds)\n\nds <- ds %>% \n  rename(ID = ...1) %>%\n  mutate(Month = lubridate::floor_date(Date, 'month')) %>%\n  filter(year(Month) == params$year)\n\nglimpse(ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10,042\nColumns: 9\n$ ID         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ DocumentID <dbl> 716, 716, 716, 716, 716, 716, 716, 460, 461, 462, 463, 464,…\n$ Date       <date> 2019-09-23, 2019-09-23, 2019-09-23, 2019-09-23, 2019-09-23…\n$ SKU        <dbl> 1039, 853, 862, 868, 2313, 2355, 2529, 2361, 2723, 655, 254…\n$ Price      <dbl> 381.78, 593.22, 423.73, 201.70, 345.76, 406.78, 542.38, 139…\n$ Discount   <dbl> 67.37254, 0.00034, -0.00119, 35.58814, 61.01966, 101.69458,…\n$ Customer   <dbl> 1, 1, 1, 1, 1, 1, 1, 460, 479, 26, 580, 311, 311, 311, 311,…\n$ Quantity   <dbl> 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 2, 2, 1, 1, 1, 4, 1, 1, 4,…\n$ Month      <date> 2019-09-01, 2019-09-01, 2019-09-01, 2019-09-01, 2019-09-01…\n```\n\n\n:::\n:::\n\n\n\n\n## Visualize The Report\n\nI utilized ggplotly, a graphical representation tool, to create an interactive visualization of monthly sales time series data for \"CRM and Invoicing system,\" which is a wholesale company owned by Sadi Evren. The data for this analysis was obtained from the following Kaggle dataset: https://www.kaggle.com/datasets/shedai/retail-data-set?select=file_out.csv.\n\nThe resulting plot provided an insightful representation of the monthly sales data, showcasing trends and patterns in the data that could potentially provide useful information for decision making in the business.\n\nIn addition to the initial plot, I implemented a for loop to automatically generate multiple reports based on the time series data for each year. This approach eliminated the need for manual report generation, thereby saving time and reducing the risk of errors. The loop enabled the automated generation of separate reports for each year, which provided a comprehensive view of the sales trends over time.\n\nOverall, the use of ggplotly for data visualization and automation of report generation using a for loop demonstrated an effective approach for efficiently analyzing and presenting data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ds %>%\n  group_by(Month) %>%\n  summarize(AvgSales = round(mean(Price * Quantity),2) ) %>%\n  ggplot(aes(x = Month, \n             y = AvgSales,\n             group = 1,                 #Necessary or else line plot disappears\n             text = paste0(\"Monthly Sales: $\", (round(AvgSales/1000,2)),\"K\" ))) +\n  geom_line(size = 1) + \n  scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = \"K\")) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B\") + \n  labs(title = paste0(\"CRM and Invoicing System Sales For FY: \", params$year),\n       caption = \"Source: https://www.kaggle.com/datasets/shedai/retail-data-set?select=file_out.csv\",\n       x = NULL,\n       y = NULL) +\n  myTheme()\n\nggplotly(p, tooltip = c(\"text\")) %>% \n  layout(hovermode = \"x unified\") \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-25e82fdd96329e67c282\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-25e82fdd96329e67c282\">{\"x\":{\"data\":[{\"x\":[17897,17928,17956,17987,18017,18048,18078,18109,18140,18170,18201,18231],\"y\":[5445.6199999999999,6221.6000000000004,7009.8999999999996,7054.4799999999996,11329.940000000001,11629.42,10792.469999999999,7329.8400000000001,12539.52,9659.6299999999992,7174.0299999999997,7750.8800000000001],\"text\":[\"Monthly Sales: $5.45K\",\"Monthly Sales: $6.22K\",\"Monthly Sales: $7.01K\",\"Monthly Sales: $7.05K\",\"Monthly Sales: $11.33K\",\"Monthly Sales: $11.63K\",\"Monthly Sales: $10.79K\",\"Monthly Sales: $7.33K\",\"Monthly Sales: $12.54K\",\"Monthly Sales: $9.66K\",\"Monthly Sales: $7.17K\",\"Monthly Sales: $7.75K\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.7795275590551185,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":90.16701803930799,\"r\":18.897637795275585,\"b\":45.83212553361259,\"l\":46.460942070908629},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"<b> CRM and Invoicing System Sales For FY: 2019 <\\/b>\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":21.253632212536321},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[17880.299999999999,18247.700000000001],\"tickmode\":\"array\",\"ticktext\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"tickvals\":[17897,17928,17956,17987,18017,18048,18078,18109,18140,18170,18201,18231],\"categoryorder\":\"array\",\"categoryarray\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":11.955168119551681},\"tickangle\":-45,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":13.283520132835205}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[5090.9250000000002,12894.215],\"tickmode\":\"array\",\"ticktext\":[\"$7K\",\"$9K\",\"$11K\"],\"tickvals\":[7000,9000,11000],\"categoryorder\":\"array\",\"categoryarray\":[\"$7K\",\"$9K\",\"$11K\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":11.955168119551683},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"SF Mono\",\"size\":13.283520132835205}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"x unified\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"12e571bfe85f4\":{\"x\":{},\"y\":{},\"text\":{},\"type\":\"scatter\"}},\"cur_data\":\"12e571bfe85f4\",\"visdat\":{\"12e571bfe85f4\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## Other Reports Generated\n\n### 2020 Report\n\n<iframe src=\"https://bcervantesalvarez.github.io/ParameterizedReports/CRM_Report/CRM_Report-2020.html\" width=\"100%\" height=\"1000\" allowfullscreen>\n\n</iframe>\n\n### 2021 Report\n\n<iframe src=\"https://bcervantesalvarez.github.io/ParameterizedReports/CRM_Report/CRM_Report-2021.html\" width=\"100%\" height=\"1000\" allowfullscreen>\n\n</iframe>\n\n### 2022 Report\n\n<iframe src=\"https://bcervantesalvarez.github.io/ParameterizedReports/CRM_Report/CRM_Report-2022.html\" width=\"100%\" height=\"1000\" allowfullscreen>\n\n</iframe>\n\n## Function To Run Parameterized Reports\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenderReport <- function(year) {\n  rmarkdown::render(\n    'input.Rmd',\n    output_file = paste0(year, '.html'),\n    params = list(year = year),\n    envir = parent.frame()\n  )\n}\n```\n:::\n\n\n## Render All Reports\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Renders all 4 Reports (dates range from 2019-2022)\nfor (year in 2019:2022) {\n    renderReport(year)\n}\n```\n:::\n\n\n## Data References\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.3/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.3/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}